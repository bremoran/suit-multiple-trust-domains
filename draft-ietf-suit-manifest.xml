<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-13" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2021" month="May" day="25"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads or Dependencies.</t>
  <t>Delegation Chains (see <xref target="ovr-delegation"/>) allow a Recipient to work from one of its Trust Anchors to an authority of the Authentication Block.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, including lists of dependencies and affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated dependencies (see <xref target="ovr-integrated"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependencies            |      +-> +-----------------------+
| Components IDs          |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads or dependencies. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (<xref target="ovr-auth"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains a bstr-wrapped <xref target="SUIT_Digest"></xref> and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of three parts: a list of dependencies, a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/>, and <xref target="SUIT_Dependency"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Dependency Resolution, Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. A Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command.</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, Concise Software Identifiers (<xref target="I-D.ietf-sacm-coswid">CoSWID</xref>), or Text data. Integrated Dependencies and Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text and CoSWID sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Dependencies and Payloads">

<t>In some cases, it is beneficial to include a dependency or a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest requires encryption, it must be referenced as a dependency, so a trivial manifest may be used to enclose the encrypted manifest. The encrypted manifest may be contained in the dependent manifest’s envelope.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="composite-manifests"/>, <xref target="encrypted-manifests"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Manifest Processor Behavior">

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Manifest Processor Setup">

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
  <t>Missing component from a set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="I-D.ietf-suit-architecture"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="I-D.ietf-suit-information-model"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity. Where a device supports only one level of access, it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device supports more than one trusted party, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index or Set Dependency Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again in its entirety after authenticity validation.</t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>Alternatively, a Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor–a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component or dependency. A dependency is another SUIT_Envelope that describes additional components. Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object “current” is used. It represents the component identified by the Component Index or the dependency identified by the Dependency Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
    if component-index is not false
    else dependencies\[dependency-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg]. The actual operation performed for Set Component Index is described by the following pseudocode, however, because of the definition of current (above), these are semantically equivalent.</t>

<figure><artwork><![CDATA[
component-index := arg
dependency-index := false
]]></artwork></figure>

<t>Similarly, Set Dependency Index is semantically equivalent to current := dependencies[arg]</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency. Most commands operate on either a component or a dependency. Setting the Component Index clears the Dependency Index. Setting the Dependency Index clears the Component Index.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Offset</c>
      <c>assert(offsetof(current) == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Check Image Not Match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(current, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
      <c>Garbage Collect</c>
      <c>garbage-collect(current)</c>
</texttable>

</section>
<section anchor="index-true" title="Special Cases of Component Index and Dependency Index">

<t>Component Index and Dependency Index can each take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index and Set Dependency Index. Arrays of integers MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 3 or more components or 3 or more dependencies, respectively. True MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 2 or more components or 2 or more dependencies, respectively. Each of these operates on the list of components or list of dependencies declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) or a list of dependencies (Set Dependency Index) to which each subsequent command applies. The value True replaces the list of component indices or dependency indices with the full list of components or the full list of dependencies, respectively, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component or dependency identified by the component index or dependency index if that index is an integer, or 2. it operates on each component or dependency identified by an array of indicies, or 3. it operates on every component or every dependency if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else if component-index is integer:
    current-list = [ components[component-index] ]
else if dependency-index is true:
    current-list = dependencies
else if dependency-index is array:
    current-list = [ dependencies[idx] for idx in dependency-index ]
else:
    current-list = [ dependencies[dependency-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component or Dependency. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True or Dependency Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index or Dependency Index to each index in turn.</t>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component or dependency index of True, it does not ignore any commands. It applies them to the current component or dependency on each iteration.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index or Set Dependency Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index or Set Dependency Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The Manifest Processor MUST also support a Dependency Index of True, which applies to every dependency, as described in <xref target="index-true"/></t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in <xref target="command-behavior"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True or Dependency Index = True, this means that the parameters consumed by each command MUST have been set for each Component or Dependency, respectively.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component and no dependencies, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</spanx></t>

<section anchor="template-compatibility-check" title="Compatibility Check Template">

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot" title="Trusted Invocation Template">

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template" title="Component Download Template">

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

<t>Optionally, the Set Parameters directive in the install sequence MAY also contain Encryption Info (see <xref target="suit-parameter-encryption-info"/>), Compression Info (see <xref target="suit-parameter-compression-info"/>), or Unpack Info (see <xref target="suit-parameter-unpack-info"/>) to perform simultaneous download and decryption, decompression, or unpacking, respectively.</t>

</section>
<section anchor="template-install" title="Install Template">

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-install-transform" title="Install and Transform Template">

<t>The goal of the Install and Transform template is to use an image already stored in an identified component to decompress, decrypt, or unpack at time of installation.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: all Component Download operations are moved from the common sequence and the install sequence to the fetch sequence. The Component Download template targets a download component identifier, while the Install and Transform template uses an install component identifier. In-place unpacking, decompression, and decryption is complex and vulnerable to power failure. Therefore, these identifiers SHOULD be different; in-place installation SHOULD NOT be used without establishing guarantees of robustness to power failure.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for:  <list style="symbols">
      <t>Source Component for download component identifier (see <xref target="suit-parameter-source-component"/>)</t>
      <t>Encryption Info (see <xref target="suit-parameter-encryption-info"/>)</t>
      <t>Compression Info (see <xref target="suit-parameter-compression-info"/>)</t>
      <t>Unpack Info (see <xref target="suit-parameter-unpack-info"/>)</t>
    </list></t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload" title="Integrated Payload Template">

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>) except that it places an added restriction on the URI passed to the Set Parameters directive.</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MAY be a positive or negative integer. The payload envelope key MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the manifest. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the payload. For example, an envelope that contains a payload a key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
<section anchor="template-load-ext" title="Load from Nonvolatile Storage Template">

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-load-decompress" title="Load &amp; Decompress from Nonvolatile Storage Template">

<t>The goal of the Load &amp; Decompress from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, decompressing on-the-fly, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This template is similar to <xref target="template-load-ext"/> but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

<t>This template can be modified for decryption or unpacking by adding Decryption Info or Unpack Info to the Set Parameters directive.</t>

</section>
<section anchor="template-dependency" title="Dependency Template">

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementer MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see <xref target="secparameters"/>)</t>
      <t>Encryption Info (see <xref target="secparameters"/>)</t>
    </list></t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template.</t>

<t>NOTE: Any test can be used to select between images, Check Offset Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Delegation Chains, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see <xref target="authentication-info"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list containing a <xref target="SUIT_Digest"></xref> and one or more cryptographic authentication wrappers for the Manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the Manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>To use an encrypted manifest, it must be a dependency of a plaintext manifest. This allows fine-grained control of what information is accessible to intermediate systems for the purposes of management, while still preserving the confidentiality of the manifest contents. This also means that a Recipient can process an encrypted manifest in the same way as an encrypted payload, allowing code reuse.</t>

<t>A template for using an encrypted manifest is covered in Encrypted Manifest Template (<xref target="template-encrypted-manifest"/>).</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a Concise Software Identifier (CoSWID) found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>The CoSWID, Text section, or any Command Sequence of the Update Procedure (Dependency Resolution, Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps Recipients to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>) or the suit-common of a dependency.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
      <c>suit-text-version-required</c>
      <c>A free text expression of the required version number</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="text-version-required" title="text-version-required">

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author SHOULD populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a free text expression that is representative of the version constraints placed on the dependency. This text SHOULD be expressive enough that a device operator can be expected to understand the dependency. This is a free text field and there are no specific formatting rules.</t>

<t>By way of example only, to express a dependency on a component “[‘x’, ‘y’]”, where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<figure><artwork><![CDATA[
[h'78',h'79'] : {
    7 : ">=1.2.5,<2"
}
]]></artwork></figure>

<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid contains a Concise Software Identifier (CoSWID) as defined in <xref target="I-D.ietf-sacm-coswid"/>. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid typically requires no processing by the Recipient. However all Recipients MUST NOT fail if a suit-coswid is present.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of <xref target="SUIT_Dependency"></xref> blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement; at least one manifest in a dependency tree MUST contain a suit-components block.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or commamd in suit-common-sequence results in a smaller encoding.</t>

<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see <xref target="suit-component-identifier"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. A dependency MAY declare a prefix to the components defined in the dependency manifest. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution: suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the invocable manifest or the “process dependencies” directive for any dependents of the invocable manifest. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the Component Identifier tables defined at the beginning of the manifest. For the purpose of setting the index, the two Component Identifier tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>To facilitate construction of Reports that describe the success, or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine’s interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array. If the dependency index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Dependency, in the order expressed in the Dependencies list or the component index array, respectively.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-parameter-component-offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="cbor-pen-uuid-namespace-identifier" title="CBOR PEN UUID Namespace Identifier">

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 DE                # tag(111)
   45                # bytes(5)
      2B 06 01 04 01 # X.690 Clause 8.19
#    1.3  6  1  4  1  show component encoding
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 08cfcc43-47d9-5696-85b1-9c738465760e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers" title="Constructing UUIDs">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expiry date for the use of the manifest encoded as the positive integer number of seconds since 1970-01-01. Implementations that use this parameter MUST use a 64-bit internal representation of the integer.</t>

</section>
<section anchor="suit-parameter-component-offset" title="suit-parameter-component-offset">

<t>This parameter sets the offset in a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its offset into the component’s storage area. This offset MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the keys and algorithm information Fetch or Copy has to use to decrypt the confidentiality protected data. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged structure wrapped in a bstr. A separate document will profile the COSE specification for use of manifest and firmware encrytion.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>SUIT_Compression_Info defines any information that is required for a Recipient to perform decompression operations. SUIT_Compression_Info is a map containing this data. The only element defined for the map in this specification is the suit-compression-algorithm. This document defines the following suit-compression-algorithm’s: ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="I-D.kucherawy-rfc8478bis"/>.</t>

<t>Additional suit-compression-algorithm’s can be registered through the IANA-maintained registry. If such a format requires more data than an algorithm identifier, one or more new elements MUST be introduced by specifying an element for SUIT_Compression_Info-extensions.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a Recipient to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with suit-condition-minimum-battery (<xref target="suit-condition-minimum-battery"/>).</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with suit-condition-update-authorized (<xref target="suit-condition-update-authorized"/>) to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when suit-condition-version (<xref target="suit-condition-version"/>) is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>suit-directive-wait (<xref target="suit-directive-wait"/>) directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as suit-parameter-update-priority</c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (seconds since 1970-01-01)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-time-of-day-utc</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00 UTC</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
      <c>suit-wait-event-day-of-week-utc</c>
      <c>uint</c>
      <c>Wait until days since Sunday UTC</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>Indicates a list of URIs from which to fetch a resource. The URI list is encoded as a list of text string, in priority order. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context. The Recipient should attempt to fetch the resource from each URI in turn, ruling out each, in order, if the resource is inaccessible or it is otherwise undesirable to fetch from that URI. suit-parameter-uri-list is consumed by suit-directive-fetch-uri-list (<xref target="suit-directive-fetch-uri-list"/>).</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. SUIT_Process_Dependency must preserve and restore the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-condition-component-offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>). If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter (<xref target="suit-parameter-use-before"/>), which must have already been set as a parameter, encoded as seconds after 1970-01-01 00:00:00 UTC. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-offset" title="suit-condition-component-offset">

<t>Verify that the offset of the current component matches the offset set in suit-parameter-component-offset (<xref target="suit-parameter-component-offset"/>). This condition allows a manifest to select between several images to match a target offset.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient’s battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes suit-parameter-minimum-battery (<xref target="suit-parameter-minimum-battery"/>).</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. suit-parameter-update-priority (<xref target="suit-parameter-update-priority"/>) provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component’s version against the version info specified in suit-parameter-version (<xref target="suit-parameter-version"/>)</t>

</section>
<section anchor="suit-condition-abort" title="suit-condition-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom" title="suit-condition-custom">

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Fetch URI list</c>
      <c>suit-directive-fetch-uri-list</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>Garbage Collect</c>
      <c>suit-directive-garbage-collect</c>
      <c><xref target="suit-directive-garbage-collect"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value “True” is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If the following commands apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies, or an array of unsigned integer indices into the list of dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>If dependency index is set to True when a command is invoked, then the command applies to all dependencies, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the dependency index is set to True, the Manifest Processor MUST execute the command once for each possible dependency index, ensuring that the command receives the parameters corresponding to that dependency index. If the dependency index is set to an array of unsigned integers, then the Manifest Processor MUST execute the command once for each listed dependency index, ensuring that the command receives the parameters corresponding to that dependency index.</t>

<t>See <xref target="index-true"/> for more details.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” then the command sequence MUST be terminated with an error.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and dependency-index, respectively. If component-index or dependency-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

</section>
<section anchor="suit-directive-fetch-uri-list" title="suit-directive-fetch-uri-list">

<t>suit-directive-fetch-uri-list uses the same semantics as suit-directive-fetch (<xref target="suit-directive-fetch"/>), except that it iterates over the URI List (<xref target="suit-parameter-uri-list"/>) to select a URI to fetch from.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suit-directive-garbage-collect" title="suit-directive-garbage-collect">

<t>suit-directive-garbage-collect marks the current component as unused in the current manifest. This can be used to remove temporary storage or remove components that are no longer needed. Example use cases:</t>

<t><list style="symbols">
  <t>Temporary storage for encrypted download</t>
  <t>Temporary storage for verifying decompressed file before writing to flash</t>
  <t>Removing Trusted Service no longer needed by Trusted Application</t>
</list></t>

<t>Once the current Command Sequence is complete, the manifest processors checks each marked component to see whether any other manifests have referenced it. Those marked components with no other references are deleted. The manifest processor MAY choose to ignore a Garbage Collect directive depending on device policy.</t>

<t>suit-directive-garbage-collect is OPTIONAL to implement in manifest processors.</t>

</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the CoSWID, Text section, or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The SUIT digest is a CBOR List containing two elements: a suit-digest-algorithm-id and a bstr containing the bytes of the digest.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 107 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 1070 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>&#160;</c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>&#160;</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>&#160;</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>&#160;</c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>&#160;</c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>&#160;</c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>&#160;</c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>&#160;</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>&#160;</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>&#160;</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>&#160;</c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>&#160;</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>&#160;</c>
      <c>30</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>&#160;</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>&#160;</c>
      <c>33</c>
      <c>Garbage Collect</c>
      <c><xref target="suit-directive-garbage-collect"/></c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>&#160;</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>5</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>19</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>20</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>27</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>28</c>
      <c>Version</c>
      <c>{{suit-parameter-version}</c>
      <c>29</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>30</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values" title=" SUIT Component Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<section anchor="suit-digest-algorithm-identifiers" title="SUIT Digest Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>SHA224</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>2</c>
      <c>SHA256</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>3</c>
      <c>SHA384</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>4</c>
      <c>SHA512</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>5</c>
      <c>SHA3-224</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>6</c>
      <c>SHA3-256</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>7</c>
      <c>SHA3-384</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>8</c>
      <c>SHA3-512</c>
      <c><xref target="SUIT_Digest"/></c>
</texttable>

</section>
<section anchor="suit-compression-algorithm-identifiers" title="SUIT Compression Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>zlib</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>2</c>
      <c>Brotli</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>3</c>
      <c>zstd</c>
      <c><xref target="suit-parameter-compression-info"/></c>
</texttable>

</section>
<section anchor="unpack-algorithms" title="Unpack Algorithms">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>HEX</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>2</c>
      <c>ELF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>3</c>
      <c>COFF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>4</c>
      <c>SREC</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
</texttable>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="I-D.ietf-suit-architecture"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor="I-D.ietf-suit-architecture">
   <front>
      <title>A Firmware Update Architecture for Internet of Things</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="David Brown">
	 <organization>Linaro</organization>
      </author>
      <author fullname="Milosch Meriac">
	 <organization>Consultant</organization>
      </author>
      <date month="January" day="27" year="2021" />
      <abstract>
	 <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.

 In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-architecture-16" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-architecture-16.txt" />
</reference>


<reference anchor="I-D.ietf-suit-information-model">
   <front>
      <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date month="April" day="6" year="2021" />
      <abstract>
	 <t>   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-information-model-11" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-information-model-11.txt" />
</reference>


<reference anchor="I-D.ietf-teep-architecture">
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname="Mingliang Pei">
	 <organization>Broadcom</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Dave Thaler">
	 <organization>Microsoft</organization>
      </author>
      <author fullname="David Wheeler">
	 <organization>Intel</organization>
      </author>
      <date month="February" day="22" year="2021" />
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-teep-architecture-14" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-teep-architecture-14.txt" />
</reference>


<reference anchor="I-D.ietf-sacm-coswid">
   <front>
      <title>Concise Software Identification Tags</title>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Jessica Fitzgerald-McKay">
	 <organization>National Security Agency</organization>
      </author>
      <author fullname="Charles Schmidt">
	 <organization>The MITRE Corporation</organization>
      </author>
      <author fullname="David Waltermire">
	 <organization>National Institute of Standards and Technology</organization>
      </author>
      <date month="February" day="22" year="2021" />
      <abstract>
	 <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-17" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-17.txt" />
</reference>


<reference anchor="I-D.ietf-cbor-tags-oid">
   <front>
      <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
      <author fullname="Carsten Bormann">
	 <organization>Universität Bremen TZI</organization>
      </author>
      <date month="March" day="30" year="2021" />
      <abstract>
	 <t>   The Concise Binary Object Representation (CBOR, RFC 8949) is a data
   format whose design goals include the possibility of extremely small
   code size, fairly small message size, and extensibility without the
   need for version negotiation.

   The present document defines CBOR tags for object identifiers (OIDs).
   It is intended as the reference document for the IANA registration of
   the CBOR tags so defined.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-cbor-tags-oid-06" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-cbor-tags-oid-06.txt" />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8747" target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2020' month='March' />
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>


<reference anchor="I-D.kucherawy-rfc8478bis">
   <front>
      <title>Zstandard Compression and the &#39;application/zstd&#39; Media Type</title>
      <author fullname="Yann Collet">
	 <organization>Facebook</organization>
      </author>
      <author fullname="Murray S. Kucherawy">
	 <organization>Facebook</organization>
      </author>
      <date month="December" day="18" year="2020" />
      <abstract>
	 <t>Zstandard, or &quot;zstd&quot; (pronounced &quot;zee standard&quot;), is a lossless data compression mechanism. This document describes the mechanism and registers a media type, content encoding, and a structured syntax suffix to be used when transporting zstd-compressed content via MIME.

 Despite use of the word &quot;standard&quot; as part of Zstandard, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.

 This document replaces and obsoletes RFC 8478.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-kucherawy-rfc8478bis-06" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-kucherawy-rfc8478bis-06.txt" />
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.48(SUIT_Envelope)
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Severable_Manifest_Members = (
  ? suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
SUIT_Integrated_Dependency = (
    suit-integrated-payload-key => bstr .cbor SUIT_Envelope
)
suit-integrated-payload-key = nint / uint .ge 24

SUIT_Manifest_Tagged = #6.480(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Manifest_Members,
    SUIT_Severable_Members_Digests,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unserverble-manifest-member-extensions,
)

SUIT_Severable_Members_Digests = (
  ? suit-dependency-resolution => SUIT_Digest,
  ? suit-payload-fetch => SUIT_Digest,
  ? suit-install => SUIT_Digest,
  ? suit-text => SUIT_Digest,
  ? suit-coswid => SUIT_Digest,
  * $$severable-manifest-members-digests-extensions
)

SUIT_Common = {
    ? suit-dependencies           => SUIT_Dependencies,
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-not-match,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-use-before,        SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-minimum-battery,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-update-authorized, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-version,           SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-offset,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-wait,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-fetch-uri-list,    SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-garbage-collect,   SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

SUIT_Parameters //= (suit-parameter-uri-list =>
    bstr .cbor SUIT_URI_List)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    * $$SUIT_Compression_Info-extensions,
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    * $$SUIT_Unpack_Info-extensions,

}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_URI_List = [+ tstr ]

SUIT_Text_Map = {
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    },
    SUIT_Text_Keys
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    ? suit-text-version-required      => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-try-each                 = 15
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32
suit-directive-garbage-collect          = 33

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1

suit-unpack-algorithm  = 1

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
suit-text-version-required      = 7
]]></artwork></figure>

</section>
<section anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-offset</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ([
        digest: bstr .cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'5c097ef64bf3bb9b494e71e1f2418eef8d466cc902f639a855ec9af3e9eddb99'
        ]),
        signature: bstr .cbor (18([
                / protected / bstr .cbor ({
                    / alg / 1:-7 / "ES256" /,
                }),
                / unprotected / {
                },
                / payload / F6 / nil /,
                / signature / h'a19fd1f23b17beed321cece7423dfb48c457b8
f1f6ac83577a3c10c6773f6f3a7902376b59540920b6c5f57bac5fc8543d8f5d3d974f
aa2e6d03daa534b443a7'
            ]))
        ]
    ]),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:0,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  159</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a2025827815824820258205c097ef64bf3bb9b494e71e1f2418eef8d466c
c902f639a855ec9af3e9eddb99035871a50101020003585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f0a
4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  235</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a2025873825824820258205c097ef64bf3bb9b494e71e1f2418eef8d466c
c902f639a855ec9af3e9eddb99584ad28443a10126a0f65840a19fd1f23b
17beed321cece7423dfb48c457b8f1f6ac83577a3c10c6773f6f3a790237
6b59540920b6c5f57bac5fc8543d8f5d3d974faa2e6d03daa534b443a703
5871a50101020003585fa202818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ([
        digest: bstr .cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'987eec85fa99fd31d332381b9810f90b05c2e0d4f284a6f4211207ed00fff750'
        ]),
        signature: bstr .cbor (18([
                / protected / bstr .cbor ({
                    / alg / 1:-7 / "ES256" /,
                }),
                / unprotected / {
                },
                / payload / F6 / nil /,
                / signature / h'0008d2678ddda1afd6846cb9272f539a789e4c
ed4c874774e58dbe4cf1607e755668029ad6383d4e14c72083ba43002fe3f5cda48859
90c9b59135976b80ebc9'
            ]))
        ]
    ]),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  194</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820987eec85fa99fd31d332381b9810f90b05c2e0
d4f284a6f4211207ed00fff750035894a50101020103585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f09
58258613a115781b687474703a2f2f6578616d706c652e636f6d2f66696c
652e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  270</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587382582482025820987eec85fa99fd31d332381b9810f90b05c2e0
d4f284a6f4211207ed00fff750584ad28443a10126a0f658400008d2678d
dda1afd6846cb9272f539a789e4ced4c874774e58dbe4cf1607e75566802
9ad6383d4e14c72083ba43002fe3f5cda4885990c9b59135976b80ebc903
5894a50101020103585fa202818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d0010f020f0958258613a115781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields" title="Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ([
        digest: bstr .cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'78fa7652e377d31dcd7e95730c885ef13b6ee394d586410aa5fd0aca1f299d34'
        ]),
        signature: bstr .cbor (18([
                / protected / bstr .cbor ({
                    / alg / 1:-7 / "ES256" /,
                }),
                / unprotected / {
                },
                / payload / F6 / nil /,
                / signature / h'1aa5bf99688b5d6a1211fd9c99bdd409b64cd6
add316ff87029a81faf682f93c5fb94863eebdfd17a6fcfed729ffa9735a624ce7edb5
65cba26ff7a5bd6a779d'
            ]))
        ]
    ]),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
        ],
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-run / 23,2
        ]),
        / text / 13:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'2bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918'
        ],
    }),
    / install / 9:bstr .cbor ([
        / directive-set-parameters / 19,{
            / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
        } ,
        / directive-fetch / 21,2 ,
        / condition-image-match / 3,15
    ]),
    / text / 13:bstr .cbor ({
        [h'00']:{
                / vendor-domain / 3:'arm.com',
                / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
            }
    }),
}
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  233</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a20258278158248202582078fa7652e377d31dcd7e95730c885ef13b6ee3
94d586410aa5fd0aca1f299d340358bba70101020203585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f09
820258203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f94
9d84ea0e18d20a4382030f0c438217020d820258202bfc4d0cc6680be7dd
9f5ca30aa2bb5d1998145de33d54101b80e2ca49faf918
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  309</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a20258738258248202582078fa7652e377d31dcd7e95730c885ef13b6ee3
94d586410aa5fd0aca1f299d34584ad28443a10126a0f658401aa5bf9968
8b5d6a1211fd9c99bdd409b64cd6add316ff87029a81faf682f93c5fb948
63eebdfd17a6fcfed729ffa9735a624ce7edb565cba26ff7a5bd6a779d03
58bba70101020203585fa202818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d0010f020f09820258203ee96dc79641970ae46b
929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c4382
17020d820258202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54
101b80e2ca49faf918
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object and Severable Elements:  892</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a40258738258248202582078fa7652e377d31dcd7e95730c885ef13b6ee3
94d586410aa5fd0aca1f299d34584ad28443a10126a0f658401aa5bf9968
8b5d6a1211fd9c99bdd409b64cd6add316ff87029a81faf682f93c5fb948
63eebdfd17a6fcfed729ffa9735a624ce7edb565cba26ff7a5bd6a779d03
58bba70101020203585fa202818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d0010f020f09820258203ee96dc79641970ae46b
929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c4382
17020d820258202bfc4d0cc6680be7dd9f5ca30aa2bb5d1998145de33d54
101b80e2ca49faf91809583c8613a1157832687474703a2f2f6578616d70
6c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c652f
66696c652e62696e1502030f0d590204a20179019d2323204578616d706c
6520323a2053696d756c74616e656f757320446f776e6c6f61642c20496e
7374616c6c6174696f6e2c2053656375726520426f6f742c205365766572
6564204669656c64730a0a2020202054686973206578616d706c6520636f
766572732074686520666f6c6c6f77696e672074656d706c617465733a0a
202020200a202020202a20436f6d7061746962696c69747920436865636b
20287b7b74656d706c6174652d636f6d7061746962696c6974792d636865
636b7d7d290a202020202a2053656375726520426f6f7420287b7b74656d
706c6174652d7365637572652d626f6f747d7d290a202020202a20466972
6d7761726520446f776e6c6f616420287b7b6669726d776172652d646f77
6e6c6f61642d74656d706c6174657d7d290a202020200a20202020546869
73206578616d706c6520616c736f2064656d6f6e73747261746573207365
76657261626c6520656c656d656e747320287b7b6f76722d736576657261
626c657d7d292c20616e64207465787420287b7b6d616e69666573742d64
69676573742d746578747d7d292e814100a2036761726d2e636f6d057852
5468697320636f6d706f6e656e7420697320612064656d6f6e7374726174
696f6e2e205468652064696765737420697320612073616d706c65207061
747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images" title="Example 3: A/B images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ([
        digest: bstr .cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'ae0c1ea689c9800a843550f38796b6fdbd52a0c78be5d26011d8e784da43d47c'
        ]),
        signature: bstr .cbor (18([
                / protected / bstr .cbor ({
                    / alg / 1:-7 / "ES256" /,
                }),
                / unprotected / {
                },
                / payload / F6 / nil /,
                / signature / h'1296c87d168bb857495e6551730f9d6d3a6d81
ad6c908c72fbc52ddcb2e8011d20d217b3f1c028374eecbda5d2ca26d047270b397dca
a91a48a7c78cf376004e'
            ]))
        ]
    ]),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    bstr .cbor ([
                        / directive-override-parameters / 20,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:bstr .cbor ([
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                            ]),
                            / image-size / 14:34768,
                        }
                    ]) ,
                    bstr .cbor ([
                        / directive-override-parameters / 20,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:bstr .cbor ([
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                            ]),
                            / image-size / 14:76834,
                        }
                    ])
                ] ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-try-each / 15,[
                bstr .cbor ([
                    / directive-set-parameters / 19,{
                        / offset / 5:33792,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ]) ,
                bstr .cbor ([
                    / directive-set-parameters / 19,{
                        / offset / 5:541696,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ])
            ] ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  330</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820ae0c1ea689c9800a843550f38796b6fdbd52a0
c78be5d26011d8e784da43d47c0359011ba5010102030358aaa202818141
000458a18814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af
1425695e48bf429b2d51f2ab450f8258368614a105198400050514a20358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d0583a8614a1051a00084400050514a203582482
0258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0e1a00012c22010f020f095861860f82582a8613a105198400
050513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
312e62696e582c8613a1051a00084400050513a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  406</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587382582482025820ae0c1ea689c9800a843550f38796b6fdbd52a0
c78be5d26011d8e784da43d47c584ad28443a10126a0f658401296c87d16
8bb857495e6551730f9d6d3a6d81ad6c908c72fbc52ddcb2e8011d20d217
b3f1c028374eecbda5d2ca26d047270b397dcaa91a48a7c78cf376004e03
59011ba5010102030358aaa202818141000458a18814a20150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f
8258368614a105198400050514a203582482025820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583a86
14a1051a00084400050514a2035824820258200123456789abcdeffedcba
987654321000112233445566778899aabbccddeeff0e1a00012c22010f02
0f095861860f82582a8613a105198400050513a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a0008
4400050513a115781c687474703a2f2f6578616d706c652e636f6d2f6669
6c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load &amp; Decompress (<xref target="template-load-decompress"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ([
        digest: bstr .cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'4b4c7c8c0fda76c9c9591a9db160918e2b3c96a58b0a5e4984fd4e8f9359a928'
        ]),
        signature: bstr .cbor (18([
                / protected / bstr .cbor ({
                    / alg / 1:-7 / "ES256" /,
                }),
                / unprotected / {
                },
                / payload / F6 / nil /,
                / signature / h'd88c4953fe5a0399e69ab37fe654d1f1b957a4
4a46fde3e9cffdf0cdaa0456ddce9f08bc2a59895ffd70adce0e4aee8690645dcd4b7b
77d401bd91e35aa115d2'
            ]))
        ]
    ]),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00'] ,
                [h'02'] ,
                [h'01']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / payload-fetch / 8:bstr .cbor ([
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / install / 9:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 22:1 / [h'02'] /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15
        ]),
        / load / 11:bstr .cbor ([
            / directive-set-component-index / 12,2 ,
            / directive-set-parameters / 19,{
                / image-digest / 3:bstr .cbor ([
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                ]),
                / image-size / 14:76834,
                / source-component / 22:0 / [h'00'] /,
                / compression-info / 19:1 / "gzip" /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-set-component-index / 12,2 ,
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  287</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a2025827815824820258204b4c7c8c0fda76c9c9591a9db160918e2b3c96
a58b0a5e4984fd4e8f9359a9280358f1a801010204035867a20283814100
814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f085827880c0113a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e1502030f094b880c0013a116011602
030f0a45840c00030f0b583a880c0213a4035824820258200123456789ab
cdeffedcba987654321000112233445566778899aabbccddeeff0e1a0001
2c22130116001602030f0c45840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  363</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a2025873825824820258204b4c7c8c0fda76c9c9591a9db160918e2b3c96
a58b0a5e4984fd4e8f9359a928584ad28443a10126a0f65840d88c4953fe
5a0399e69ab37fe654d1f1b957a44a46fde3e9cffdf0cdaa0456ddce9f08
bc2a59895ffd70adce0e4aee8690645dcd4b7b77d401bd91e35aa115d203
58f1a801010204035867a20283814100814102814101045858880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f085827880c0113
a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e1502030f094b880c0013a116011602030f0a45840c00030f0b583a880c
0213a4035824820258200123456789abcdeffedcba987654321000112233
445566778899aabbccddeeff0e1a00012c22130116001602030f0c45840c
021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images" title="Example 5: Two Images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ([
        digest: bstr .cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'de7c7927a15bd2eda59cab1512875f17c9f1e9e23885ce1ac6d671eefcefa37a'
        ]),
        signature: bstr .cbor (18([
                / protected / bstr .cbor ({
                    / alg / 1:-7 / "ES256" /,
                }),
                / unprotected / {
                },
                / payload / F6 / nil /,
                / signature / h'8f5919c05ef786366ab4899db27a2e7412ef72
480372437757b1c1c9f8b2ed2a677a88db17fcfbb47d178c9e5620f14ac68a314ceabc
d20cbf54fbe89b8e83ad'
            ]))
        ]
    ]),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00'] ,
                [h'01']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]),
                    / image-size / 14:76834,
                }
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file1.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file2.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  304</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820de7c7927a15bd2eda59cab1512875f17c9f1e9
e23885ce1ac6d671eefcefa37a03590101a601010205035895a202828141
008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe
02501492af1425695e48bf429b2d51f2ab45035824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987
d0010f020f0c0114a2035824820258200123456789abcdeffedcba987654
321000112233445566778899aabbccddeeff0e1a00012c2209584f900c00
13a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e
62696e1502030f0c0113a115781c687474703a2f2f6578616d706c652e63
6f6d2f66696c65322e62696e1502030f0a49880c00030f0c01030f0c4584
0c001702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  380</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587382582482025820de7c7927a15bd2eda59cab1512875f17c9f1e9
e23885ce1ac6d671eefcefa37a584ad28443a10126a0f658408f5919c05e
f786366ab4899db27a2e7412ef72480372437757b1c1c9f8b2ed2a677a88
db17fcfbb47d178c9e5620f14ac68a314ceabcd20cbf54fbe89b8e83ad03
590101a601010205035895a202828141008141010458898c0c0014a40150
fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d
51f2ab450358248202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100e1987d0010f020f0c0114a20358248202
58200123456789abcdeffedcba987654321000112233445566778899aabb
ccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f6578
616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a115781c
687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e1502
030f0a49880c00030f0c01030f0c45840c001702
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal manifest processor
implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Garbage Collect</c>
      <c><xref target="suit-directive-garbage-collect"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>RECOMMENDED</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>RECOMMENDED</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>RECOMMENDED</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>RECOMMENDED</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>OPTIONAL</c>
      <c>Version Match</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>OPTIONAL</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>OPTIONAL</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIAF/1rGAAA+y963Yb2XUu+h9PUUcaIyJtABIl9Y2OM0JRVJpn69JbVLvj
dPfQKABFsiygCq4qkIIl5Vn2s+wnO/O+5qoLSLXbTnISj8QWUVXrOtdc8/rN
yWQyavJmmR0mR8lxWczzOkue5EVabZNXsz9l8yZ5na2rrM6KJm3yskj2jp+8
er0/maV1tkjOsipPl/lf+NGzslqlTXJeVklzmSVn5XlznVZZ8v16kTZZTQ9O
iyariqxJyvPkzWVeXNTJ3tn3p2/2kxdpkZ9ndTNKZ7MquzpMsCPtB94ILyzK
eZGuYMiLKj1vJnnWnE/qTd5MVvLG5ODRaA5dXpTV9jCpm8VolK+rw6SpNnXz
8MGDbx48HMHA0kOYwHxT5c12dF1W7y6qcrM+pM5G77It/LQ4tAFPnmJno1Hd
pMXibbosCxjANqtH6/xwlCTV+Txb1M12Kb8mSVPO3T/zYgFLqD/UZdVU2Xlt
f29X0Z9Nlc/t5Xm5WsG39jQvlnkRusneN5NlDpOGRmblEl6blL/5LTyBZVql
6zWssRvH22V2leFLj0ejdNNclhWMfgLP8D95AQ+eTJMXZZUW8huv9JMqKxZp
ET0pqwtYb957IJ9qlTzPV3mTLeR5tkrzpX06pU//Oa1WU5jQqNXpt9PkTT2/
LM+zIr+Iev42LQqgnc7TW/Z+SZ9PG/t8xwie5NW7y3L5l7j/rHjXfhL3/axK
NwW2XiVnQDlx9/D1dCZf/3OdN9Nze3u6yNqD+F/T5N+AvGZZFS/C/yqzov0k
HsRpAScx7vsdfDT9i3z0zzm+AL2PRgUd0/wqQ7p9/ez48cHDh/LPrw++0H8+
+ubrLw9HcHCKc//+6eTpNBy4tJpfwprPm03V89Q+LYvJqlxky+iVJsvWOxpI
56vJvKyv80X0+3xWVpMmvagnJT+BoX71zSMd9cE3XzzQuTz6Rn/96uHDr/XX
rx5/pQ2+28wvsyq93k7g9H79+KuvZ3mNz/549OL5Ia2lsMY7+EtylBf3GuBC
1bvNOnmeFheb9CK7Q+/ZSYL/IK87TB4+ePiAm0iriwzO8mXTrOvD+/e36Wo5
hb27D0+/PfnXuB9kNkv8udtsRCd3fsjf5etskad3btMn0MG1fkB941/3qbO3
0Bl8c/b65DgeCv6S7J3nyyzhXdz/e4wJe31Lvb6VXuHjk+fP4rGdvAe23aQz
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
IYnig9r4DAbnJm+nuupbbVOVN8zCbVTcujls24q2LSqj9urqXN8phX6o2Ras
KAPnK/UtsATkkbggzGikohpUBm1VrJcFWQzbdX4F1u6mpyxvDIHT3xI+LyFt
Am8k8fWPXzYEo3cOUzsUvXOu2hCuUiyGYrQ6UTysZo1kki1rU3t0mKmnOIuS
nckS4Cwwe43ILzVfiG+aZarl3LCxsCHWaiefGmoDpFHSa8EcC8dQwa8XHbgU
HyPRXsxvSL3rbfpGPsRrEBGVuubvdm/QV8/iYioQHpcA6znOHH8DC5+cuOfl
gpSP9rzRlhVttLKClsVvYtcE13duaLssrxbvArljefFar23HHDWlVoPvllcJ
UP5cegy/EG+bYG9pG/FWrg1NpfVlMGQncUNBSbfZsekxlFSO1cnFjJ4U2+0X
F0okNnJs8rIY8p5iAx33nSOW56WDRX68sI7xBT1YPUKs2t+x659f/jQRH0YM
3e+5AsIsuvPvT493gLreymtlHrV5291TzsF53kO6KS54suGrlKKdUCvMpixc
l15ev1E22smMPejjqcd5plFelJC/jLvgJ7HUfxC0xPRI4e4rqTQNc0qr5MaN
oLRSxgHxbDaUL8E4KZ4iqNGjsyz1kFkOgXeZjZSpCiCu4nV5qwo4lgIBslw3
0a/0j/ILu5TxsEbXq9aSapGcxrjrgK037H6wnZtG7sGJCLMyvHTkqx2BHTQt
2BUdvl2UWDgR0weW3W5sWYd6OQt5G6Ox1UzPspjmS2QEGK8nf8McGjVP/4ex
SFJ1aINjHJhS2d2j6ZXFPRkMlbK8wLDoKdXjA535QiWGnAKg/DafYuJC7Mkj
t/S3pWjn5pfo5uQ+PdRQlzIyUW8q6YJHSvJCKDgql/gLwXJ1251NUXakAm5c
DmEhEC5QZECkPMjkiZTbYUbRhGVqpJBFWe5dmyJdnirrRIlBiQ4N/1d024Q3
MMIExmeqTJ3uGd8oC5FjpYtb9TR4gkINlNWlfBs+WeoGoJB1gnDaIR1YARbr
LVJpOqp333LgzOa8iAq+vp9OribCgczk24SXbaHCBYyY5F5qrHYy59kHpsCv
F7cybA8fxZG6Kt088mzQ2/Ym98huFRmQ66Mz1I6qxkMNpG3KzG/kNMy5pHNH
jnlWWafl7NEUTuaoZgF6GUu6xwwBKfd0oOqmUSaSCGABeOGi3hAxcnonBcMi
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
f3z/ni+KuYn1NMzEatt9tRYjagEABLbFnRXWr4G5XjA3pWV9X9o3FG4/nbzm
AZDp7DUNqByiGEqOni3u1ZssRIZHnBtszuSCezDpIp2/IycP5NlkOq8B62eA
zTSHH74q0Se/tB+vqgr+egz4eT6v4U/fzC9no2fpakoeMBgJg7C+Xl3M7e/w
3mi2hL8epYt6Wc7sQ1zmbAa//ON/377BR4zP//FflA0GaAH7PVrgIg5WBaiD
375Jr5aLf/wX/Pzt4t1t/W4J+350uVj99//JJ//9v+rXE/hyMCsW78qf7Ger
d8VifsN+PJvAUgDPz/G/iwJQQDN+MymQS9zg307Qt7WCNod4QzOdTiw8s3YG
J4LwvWs/WmE1X8wP/cufKvjzKC+K6Xur8WyK3HNAi1R3q+kzVceFXc+LFNMi
p0gj2oQcsVd453/Bs1CkBav2MG/tKE2IXhip8nBAIX//+9/pk0WMWXiAX71I
Ly6Avr+0/xTtBuMHjY8Pm22h0S+Wbf9P7tZRt25f/g/m8d7NMxHteSy/7kAX
Rv7q0gypmMWML0ydDxotJQDJSUx9BFKxNf0gY2zkp1dnJdbrq7HJn1kjFvKD
HtxXz3gCFuNH5dVi3//t35pYPBHluznwB3gO+CwfWpiDsIkUQOXf7C/o/7WF
HH3/wv7R/tGy8A9fmnDx6nA6R/IzfEKQMLbd3Qp2j0ff/rwB1xz+j2LCTL1h
kHvvPPZ7P9U7rX7sEmSfxWHomGQjjWQZ9Brn8B8kNQs9rZf9dVpf9ugNvbOw
97609R9G9WUKOtCWHcJouw6gJ23XATSnLUcYbb0K0u627bL1SkgLNFIpIzDs
c/T0/ASOZs450IDG5yCLhrcG0M52sF3R3GrNDQ5AOru12pPQf9ZGa7d2Db9z
j07/lxYwawNLg2YPdNYs3f4gQYT2Y2Ca7ec9OwoGfz7NH5Nv11fU89muFwWP
GbqgzQwLvtaa5vP6BhhPs3E+n2HhE/K4oVo3EpfvDUajoiyvGOo0nrNjPeSY
7soFxDBfnPgkcYRBKJLZ94sOvkm2PQCOjgAhZWB2a3tSwQ17z17hf3ZBTQDm
YDWEY0vaOw8aXx+2WnN535K+stiL+Adm7O4Y2glX+IiXyYV2ODOtKc/M1v2n
h3CYLiCpQMado0er0XnJxcsgVaDbiH3jMklv83JWt1sJucrJSw6gawRC/hu6
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
kKhoVxpYwxvXePfVQs3Oe4nLdqM1vHGNG13jjT0ePQ7K7cyq4b0TrTrT0i4K
5LSkfOt10Nv6ie93tetH3egyV8fF6bTSY6BFq87+dBzf2qk2OLhNx3mtQ1vK
j35/tS4L+h3TuhDoeqAbE+ugVbmVu/zF4HJtMpbOHhkVBqP3BI6DZbbWtW/9
Sr46T/2qvTpO/Qq9Ok39arymUK2z/xoT6jH6GhPqsfSaEzKbd+J0r7PpBFtb
Z8gJ1rbOegP29ve//x2fcR7KegKYdY/nOqasro1HleKDXZRXLFcxveqkNLws
Q5xMHlytZjlLS8jTSzdzQuNtBqVlpRoGhvz4+K5YlOW5msukxHWpp62j6clJ
4SNmnot6JVO3q8mfHB2fU87Ta7BeFi4mTd2nB6H4oHU0Ojz56vSJ/ez56XcH
L07sb09+oF+ts9Ovvj64ODk4Ozz76vD256/Oz4IE/v7V0RH/883J14dfOTfp
zenhwV/+cnFw/Z8//PSfRy+/enwWOt8dHllHP/1wvvzrF07y01dXs9tvni2u
jx+/eLd3Ofnr08vnB0+ODg7OT6bzEyx18/PPyTeX372dlPGT+dWbn39+PH6+
fGM9+yKbLL//Pr8s3hwsXtTVt6+X9dEPJ29vvn2yXDz5+q+T5Omh/+SLm9nB
y2X97uq5558Fy28n37NlnTw57i6Kdv1F53Xt9SqbTnLKJtuqWqHKa9UK4Qbs
vTx8fHqkIe/R65uTmx++/nb+n6fvfnKODv7ywyn/8/HBX/JjQNfJ5Tfp4Vc/
B49//vnN+Q/f5T/MVu/SbxbRz5O9k8zK3u1dBYvvprPTv2Y33zrx17fXj7OD
q8Oz/OinLH333A3evLgo3lX1NzePHmdn4eti+e7p4/P59OLLL7X1t6ZFy2fZ
+VURjVokm+C5gLlgFnSM6QPny1LkXm9UihZl2YsSBP+CZwEl7XgGh64C+hPZ
kmWmZfbkXUMmyydqAKyXGGmQeiPLfpPUqUQang8ei/SrTQkYRLYFxhn00CFk
mzw0CLMz5KNnoMAYm1UyyRM2w5RPWrN2mNGv9vlt3YbVDjRijQiSxQOrtN80
GNqY+iy1FBK/Nha4zqD91Xb1/99o3G5or9u5m0C3lbVfbYe3dVT7ttXCPsqG
RmtlQ5sF5dxrNsEUL6KQjLPP8lqU9uF8vuS5LMQB0eo/aGRWwjfMGUGZEOgq
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
j3lVPYcJh74zd+fz9iFT3hiu6xrideVKumRkYn+/GdLXcbt/Lax7W2K9eaA+
h1PziFvfdwbeWQ4zXa1+29XxwwR+zGTgqo9+5jRV7myL+bNTdwx/Q4/nNreW
1hp/doVXBj5zk7tO6CYUyBvCn3CYT+TthhFTOWKKccNBa1Qc1OKj3klq6let
JY3hernn6RG1kTuO2Pq9lLmxxfotmooIts23iQGPQst3hasaIOcScnOdPcCt
TdB975OFmAdO9JFCzD/4QPRePEk/hrXOkbHJj2ENc2SY/Bh48bThrK47qtbm
CIP+o2ptOqvrjqq1nUHUPKrWprO67qhawzXc7lG1Np3VDztNa46qtemsrgNu
DTurDe90sG8/Fg+Lj0uRDtGuFvMraIPRPHCuz5fzBUjAP4zzmr8paEDmqjtr
QCj5dx0helOCWMhv/wqO7iAL8jgf505VpDHwqTwJgc8kReZGTuKOSy/z8yRK
w3HmpMAHgMirIijHVQJKQpp448+O7ka7pqO7GI9zkAl+VYap4ydJGQEr8uMK
hERQuJWbJWGcBlaQBiCGSr9M8grYsZMXaQpMOwJJUSaVM85yLw2TcRLC19hJ
4VenDNKyHEeJEwVhkRdBFmdWHBcgk7IicUs/TJFL6EGqbIv+uY7uQG/5kR3d
BtsGv3i9X9xP6xw3pSfH0N0dZ4Ob+LNX3TDg56j9f6mo/Wb5iT17vMXTbOOh
cdc4Av4o77nv9pJ9EI+5C7o6ecRhpd6+C/8RfHVvOK4ohycC+K19NXdC1h1m
xLUD1/3Q2XTxs/3W3YFb3olT/ia3CiYOOfj2oI+MHU7GTpeMWbdO3n5ENlH/
vYt3k+sOSn5D4t/yEdCdKO3Tp9TzxvFAh+YwE8Xqt1HQLVC56Zi7SOhRRhST
i8TnjzDoPx7926VQ3fF47ORArAMeZVjbhOu2nSLW3RUKp7Ra4bpjQh5O3N2c
M8IyOyE6ToIkyDguECR6xyJ0hDD/AbrBcswpB3/LyDuDTT1oGvQ7Y6y7MAbh
jLHQG+P6NA0Hp8JjitlMPkZaQT/yP5Ln8YMpt8/zqAxLa51lucmwtIZZlibD
kkLe1x+qdWfK2valk36mrG1fOulnytrypVPjTFl3ScQizpS16VCtO1PWpkO1
7kxZQzycfWfKcnpyK4b79oubOQv2/KPEr1qPVgssw3Q1X5Q79mRp15fzm1qV
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
zv8HQI/jny7SAgA=

-->

</rfc>

