<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-03" category="std">

  <front>
    <title abbrev="SUIT CBOR Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2020" month="February" day="07"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/>.</t>

<t>The SUIT manifest is heavily optimized for consumption by constrained devices. This means that it is not constructed as a conventional descriptive document. Instead, of describing what an update IS, it describes what a recipient should DO.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>The following terminology is used throughout this document.</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a device’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
</list></t>

<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>For information about firmware update in general and the background of the suit manifest, see <xref target="background"/>.
To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="manifest-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="manifest-structure"/>.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>.</t>

<section anchor="landscape" title="Landscape">

<t>The various constraints on IoT devices creates a broad set of use-case requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple processors may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>mesh networks may require multicast distribution.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="update-workflow-model" title="Update Workflow Model">

<t>There are several fundamental assumptions that inform the model of the firmware update workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the secure boot workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further 3 steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in bootloader, then the</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="suit-manifest-goals" title="SUIT Manifest Goals">

<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="numbers">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-summary" title="SUIT Manifest Design Summary">
<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies behaviors in a linearized form, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that only manifests authenticated by the appropriate identity have access to operate on a component.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Interpreter Behavior">

<t>This section describes the behavior of the manifest interpreter. This section focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid manifest, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version AND it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and MAY include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported component ID encountered.</t>
  <t>Payload not available (update interpreter).</t>
  <t>Dependency not available (update interpreter).</t>
  <t>Application crashed when executed (bootloader interpreter).</t>
  <t>Watchdog timeout occurred (bootloader interpreter).</t>
  <t>Dependency or Payload verification failed (bootloader interpreter).</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported <xref target="interpreter-parameters">parameters</xref>. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple devices MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="abstract-machine-description" title="Abstract Machine Description">

<t>The byte code that forms the bulk of the manifest is processed by an interpreter. This interpreter can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands. Certain commands also affect the machine’s behavior.</t>

<t>Every command that modifies system state targets a specific component. Components are units of code or data that can be targeted by an update. They are identified by Component identifiers, arrays of binary-strings–effectively a binary path. Each component has a corresponding set of configuration, Parameters. Parameters are used as the inputs to commands.</t>

<section anchor="interpreter-parameters" title="Parameters">

<t>Some parameters are REQUIRED to implement. These parameters allow a device to perform core functions.</t>

<t><list style="symbols">
  <t>Vendor ID.</t>
  <t>Class ID.</t>
  <t>Image Digest.</t>
</list></t>

<t>Some parameters are RECOMMENDED to implement. These parameters are needed for most use-cases.</t>

<t><list style="symbols">
  <t>Image Size.</t>
  <t>URI.</t>
</list></t>

<t>Other parameters are OPTIONAL to implement. These parameters allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Strict Order.</t>
  <t>Soft Failure.</t>
  <t>Device ID.</t>
  <t>Encryption Info.</t>
  <t>Unpack Info.</t>
  <t>Source Component.</t>
  <t>URI List.</t>
  <t>Custom Parameters.</t>
</list></t>

</section>
<section anchor="commands" title="Commands">

<t>Commands define the behavior of a device. The commands are divided into two groups: those that modify state (directives) and those that perform tests (conditions). There are also several Control Flow operations.</t>

<t>Some commands are REQUIRED to implement. These commands allow a device to perform core functions</t>

<t><list style="symbols">
  <t>Check Vendor Identifier (cvid).</t>
  <t>Check Class Identifier (ccid).</t>
  <t>Verify Image (cimg).</t>
  <t>Set Current Component (setc).</t>
  <t>Override Parameters (ovrp).</t>
</list></t>

<t>NOTE: on systems that support only a single component, Set Current Component has no effect.</t>

<t>Some commands are RECOMMENDED to implement. These commands are needed for most use-cases</t>

<t><list style="symbols">
  <t>Set Current Dependency (setd).</t>
  <t>Set Parameters (setp).</t>
  <t>Process Dependency (pdep).</t>
  <t>Run (run).</t>
  <t>Fetch (getc).</t>
</list></t>

<t>Other commands are OPTIONAL to implement. These commands allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Use Before (ubf).</t>
  <t>Check Component Offset  (cco).</t>
  <t>Check Device Identifier (cdid).</t>
  <t>Check Image Not Match (nimg).</t>
  <t>Check Minimum Battery (minb).</t>
  <t>Check Update Authorized (auth).</t>
  <t>Check Version (cver).</t>
  <t>Abort (abrt).</t>
  <t>Try Each (try).</t>
  <t>Copy (copy).</t>
  <t>Swap (swap).</t>
  <t>Wait For Event (wfe).</t>
  <t>Run Sequence (srun) mandatory component set.</t>
  <t>Run with Arguments (arun).</t>
</list></t>

</section>
<section anchor="command-behavior" title="Command Behavior">

<t>The following table describes the behavior of each command. “params”
represents the parameters for the current component or dependency.</t>

<texttable>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <c>cvid</c>
      <c>binary-match(component, params[vendor-id])</c>
      <c>ccid</c>
      <c>binary-match(component, params[class-id])</c>
      <c>cimg</c>
      <c>binary-match(digest(component), params[digest])</c>
      <c>setc</c>
      <c>component := components[arg]</c>
      <c>ovrp</c>
      <c>params[k] := v for k,v in arg</c>
      <c>setd</c>
      <c>dependency := dependencies[arg]</c>
      <c>setp</c>
      <c>params[k] := v if not k in params for k,v in arg</c>
      <c>pdep</c>
      <c>exec(dependency[common]); exec(dependency[current-segment])</c>
      <c>run</c>
      <c>run(component)</c>
      <c>getc</c>
      <c>store(component, fetch(params[uri]))</c>
      <c>ubf</c>
      <c>assert(now() &lt; arg)</c>
      <c>cco</c>
      <c>assert(offsetof(component) == arg)</c>
      <c>cdid</c>
      <c>binary-match(component, params[device-id])</c>
      <c>nimg</c>
      <c>not binary-match(digest(component), params[digest])</c>
      <c>minb</c>
      <c>assert(battery &gt;= arg)</c>
      <c>auth</c>
      <c>assert(isAuthorized())</c>
      <c>cver</c>
      <c>assert(version_check(component, arg))</c>
      <c>abrt</c>
      <c>assert(0)</c>
      <c>try</c>
      <c>break if exec(seq) is not error for seq in arg</c>
      <c>copy</c>
      <c>store(component, params[src-component])</c>
      <c>swap</c>
      <c>swap(component, params[src-component])</c>
      <c>wfe</c>
      <c>until event(arg), wait</c>
      <c>srun</c>
      <c>exec(arg)</c>
      <c>arun</c>
      <c>run(component, arg)</c>
</texttable>

</section>
</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

</section>
<section anchor="parallel-processing-interpreter" title="Parallel Processing Interpreter">

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence must declare a single target component. Set Component Index is not permitted inside this sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures is covered in <xref target="RFC8152"/> and the calculation of cryptographic values is beyond the scope of this document.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways, however several templates are provided here to cover common use-cases. Many of these templates can be aggregated to produce more complex behavior.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: Digest should always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</t>

<section anchor="manifest-source-material" title="Manifest Source Material">

<t>When a manifest is constructed from a descriptive document, the descriptive document SHOULD be included in the severable text section. This section MAY be pruned from the manifest prior to distribution to a device. The inclusion of text source material enables several use-cases on unconstrained intermediate systems, where small manifest size, low parser complexity, and pull parsing are not required.</t>

<t>An unconstrained system that makes decisions based on the manifest can use the source material instead so that it does not need to execute the manifest.</t>

<t>An unconstrained system that presents data to a user can do so according to typical usage patterns without first executing the manifest, and can trust that information with the same level of confidence as the manifest itself.</t>

<t>A verifier can be constructed to emulate execution the manifest and compare the results of that execution to the source material, providing a check that the manifest performs its stated objectives and that the manifest does not exceed the capabilities of the target device.</t>

</section>
<section anchor="required-template-compatibility-check" title="Required Template: Compatibility Check">

<t>The compatibility check ensures that devices only install compatible images.</t>

<t>Common:
Set Current Component
Check Vendor Identifier
Check Class Identifier</t>

<t>All manifests MUST contain the compatibility check template, except as outlined below.</t>

<t>If a device class has a unique trust anchor, and every element in its trust chain is unique–different from every element in any other device class, then it MAY include the compatibility check.</t>

<t>If a manifest includes a dependency that performs a compatibility check, then the dependent manifest MAY include the compatibility check.</t>

<t>The compatibility check template contains a data dependency: Vendor Identifier and Class Identifier MUST be set prior to executing the template. One example of the full template is included below, however Parameters may be set within a Try-Each block as well. They may also be inherited from a dependent manifest.</t>

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Vendor ID.</t>
          <t>Class ID.</t>
        </list></t>
      <t>Check Vendor Identifier.</t>
      <t>Check Class Identifier.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-xip-secure-boot" title="Use Case Template: XIP Secure Boot">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest.</t>
          <t>Size.</t>
        </list></t>
    </list></t>
  <t>Run:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Check Image Match.</t>
      <t>Directive Run.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-firmware-download" title="Use Case Template: Firmware Download">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest.</t>
          <t>Size.</t>
        </list></t>
    </list></t>
  <t>Install:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI.</t>
        </list></t>
      <t>Fetch.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-from-external-storage" title="Use Case Template: Load from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index.</t>
        </list></t>
      <t>Copy.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-decompress-from-external-storage" title="Use Case Template Load &amp; Decompress from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index.</t>
          <t>Compression Info.</t>
        </list></t>
      <t>Copy.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-dependency" title="Use Case Template: Dependency">

<t><list style="symbols">
  <t>Dependency Resolution:
  <list style="symbols">
      <t>Set Current Dependency.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI.</t>
        </list></t>
      <t>Fetch.</t>
      <t>Check Image Match.</t>
      <t>Process Dependency.</t>
    </list></t>
  <t>Validate:
  <list style="symbols">
      <t>Set Current Dependency.</t>
      <t>Check Image Match.</t>
      <t>Process Dependency.</t>
    </list></t>
</list></t>

<t>For any other section that the dependency has, the dependent MUST invoke Process Dependency.</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">

<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>Authentication delegation chain(s)</t>
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Information shared by all command sequences
          <list style="numbers">
              <t>List of dependencies</t>
              <t>List of payloads</t>
              <t>List of payloads in dependencies</t>
              <t>Common list of conditions, directives</t>
            </list></t>
          <t>Dependency resolution Reference or list of conditions, directives</t>
          <t>Payload fetch Reference or list of conditions, directives</t>
          <t>Installation Reference or list of conditions, directives</t>
          <t>Verification conditions/directives</t>
          <t>Load conditions/directives</t>
          <t>Run conditions/directives</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Dependency resolution conditions/directives</t>
      <t>Payload fetch conditions/directives</t>
      <t>Installation conditions/directives</t>
      <t>Text</t>
      <t>COSWID / Reference</t>
      <t>Intermediate Certificate(s) / CWTs</t>
      <t>Inline Payload(s)</t>
    </list></t>
</list></t>

<section anchor="severable-elements" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences</t>

</section>
<section anchor="outer-wrapper" title="Outer Wrapper">

<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the outer wrapper are contained in bstr objects. Wherever the manifest references an object in the outer wrapper, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the wrapper is below</t>

<figure><artwork><![CDATA[
SUIT_Outer_Wrapper = {
    suit-delegation               => bstr .cbor SUIT_Delegation
    suit-authentication-wrapper   => bstr .cbor
                                     SUIT_Authentication_Wrapper / nil,
    $SUIT_Manifest_Wrapped,
    ? suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => bstr .cbor SUIT_Text_Map,
    ? suit-coswid                 => bstr .cbor COSWID
}

SUIT_Delegation = [ + [ + CWT ] ]

SUIT_Authentication_Wrapper = [ + (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                  COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)
]]></artwork></figure>

<t>All elements of the outer wrapper must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. The Manifest is authenticated by these blocks in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come first in the SUIT_Outer_Wrapper, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Outer_Wrapper that begins with any element other than a suit-authentication-wrapper.</t>

<t>A manifest that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The outer wrapper MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest.</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the outer wrapper contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the Recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the Recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version
        => 1,
    suit-manifest-sequence-number
        => uint,
    suit-common
        => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution
        => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch
        => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install
        => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-validate
        => bstr .cbor SUIT_Command_Sequence,
    ? suit-load
        => bstr .cbor SUIT_Command_Sequence,
    ? suit-run
        => bstr .cbor SUIT_Command_Sequence,
    ? suit-text
        => Digest,
    ? suit-coswid
        => Digest / bstr .cbor concise-software-identity,
}

SUIT_Common = {
    ? suit-dependencies
        => bstr .cbor [ + SUIT_Dependency ],
    ? suit-components
        => bstr .cbor [ + SUIT_Component_Identifier ],
    ? suit-dependency-components
        => bstr .cbor [ + SUIT_Component_Reference ],
    ? suit-common-sequence
        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Outer_Wrapper so that a Recipient can easily identify the correct data in the outer wrapper.</t>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behavior of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>boolean</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>2</c>
      <c>boolean</c>
      <c>Command Segment</c>
      <c>Soft Failure</c>
      <c>Condition failures only terminate the current command segment.</c>
      <c>3</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>4</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>5</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>6</c>
      <c>tstr</c>
      <c>Component/Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>7</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>8</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>The information required to decompress the image</c>
      <c>9</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>The information required to unpack the image</c>
      <c>10</c>
      <c>uint</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>11</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>12</c>
      <c>uint</c>
      <c>Component/Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>24</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>URI List</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>25</c>
      <c>boolean</c>
      <c>Component/Dependency</c>
      <c>URI List Append</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>nint</c>
      <c>int/bstr</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Conditions and Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametersoftfailure" title="SUIT_Parameter_Soft_Failure">

<t>When executing a command sequence inside SUIT_Directive_Try_Each and a condition failure occurs, the manifest processor aborts the sequence. If Soft Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Soft_Failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component
    => uint)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list
    => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom
    => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf
]]></artwork></figure>

</section>
</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition and directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block</t>
</list></t>

<t>Argument blocks are defined for each type of command.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behavior.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Argument Type</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>nil</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>nil</c>
      <c>3</c>
      <c>Image Match</c>
      <c>nil</c>
      <c>4</c>
      <c>Use Before</c>
      <c>Unsigned Integer timestamp</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>Unsigned Integer</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>nil</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>nil</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>Unsigned Integer</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c>Integer</c>
      <c>28</c>
      <c>Version</c>
      <c>List of Integers</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>bstr</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a Recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Components list. If no digest is specified and the component is not present in the Components list, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. One argument is required, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]

SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to the system that evaluates the condition matching that integer.
SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorized, int)
SUIT_Condition //= (suit-condition-version,
    SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]

SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>31</c>
      <c>Run with Arguments</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Soft_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Soft_Failure is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimization: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorization = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day
                                            ; (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorization = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day
                                            ; (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
<section anchor="suittextmap" title="SUIT_Text_Map">
<t>The SUIT_Text_Map contains all text descriptions needed for this manifest. The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Summary</ttcol>
      <c>1</c>
      <c>manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>2</c>
      <c>update-description</c>
      <c>Free text description of the update</c>
      <c>3</c>
      <c>vendor-name</c>
      <c>Free text vendor name</c>
      <c>4</c>
      <c>model-name</c>
      <c>Free text model name</c>
      <c>5</c>
      <c>vendor-domain</c>
      <c>The domain used to create the <xref target="creating-uuids">vendor-id</xref></c>
      <c>6</c>
      <c>model-info</c>
      <c>The information used to create the <xref target="creating-uuids">class-id</xref></c>
      <c>7</c>
      <c>component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>8</c>
      <c>json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>9</c>
      <c>yaml-source</c>
      <c>The yaml-formatted document that was used to create the manifest</c>
      <c>10</c>
      <c>version-dependencies</c>
      <c>List of component versions required by the manifest</c>
</texttable>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating Conditional Sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Outer_Wrapper = {
    suit-delegation            => bstr .cbor SUIT_Delegation
    suit-authentication-wrapper
        => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
    suit-payload-fetch         => bstr .cbor SUIT_Command_Sequence,
    suit-install               => bstr .cbor SUIT_Command_Sequence,
    suit-text                  => bstr .cbor SUIT_Text_Map,
    suit-coswid                => bstr .cbor concise-software-identity
}

SUIT_Authentication_Wrapper = [ + (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)
]

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    ? suit-common                 => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution
        => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch
        => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install
        => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence,
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence,
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => SUIT_Digest,
    ? suit-coswid
        => SUIT_Digest / bstr .cbor concise-software-identity,
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components
        => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}


SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (nint, bstr)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorized, int)
SUIT_Condition //= (suit-condition-version,
    SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-swap,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,
    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorization = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day
                                            ; (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list
    => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}

suit-authentication-wrapper = 1
suit-manifest = 2

suit-manifest-encryption-info = 3
suit-manifest-encrypted       = 4

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5
suit-condition-custom = 6

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-run-with-arguments       = 31
suit-directive-swap                     = 32

suit-wait-event-argument-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7
suit-wait-event-authorization = 8

suit-parameter-strict-order = 1
suit-parameter-soft-failure = 2
suit-parameter-vendor-id = 3
suit-parameter-class-id = 4
suit-parameter-device-id = 5
suit-parameter-uri = 6
suit-parameter-encryption-info = 7
suit-parameter-compression-info = 8
suit-parameter-unpack-info = 9
suit-parameter-source-component = 10
suit-parameter-image-digest = 11
suit-parameter-image-size = 12

suit-parameter-uri-list = 24
suit-parameter-uri-list-append = 25
suit-parameter-prioritized-parameters = 26

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-vendor-name           = 3
suit-text-model-name            = 4
suit-text-vendor-domain         = 5
suit-text-model-info            = 6
suit-text-component-description = 7
suit-text-manifest-json-source  = 8
suit-text-manifest-yaml-source  = 9
suit-text-version-dependencies  = 10
]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>Secure boot and compatibility check.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a058248202582073054c8
cc42e3e76c974ad0bed685d88b0b99df40fbaf72f58cd0b97dcd03285584057bc22b81
43137abb3e8dc180a74348b58905d36ac16c199443cd1d09214a68bd4acdbbde78a521
7768faa00627a0a92da30f36bd2187f77ba14b16b0637c618' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582073054c8cc42e3e76c974ad0bed685d88
b0b99df40fbaf72f58cd0b97dcd03285' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'73054c8cc42e3e76c974ad0bed685d88b0b99df40fbaf72f58cd0b97dcd03285'
                ] /,
                / signature / h'57bc22b8143137abb3e8dc180a74348b58905d
36ac16c199443cd1d09214a68bd4acdbbde78a5217768faa00627a0a92da30f36bd218
7f77ba14b16b0637c618'
            ])
    ] /,
    / manifest / 3:h'a50101020103585aa2024481814100045850860150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
c1987d00a438203f60c438217f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:h'a2024481814100045850860150fa6b4a53d5ad5fdfbe9de
663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b82025820001122334
45566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0' / {
            / components / 2:h'81814100' / [
                [h'00']
            ] /,
            / common-sequence / 4:h'860150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab4514a20b820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0' / [
                / condition-vendor-identifier /
1,h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe / ,
                / condition-class-identifier /
2,h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 / ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 12:34768,
                }
            ] /,
        } /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'8217f6' / [
            / directive-run / 23,None
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  112</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a103586ca50101020103585aa2024481814100045850860150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514
a20b8202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100c1987d00a438203f60c438217f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  227</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a058248202582073054c8cc42e3e76c974ad0b
ed685d88b0b99df40fbaf72f58cd0b97dcd03285584057bc22b8143137ab
b3e8dc180a74348b58905d36ac16c199443cd1d09214a68bd4acdbbde78a
5217768faa00627a0a92da30f36bd2187f77ba14b16b0637c61803586ca5
0101020103585aa2024481814100045850860150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b820258
2000112233445566778899aabbccddeeff0123456789abcdeffedcba9876
5432100c1987d00a438203f60c438217f6
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>Simultaneous download and installation of payload.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a0582482025820be9d3da
5d45b780bcaeb84a909b54913302a358d9d7dc6b94c7fbb1f56dbf5f95840d89fb4194
4231adb3920bdae14a4965699771b50e062c28ffef93400a9b63150902bc65929e8066
e1a0eb45be50ee96db0435e5c141ae8fb94cbf2b37205ba6b' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820be9d3da5d45b780bcaeb84a909b54913
302a358d9d7dc6b94c7fbb1f56dbf5f9' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'be9d3da5d45b780bcaeb84a909b54913302a358d9d7dc6b94c7fbb1f56dbf5f9'
                ] /,
                / signature / h'd89fb41944231adb3920bdae14a4965699771b
50e062c28ffef93400a9b63150902bc65929e8066e1a0eb45be50ee96db0435e5c141a
e8fb94cbf2b37205ba6b'
            ])
    ] /,
    / manifest / 3:h'a40101020203585aa2024481814100045850860150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
c1987d00958258613a106781b687474703a2f2f6578616d706c652e636f6d2f66696c6
52e62696e15f603f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:h'a2024481814100045850860150fa6b4a53d5ad5fdfbe9de
663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b82025820001122334
45566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0' / {
            / components / 2:h'81814100' / [
                [h'00']
            ] /,
            / common-sequence / 4:h'860150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab4514a20b820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0' / [
                / condition-vendor-identifier /
1,h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe / ,
                / condition-class-identifier /
2,h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 / ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 12:34768,
                }
            ] /,
        } /,
        / install / 9:h'8613a106781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6' / [
            / directive-set-parameters / 19,{
                / uri / 6:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  142</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a103588aa40101020203585aa2024481814100045850860150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514
a20b8202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100c1987d00958258613a106781b687474703a2f2f6578
616d706c652e636f6d2f66696c652e62696e15f603f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  257</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a0582482025820be9d3da5d45b780bcaeb84a9
09b54913302a358d9d7dc6b94c7fbb1f56dbf5f95840d89fb41944231adb
3920bdae14a4965699771b50e062c28ffef93400a9b63150902bc65929e8
066e1a0eb45be50ee96db0435e5c141ae8fb94cbf2b37205ba6b03588aa4
0101020203585aa2024481814100045850860150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b820258
2000112233445566778899aabbccddeeff0123456789abcdeffedcba9876
5432100c1987d00958258613a106781b687474703a2f2f6578616d706c65
2e636f6d2f66696c652e62696e15f603f6
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-and-secure-boot" title="Example 2: Simultaneous Download, Installation, and Secure Boot">

<t>Compatibility test, simultaneous download and installation, and secure boot.
~~~
{
    / authentication-wrapper / 2:h’81d28443a10126a058248202582070cf2a4
fed640658ada6ff33b59af192ca22b4142e9ae9d8d9b05f2b5a118cf35840f6c95681e
f4298dc1288e11004a4b72be80a374be13efccf5ec94fa1ad2ca7d5510d5ff43ceac60
e7dd32d3614bd0350768f985eff8ba9933625d206286cf983’ / [
        18([
                / protected / h’a10126’ / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h’8202582070cf2a4fed640658ada6ff33b59af192
ca22b4142e9ae9d8d9b05f2b5a118cf3’ / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h’70cf2a4fed640658ada6ff33b59af192ca22b4142e9ae9d8d9b05f2b5a118cf3’
                ] /,
                / signature / h’f6c95681ef4298dc1288e11004a4b72be80a37
4be13efccf5ec94fa1ad2ca7d5510d5ff43ceac60e7dd32d3614bd0350768f985eff8b
a9933625d206286cf983’
            ])
    ] /,
    / manifest / 3:h’a60101020303585aa2024481814100045850860150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
c1987d00958258613a106781b687474703a2f2f6578616d706c652e636f6d2f66696c6
52e62696e15f603f60a438203f60c438217f6’ / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h’a2024481814100045850860150fa6b4a53d5ad5fdfbe9de
663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b82025820001122334
45566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0’ / {
            / components / 2:h’81814100’ / [
                [h’00’]
            ] /,
            / common-sequence / 4:h’860150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab4514a20b820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0’ / [
                / condition-vendor-identifier /
1,h’fa6b4a53d5ad5fdfbe9de663e4d41ffe’ / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe / ,
                / condition-class-identifier /
2,h’1492af1425695e48bf429b2d51f2ab45’ /
1492af14-2569-5e48-bf42-9b2d51f2ab45 / ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h’00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210’
                    ],
                    / image-size / 12:34768,
                }
            ] /,
        } /,
        / install / 9:h’8613a106781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6’ / [
            / directive-set-parameters / 19,{
                / uri / 6:’http://example.com/file.bin’,
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h’8203f6’ / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h’8217f6’ / [
            / directive-run / 23,None
        ] /,
    } /,
}
~~~</t>

<t>Total size of manifest without COSE authentication object:  152</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035894a60101020303585aa2024481814100045850860150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514
a20b8202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100c1987d00958258613a106781b687474703a2f2f6578
616d706c652e636f6d2f66696c652e62696e15f603f60a438203f60c4382
17f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  267</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a058248202582070cf2a4fed640658ada6ff33
b59af192ca22b4142e9ae9d8d9b05f2b5a118cf35840f6c95681ef4298dc
1288e11004a4b72be80a374be13efccf5ec94fa1ad2ca7d5510d5ff43cea
c60e7dd32d3614bd0350768f985eff8ba9933625d206286cf983035894a6
0101020303585aa2024481814100045850860150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b820258
2000112233445566778899aabbccddeeff0123456789abcdeffedcba9876
5432100c1987d00958258613a106781b687474703a2f2f6578616d706c65
2e636f6d2f66696c652e62696e15f603f60a438203f60c438217f6
]]></artwork></figure>

</section>
<section anchor="example-3-load-from-external-storage" title="Example 3: Load from External Storage">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a0582482025820bb008f5
7fd1babff8cc432d18c4c9cfc69d7e8ab76b07cc910c6d03ec598baab58409e98c58fc
d82668443a0249fa5eab10474a099572dfb31c0d2adf750f57c4987d484badf8524a20
a9e92c4599698eb696254d4c0f77947c8af353b544600ea11' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820bb008f57fd1babff8cc432d18c4c9cfc
69d7e8ab76b07cc910c6d03ec598baab' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'bb008f57fd1babff8cc432d18c4c9cfc69d7e8ab76b07cc910c6d03ec598baab'
                ] /,
                / signature / h'9e98c58fcd82668443a0249fa5eab10474a099
572dfb31c0d2adf750f57c4987d484badf8524a20a9e92c4599698eb696254d4c0f779
47c8af353b544600ea11'
            ])
    ] /,
    / manifest / 3:h'a70101020403585fa2024782814100814101045852880c000
150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4
514a20b8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9
8765432100c1987d0095827880c0013a106781b687474703a2f2f6578616d706c652e6
36f6d2f66696c652e62696e15f603f60a45840c0003f60b5834880c0114a30a000b820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
c1987d016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:h'a2024782814100814101045852880c000150fa6b4a53d5a
d5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b8202582
000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c198
7d0' / {
            / components / 2:h'82814100814101' / [
                [h'00'] ,
                [h'01']
            ] /,
            / common-sequence / 4:h'880c000150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b82025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0' / [
                / directive-set-component-index / 12,0 ,
                / condition-vendor-identifier /
1,h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe / ,
                / condition-class-identifier /
2,h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 / ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 12:34768,
                }
            ] /,
        } /,
        / install / 9:h'880c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 6:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0114a30a000b8202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100c1987d016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-override-parameters / 20,{
                / image-digest / 11:[
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                ],
                / image-size / 12:34768,
                / source-component / 10:0 / [h'00'] /,
            } ,
            / directive-copy / 22,None ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,None
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  218</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358d6a70101020403585fa2024782814100814101045852880c000150
fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d
51f2ab4514a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d0095827880c0013a106781b6874
74703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a
45840c0003f60b5834880c0114a30a000b82025820001122334455667788
99aabbccddeeff0123456789abcdeffedcba98765432100c1987d016f603
f60c45840c0117f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  333</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a0582482025820bb008f57fd1babff8cc432d1
8c4c9cfc69d7e8ab76b07cc910c6d03ec598baab58409e98c58fcd826684
43a0249fa5eab10474a099572dfb31c0d2adf750f57c4987d484badf8524
a20a9e92c4599698eb696254d4c0f77947c8af353b544600ea110358d6a7
0101020403585fa2024782814100814101045852880c000150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514
a20b8202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100c1987d0095827880c0013a106781b687474703a2f2f
6578616d706c652e636f6d2f66696c652e62696e15f603f60a45840c0003
f60b5834880c0114a30a000b8202582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100c1987d016f603f60c45840c
0117f6
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a0582482025820b973e24
24d03de20c59cb702607a83796dd465674115ae84b3c2c472794dbb8c5840be0ae3d36
0e46dd07f02547ff19e4a1557b7bfce401718ade8200918f191a50dca84148704f76d9
7a8c239615114eab0617e9fc9d4faeac1572e7cae61e660c1' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820b973e2424d03de20c59cb702607a8379
6dd465674115ae84b3c2c472794dbb8c' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'b973e2424d03de20c59cb702607a83796dd465674115ae84b3c2c472794dbb8c'
                ] /,
                / signature / h'be0ae3d360e46dd07f02547ff19e4a1557b7bf
ce401718ade8200918f191a50dca84148704f76d97a8c239615114eab0617e9fc9d4fa
eac1572e7cae61e660c1'
            ])
    ] /,
    / manifest / 3:h'a70101020503585fa2024782814100814101045852880c000
150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4
514a20b8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9
8765432100c1987d0095827880c0013a106781b687474703a2f2f6578616d706c652e6
36f6d2f66696c652e62696e15f603f60a45840c0003f60b5836880c0114a408010a000
b8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100c1987d016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814100814101045852880c000150fa6b4a53d5a
d5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b8202582
000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c198
7d0' / {
            / components / 2:h'82814100814101' / [
                [h'00'] ,
                [h'01']
            ] /,
            / common-sequence / 4:h'880c000150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b82025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0' / [
                / directive-set-component-index / 12,0 ,
                / condition-vendor-identifier /
1,h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe / ,
                / condition-class-identifier /
2,h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 / ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 12:34768,
                }
            ] /,
        } /,
        / install / 9:h'880c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 6:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0114a408010a000b8202582000112233445566778899
aabbccddeeff0123456789abcdeffedcba98765432100c1987d016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-override-parameters / 20,{
                / image-digest / 11:[
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                ],
                / image-size / 12:34768,
                / source-component / 10:0 / [h'00'] /,
                / compression-info / 8:1 / gzip /,
            } ,
            / directive-copy / 22,None ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,None
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  220</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358d8a70101020503585fa2024782814100814101045852880c000150
fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d
51f2ab4514a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d0095827880c0013a106781b6874
74703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a
45840c0003f60b5836880c0114a408010a000b8202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d016
f603f60c45840c0117f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  335</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a0582482025820b973e2424d03de20c59cb702
607a83796dd465674115ae84b3c2c472794dbb8c5840be0ae3d360e46dd0
7f02547ff19e4a1557b7bfce401718ade8200918f191a50dca84148704f7
6d97a8c239615114eab0617e9fc9d4faeac1572e7cae61e660c10358d8a7
0101020503585fa2024782814100814101045852880c000150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514
a20b8202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100c1987d0095827880c0013a106781b687474703a2f2f
6578616d706c652e636f6d2f66696c652e62696e15f603f60a45840c0003
f60b5836880c0114a408010a000b8202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100c1987d016f603f60c45
840c0117f6
]]></artwork></figure>

</section>
<section anchor="example-5-compatibility-test-download-installation-and-secure-boot" title="Example 5: Compatibility Test, Download, Installation, and Secure Boot">

<t>Compatibility test, download, installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a05824820258207f35fdc
e6a55bed88d04497d38b7c2b4ffd1ddb74a83d9acd252d2077637de7058407bec97551
827d684ac07b77c3f663f4f9436aff0b79fdfd89061bfe9bddb73919c88d32dc52fd9e
b1d1ea34172eef5c222e7d897778c6b0254e20c7e87942ae1' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'820258207f35fdce6a55bed88d04497d38b7c2b4
ffd1ddb74a83d9acd252d2077637de70' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'7f35fdce6a55bed88d04497d38b7c2b4ffd1ddb74a83d9acd252d2077637de70'
                ] /,
                / signature / h'7bec97551827d684ac07b77c3f663f4f9436af
f0b79fdfd89061bfe9bddb73919c88d32dc52fd9eb1d1ea34172eef5c222e7d897778c
6b0254e20c7e87942ae1'
            ])
    ] /,
    / manifest / 3:h'a70101020503585fa2024782814100814101045852880c000
150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4
514a20b8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9
8765432100c1987d008584c880c0113a206781b687474703a2f2f6578616d706c652e6
36f6d2f66696c652e62696e0b8202582000112233445566778899aabbccddeeff01234
56789abcdeffedcba987654321015f603f6094d8a0c0013a10a0116f60c0103f60a458
40c0003f60c45840c0017f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814100814101045852880c000150fa6b4a53d5a
d5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b8202582
000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c198
7d0' / {
            / components / 2:h'82814100814101' / [
                [h'00'] ,
                [h'01']
            ] /,
            / common-sequence / 4:h'880c000150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b82025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d0' / [
                / directive-set-component-index / 12,0 ,
                / condition-vendor-identifier /
1,h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe / ,
                / condition-class-identifier /
2,h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 / ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 12:34768,
                }
            ] /,
        } /,
        / payload-fetch / 8:h'880c0113a206781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e0b8202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba987654321015f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / image-digest / 11:[
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                ],
                / uri / 6:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / install / 9:h'8a0c0013a10a0116f60c0103f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 10:1 / [h'01'] /,
            } ,
            / directive-copy / 22,None ,
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0017f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,None
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  215</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358d3a70101020503585fa2024782814100814101045852880c000150
fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d
51f2ab4514a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d008584c880c0113a206781b6874
74703a2f2f6578616d706c652e636f6d2f66696c652e62696e0b82025820
00112233445566778899aabbccddeeff0123456789abcdeffedcba987654
321015f603f6094d8a0c0013a10a0116f60c0103f60a45840c0003f60c45
840c0017f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  330</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a05824820258207f35fdce6a55bed88d04497d
38b7c2b4ffd1ddb74a83d9acd252d2077637de7058407bec97551827d684
ac07b77c3f663f4f9436aff0b79fdfd89061bfe9bddb73919c88d32dc52f
d9eb1d1ea34172eef5c222e7d897778c6b0254e20c7e87942ae10358d3a7
0101020503585fa2024782814100814101045852880c000150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514
a20b8202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100c1987d008584c880c0113a206781b687474703a2f2f
6578616d706c652e636f6d2f66696c652e62696e0b820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba987654321015f603
f6094d8a0c0013a10a0116f60c0103f60a45840c0003f60c45840c0017f6
]]></artwork></figure>

</section>
<section anchor="example-6-two-images" title="Example 6: Two Images">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a058248202582007954f5
19cdd8101156768fbe12f23eb5ca73481e91ca4801bf94dc82f52b0ea5840a76e7f712
b8d3ed6bcf79eaef8f15ee76f8da15aa16b220431f528d5cc237f95688748a156c8ee8
47c517b0c660328a7877be52b1902f50e7acecc4bbd6c439f' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582007954f519cdd8101156768fbe12f23eb
5ca73481e91ca4801bf94dc82f52b0ea' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'07954f519cdd8101156768fbe12f23eb5ca73481e91ca4801bf94dc82f52b0ea'
                ] /,
                / signature / h'a76e7f712b8d3ed6bcf79eaef8f15ee76f8da1
5aa16b220431f528d5cc237f95688748a156c8ee847c517b0c660328a7877be52b1902
f50e7acecc4bbd6c439f'
            ])
    ] /,
    / manifest / 3:h'a60101020303588ea20247828141008141010458818c0c000
150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4
514a20b8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9
8765432100c1987d00c0114a20b820258200123456789abcdeffedcba9876543210001
12233445566778899aabbccddeeff0c1a00012c2209584f900c0013a106781c6874747
03a2f2f6578616d706c652e636f6d2f66696c65312e62696e15f603f60c0113a106781
c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e15f603f60a498
80c0003f60c0103f60c45840c0017f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a20247828141008141010458818c0c000150fa6b4a53d5a
d5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b8202582
000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c198
7d00c0114a20b820258200123456789abcdeffedcba987654321000112233445566778
899aabbccddeeff0c1a00012c22' / {
            / components / 2:h'82814100814101' / [
                [h'00'] ,
                [h'01']
            ] /,
            / common-sequence / 4:h'8c0c000150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4514a20b82025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0114a20b
820258200123456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0c1a00012c22' / [
                / directive-set-component-index / 12,0 ,
                / condition-vendor-identifier /
1,h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe / ,
                / condition-class-identifier /
2,h'1492af1425695e48bf429b2d51f2ab45' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 / ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 12:34768,
                } ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 11:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ],
                    / image-size / 12:76834,
                }
            ] /,
        } /,
        / install / 9:h'900c0013a106781c687474703a2f2f6578616d706c652e
636f6d2f66696c65312e62696e15f603f60c0113a106781c687474703a2f2f6578616d
706c652e636f6d2f66696c65322e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 6:'http://example.com/file1.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil / ,
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 6:'http://example.com/file2.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'880c0003f60c0103f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil / ,
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0017f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,None
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  254</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358faa60101020303588ea20247828141008141010458818c0c000150
fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d
51f2ab4514a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d00c0114a20b8202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0c1a
00012c2209584f900c0013a106781c687474703a2f2f6578616d706c652e
636f6d2f66696c65312e62696e15f603f60c0113a106781c687474703a2f
2f6578616d706c652e636f6d2f66696c65322e62696e15f603f60a49880c
0003f60c0103f60c45840c0017f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  369</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a058248202582007954f519cdd8101156768fb
e12f23eb5ca73481e91ca4801bf94dc82f52b0ea5840a76e7f712b8d3ed6
bcf79eaef8f15ee76f8da15aa16b220431f528d5cc237f95688748a156c8
ee847c517b0c660328a7877be52b1902f50e7acecc4bbd6c439f0358faa6
0101020303588ea20247828141008141010458818c0c000150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4514
a20b8202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100c1987d00c0114a20b820258200123456789abcdeffe
dcba987654321000112233445566778899aabbccddeeff0c1a00012c2209
584f900c0013a106781c687474703a2f2f6578616d706c652e636f6d2f66
696c65312e62696e15f603f60c0113a106781c687474703a2f2f6578616d
706c652e636f6d2f66696c65322e62696e15f603f60a49880c0003f60c01
03f60c45840c0017f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Commands.</t>
  <t>standard Parameters.</t>
  <t>standard Algorithm identifiers.</t>
  <t>standard text values.</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="I-D.ietf-suit-architecture"/> and in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='November' day='19' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-08.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='January' day='20' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-05.txt' />
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
RuBbGLdDie6TSq1WW06+CeVXFcuJGatbGaxk8DBcPXxcGbRkpnA+HlbWWrZL
WB+PNqgTq8IFfDyurclRzporXxtnmG0aP/Vxr/wxuYjWCTl0bDYo7Oo+Hni/
L30dpfUf49dDFL8eP6m0WQSr5iyZF2YPTZuRtNmp8jNNxjuKmzj9T/YpvaD2
qF2ftLwWkN1O+WNK17rh48p+bnCOoI979SkIN3xdWaFTBM39uFdZYVWHZj6u
rJDyltZPo6colq3hki7Lqi5Fm6oKLUWQ6tRWig7tUE4ZWlRRKin6U68uIiq0
RdNjrrrNSjxfnfJNcr1a+ibpXQGgVkZXEKiTxNWia+VttfCSVK3Wu1F2tm/3
TSKwueprBVlz8W+TSTUrUC96WsxBvSyJBLNmiSQzWhdG9WUTGbFlZN0T5hsR
75DoO2wv3hIVqNTez7XimX3/1wlf+u6vMOqmbQ0zrpshw2TYOzv3hmlP39Sk
OPEtpoC+sTOZOMfdHstkMXG+6Vf7kbQl5ptBpR9CGqefofVNfbIRjabu2u0s
IgZN3W/stCAGV2XONdk9GFcldMI/47jQvBztKPGiuR3UiPGRCyo9uJ4iP6Rq
Wkih2WAuQeF2BGLL/4ajvxsYjb5KCi4Z1+BEBjrgsibWEQNPVfm6RZoXJl2r
zukhMZp6rhS3zjWm17kKjzdrOjt9ckG5LVbdwTDrYHIMScnYxH8en319/tx/
+er8zyevz/w/nf2VnnrPzr/+5uTy7OTZ42dfP7798euLZ/0J/P769FT+vjn7
5vHX7Zvg5vzxyX/91+XJ6r//+vf/Pv3266fPBu0/Pz71Tv/+14viL79rT/7+
9WJ5+8eX2erJ09c/HV0lf3lx9erk+enJycXZPD3Du+bHHyd/vPrzuyQePU8X
1z/++HT8qrj2Xv5umhTffRdeRdcn2et89qe3RX7617N3N396XmTPv/lLMnnx
uPf8dzfLk2+L/KfFq27vWb/4U/IdL+vs+ZPqomj7X1cCW1br6TwJKWuIlXLF
TYKcG4DXQO/bx0/PTy3gffX25uzmr9/8Kf3v85/+3j49+a+/nsvfT07+K3wC
4Dq7+mPw+Osf+09//PH64q9/Dv+6XP8U/DEb/pgcnU296U9Hi3725/ny/C/T
mz+1R9/crp5OTxaPn4Wnf58GP73q9K9fX0Y/zfI/3nz1dPps8DYqfnrx9CKd
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

-->

</rfc>

