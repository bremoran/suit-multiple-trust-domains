<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-02" category="std">

  <front>
    <title abbrev="SUIT CBOR Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="November" day="04"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/>.</t>

<t>The SUIT manifest is heavily optimised for consumption by constrained devices. This means that it is not constructed as a conventional descriptive document. Instead, of describing what an update IS, it describes what a recipient should DO.</t>

<t>While the SUIT manifest is informed by and optimised for firmware update use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a device’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
</list></t>

<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

</section>
<section anchor="how-to-use-this-document" title="How to use this document">

<t>For information about firmware update in general and the background of the suit manifest, see <xref target="background"/>.
To implement an updatable device, see <xref target="interpreter-behaviour"/> and <xref target="manifest-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="manifest-structure"/>.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>.</t>

<section anchor="landscape" title="Landscape">

<t>The various constraints on IoT devices creates a broad set of use-case requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple processors may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>mesh networks may require multicast distribution.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="update-workflow-model" title="Update Workflow Model">

<t>There are several fundamental assumptions that inform the model of the firmware update workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependency manifests should be present before any payload is fetched</t>
  <t>In some applications, payloads must be fetched and validated prior to installation</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the secure boot workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependencies and payloads must be validated prior to loading</t>
  <t>All loaded images must be validated prior to execution</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest</t>
  <t>Resolve dependencies</t>
  <t>Fetch payload(s)</t>
  <t>Install payload(s)</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further 3 steps:</t>

<t><list style="numbers">
  <t>Verify image(s)</t>
  <t>Load image(s)</t>
  <t>Run image(s)</t>
</list></t>

<t>If verification and running is implemented in bootloader, then the</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="suit-manifest-goals" title="SUIT Manifest goals">

<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="numbers">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-summary" title="SUIT manifest design summary">
<t>In order to provide flexible behaviour to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behaviour of a Recipient device. Behaviour is encoded as a specialised byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialised byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies behaviours in a linearised form, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behaviour by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that only manifests authenticated by the appropriate identity have access to operate on a component.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

</section>
</section>
<section anchor="interpreter-behaviour" title="Interpreter Behaviour">

<t>This section describes the behaviour of the manifest interpreter. This section focuses primarily on interpreting commands in the manifest. However, there are several other important behaviours of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid manifest, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version AND it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and MAY include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID)</t>
  <t>Unsupported command encountered</t>
  <t>Unsupported parameter encountered</t>
  <t>Unsupported component ID encountered</t>
  <t>Payload not available (update interpreter)</t>
  <t>Dependency not available (update interpreter)</t>
  <t>Application crashed when executed (bootloader interpreter)</t>
  <t>Watchdog timeout occurred (bootloader interpreter)</t>
  <t>Dependency or Payload verification failed (bootloader interpreter)</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported <xref target="interpreter-parameters">parameters</xref>. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter fundamental properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple devices MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="abstract-machine-description" title="Abstract Machine Description">

<t>The byte code that forms the bulk of the manifest is processed by an interpreter. This interpreter can be modelled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands. Certain commands also affect the machine’s behaviour.</t>

<t>Every command that modifies system state targets a specific component. Components are units of code or data that can be targeted by an update. They are identified by Component identifiers, arrays of binary-strings–effectively a binary path. Each component has a corresponding set of configuration, Parameters. Parameters are used as the inputs to commands.</t>

<section anchor="interpreter-parameters" title="Parameters">

<t>Some parameters are REQUIRED to implement. These parameters allow a device to perform core functions.</t>

<t><list style="symbols">
  <t>Vendor ID</t>
  <t>Class ID</t>
  <t>Image Digest</t>
</list></t>

<t>Some parameters are RECOMMENDED to implement. These parameters are needed for most use-cases.</t>

<t><list style="symbols">
  <t>Image Size</t>
  <t>URI</t>
</list></t>

<t>Other parameters are OPTIONAL to implement. These parameters allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Strict Order</t>
  <t>Soft Failure</t>
  <t>Device ID</t>
  <t>Encryption Info</t>
  <t>Unpack Info</t>
  <t>Source Component</t>
  <t>URI List</t>
  <t>Custom Parameters</t>
</list></t>

</section>
<section anchor="commands" title="Commands">

<t>Commands define the behaviour of a device. The commands are divided into two groups: those that modify state (directives) and those that perform tests (conditions). There are also several Control Flow operations.</t>

<t>Some commands are REQUIRED to implement. These commands allow a device to perform core functions</t>

<t><list style="symbols">
  <t>Check Vendor Identifier (cvid)</t>
  <t>Check Class Identifier (ccid)</t>
  <t>Verify Image (cimg)</t>
  <t>Set Current Component (setc)</t>
  <t>Override Parameters (ovrp)</t>
</list></t>

<t>NOTE: on systems that support only a single component, Set Current Component has no effect.</t>

<t>Some commands are RECOMMENDED to implement. These commands are needed for most use-cases</t>

<t><list style="symbols">
  <t>Set Current Dependency (setd)</t>
  <t>Set Parameters (setp)</t>
  <t>Process Dependency (pdep)</t>
  <t>Run (run)</t>
  <t>Fetch (getc)</t>
</list></t>

<t>Other commands are OPTIONAL to implement. These commands allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Use Before (ubf)</t>
  <t>Check Component Offset  (cco)</t>
  <t>Check Device Identifier (cdid)</t>
  <t>Check Image Not Match (nimg)</t>
  <t>Check Minimum Battery (minb)</t>
  <t>Check Update Authorised (auth)</t>
  <t>Check Version (cver)</t>
  <t>Abort (abrt)</t>
  <t>Try Each (try)</t>
  <t>Copy (copy)</t>
  <t>Swap (swap)</t>
  <t>Wait For Event (wfe)</t>
  <t>Run Sequence (srun) mandatory component set</t>
  <t>Run with Arguments (arun)</t>
</list></t>

</section>
<section anchor="command-behaviour" title="Command Behaviour">

<t>The following table describes the behaviour of each command. “params”
represents the parameters for the current component or dependency.</t>

<texttable>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <c>cvid</c>
      <c>binary-match(component, params[vendor-id])</c>
      <c>ccid</c>
      <c>binary-match(component, params[class-id])</c>
      <c>cimg</c>
      <c>binary-match(digest(component), params[digest])</c>
      <c>setc</c>
      <c>component := components[arg]</c>
      <c>ovrp</c>
      <c>params[k] := v for k,v in arg</c>
      <c>setd</c>
      <c>dependency := dependencies[arg]</c>
      <c>setp</c>
      <c>params[k] := v if not k in params for k,v in arg</c>
      <c>pdep</c>
      <c>exec(dependency[common]); exec(dependency[current-segment])</c>
      <c>run</c>
      <c>run(component)</c>
      <c>getc</c>
      <c>store(component, fetch(params[uri]))</c>
      <c>ubf</c>
      <c>assert(now() &lt; arg)</c>
      <c>cco</c>
      <c>assert(offsetof(component) == arg)</c>
      <c>cdid</c>
      <c>binary-match(component, params[device-id])</c>
      <c>nimg</c>
      <c>not binary-match(digest(component), params[digest])</c>
      <c>minb</c>
      <c>assert(battery &gt;= arg)</c>
      <c>auth</c>
      <c>assert(isAuthorised())</c>
      <c>cver</c>
      <c>assert(version_check(component, arg))</c>
      <c>abrt</c>
      <c>assert(0)</c>
      <c>try</c>
      <c>break if exec(seq) is not error for seq in arg</c>
      <c>copy</c>
      <c>store(component, params[src-component])</c>
      <c>swap</c>
      <c>swap(component, params[src-component])</c>
      <c>wfe</c>
      <c>until event(arg), wait</c>
      <c>srun</c>
      <c>exec(arg)</c>
      <c>arun</c>
      <c>run(component, arg)</c>
</texttable>

</section>
</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

</section>
<section anchor="parallel-processing-interpreter" title="Parallel Processing Interpreter">

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters</t>
  <t>Override Parameters</t>
  <t>Set Strict Order = True</t>
  <t>Set Dependency Index</t>
  <t>Set Component Index</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence must declare a single target component. Set Component Index is not permitted inside this sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Depdendency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures is covered in <xref target="RFC8152"/> and the calculation of cryptographic values is beyond the scope of this document.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways, however several templates are provided here to cover common use-cases. Many of these templates can be aggregated to produce more complex behaviour.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: Digest should always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</t>

<section anchor="manifest-source-material" title="Manifest Source Material">

<t>When a manifest is constructed from a descriptive document, the descriptive document SHOULD be included in the severable text section. This section MAY be pruned from the manifest prior to distribution to a device. The inclusion of text source material enables several use-cases on unconstrained intermediate systems, where small manifest size, low parser complexity, and pull parsing are not required.</t>

<t>An unconstrained system that makes decisions based on the manifest can use the source material instead so that it does not need to execute the manifest.</t>

<t>An unconstrained system that presents data to a user can do so according to typical usage patterns without first executing the manifest, and can trust that information with the same level of confidence as the manifest itself.</t>

<t>A verifier can be constructed to emulate execution the manifest and compare the results of that execution to the source material, providing a check that the manifest performs its stated objectives and that the manifest does not exceed the capabilities of the target device.</t>

</section>
<section anchor="required-template-compatibility-check" title="Required Template: Compatibility Check">

<t>The compatibility check ensures that devices only install compatible images.</t>

<t>Common:
Set Current Component
Check Vendor Identifier
Check Class Identifier</t>

<t>All manifests MUST contain the compatibility check template, except as outlined below.</t>

<t>If a device class has a unique trust anchor, and every element in its trust chain is unique–different from every element in any other device class, then it MAY include the compatibility check.</t>

<t>If a manifest includes a dependency that performs a compatibility check, then the dependent manifest MAY include the compatibility check.</t>

<t>The compatibility check template contains a data dependency: Vendor Identifier and Class Identifier MUST be set prior to executing the template. One examples of the full template is included below, however Parameters may be set within a Try-Each block as well. They may also be inherited from a dependent manifest.</t>

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Vendor ID</t>
          <t>Class ID</t>
        </list></t>
      <t>Check Vendor Identifier</t>
      <t>Check Class Identifier</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-xip-secure-boot" title="Use Case Template: XIP Secure Boot">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Run:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Check Image Match</t>
      <t>Directive Run</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-firmware-download" title="Use Case Template: Firmware Download">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Install:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-from-external-storage" title="Use Case Template: Load from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-decompress-from-external-storage" title="Use Case Template Load &amp; Decompress from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
          <t>Compression Info</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-dependency" title="Use Case Template: Dependency">

<t><list style="symbols">
  <t>Dependency Resolution:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
  <t>Validate:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
</list></t>

<t>For any other section that the dependency has, the dependent MUST invoke Process Dependency.</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">

<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Information shared by all command sequences
          <list style="numbers">
              <t>List of dependencies</t>
              <t>List of payloads</t>
              <t>List of payloads in dependencies</t>
              <t>Common list of conditions, directives</t>
            </list></t>
          <t>Dependency resolution Reference or list of conditions, directives</t>
          <t>Payload fetch Reference or list of conditions, directives</t>
          <t>Installation Reference or list of conditions, directives</t>
          <t>Verification conditions/directives</t>
          <t>Load conditions/directives</t>
          <t>Run conditions/directives</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Dependency resolution conditions/directives</t>
      <t>Payload fetch conditions/directives</t>
      <t>Installation conditions/directives</t>
      <t>Text</t>
      <t>COSWID / Reference</t>
      <t>Intermediate Certificate(s) / CWTs</t>
      <t>Inline Payload(s)</t>
    </list></t>
</list></t>

<section anchor="severable-elements" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences</t>

</section>
<section anchor="outer-wrapper" title="Outer wrapper">

<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the outer wrapper are contained in bstr objects. Wherever the manifest references an object in the outer wrapper, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the wrapper is below</t>

<figure><artwork><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper   => bstr .cbor
                                     SUIT_Authentication_Wrapper / nil,
    $SUIT_Manifest_Wrapped,
    ? suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => bstr .cbor SUIT_Text_Map,
    ? suit-coswid                 => bstr .cbor COSWID
}

SUIT_Authentication_Wrapper = [ + (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                  COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)
]]></artwork></figure>

<t>All elements of the outer wrapper must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. The Manifest is authenticated by these blocks in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come first in the SUIT_Outer_Wrapper, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Outer_Wrapper that begins with any element other than a suit-authentication-wrapper.</t>

<t>A manifest that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The outer wrapper MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the outer wrapper contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence,
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence,
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => Digest,
    ? suit-coswid                 => Digest / bstr .cbor concise-software-identity,
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor [ + SUIT_Dependency ],
    ? suit-components             => bstr .cbor [ + SUIT_Component_Identifier ],
    ? suit-dependency-components  => bstr .cbor [ + SUIT_Component_Reference ],
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by recipient devices. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Outer_Wrapper so that a recipient can easily identify the correct data in the outer wrapper.</t>

<t>The suit-manifest-version indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behaviour of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>boolean</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>2</c>
      <c>boolean</c>
      <c>Command Segment</c>
      <c>Soft Failure</c>
      <c>Condition failures only terminate the current command segment.</c>
      <c>3</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>4</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>5</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>6</c>
      <c>tstr</c>
      <c>Component/Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>7</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>8</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>The information required to decompress the image</c>
      <c>9</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>The information required to unpack the image</c>
      <c>10</c>
      <c>uint</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>11</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>12</c>
      <c>uint</c>
      <c>Component/Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>24</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>URI List</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>25</c>
      <c>boolean</c>
      <c>Component/Dependency</c>
      <c>URI List Append</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>nint</c>
      <c>int/bstr</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularisation and division of responsibility within a pull parser. The same consideration does not apply to Conditions and Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelise their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametersoftfailure" title="SUIT_Parameter_Soft_Failure">

<t>When executing a command sequence inside SUIT_Directive_Try_Each and a condition failure occurs, the manifest processor aborts the sequence. If Soft Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Soft_Failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr</t>

</section>
<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf
]]></artwork></figure>

</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition and directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block</t>
</list></t>

<t>Argument blocks are defined for each type of command.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behaviour.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditons of any directive or series of directives, depending on where they are placed in the list. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Argument Type</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>nil</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>nil</c>
      <c>3</c>
      <c>Image Match</c>
      <c>nil</c>
      <c>4</c>
      <c>Use Before</c>
      <c>Unsigned Integer timestamp</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>Unsigned Integer</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>nil</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>nil</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>Unsigned Integer</c>
      <c>27</c>
      <c>Update Authorised</c>
      <c>Integer</c>
      <c>28</c>
      <c>Version</c>
      <c>List of Integers</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>bstr</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Components list. If no digest is specified and the component is not present in the Components list, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. One argument is required, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorised" title="suit-condition-update-authorised">

<t>Request Authorisation from the application and fail if not authorised. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorised is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater</t>
  <t>Greater or Equal</t>
  <t>Equal</t>
  <t>Lesser or Equal</t>
  <t>Lesser</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occured. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3]</t>
  <t>1.2-rc3 = [1,2,-1,3]</t>
  <t>1.2-beta = [1,2,-2]</t>
  <t>1.2-alpha = [1,2,-3]</t>
  <t>1.2-alpha4 = [1,2,-3,4]</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to the system that evaluates the condition matching that integer.
SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behaviour of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>31</c>
      <c>Run with Arguments</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Soft_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Soft_Failure is initialised to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behaviour of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behaviour of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behaviour of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimisation: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behaviour. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behaviour of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behaviour of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorisation</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
<section anchor="suittextmap" title="SUIT_Text_Map">
<t>The SUIT_Text_Map contains all text descriptions needed for this manifest. The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Summary</ttcol>
      <c>1</c>
      <c>manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>2</c>
      <c>update-description</c>
      <c>Free text description of the update</c>
      <c>3</c>
      <c>vendor-name</c>
      <c>Free text vendor name</c>
      <c>4</c>
      <c>model-name</c>
      <c>Free text model name</c>
      <c>5</c>
      <c>vendor-domain</c>
      <c>The domain used to create the <xref target="creating-uuids">vendor-id</xref></c>
      <c>6</c>
      <c>model-info</c>
      <c>The information used to create the <xref target="creating-uuids">class-id</xref></c>
      <c>7</c>
      <c>component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>8</c>
      <c>json-source</c>
      <c>The JSON-formated document that was used to create the manifest</c>
      <c>9</c>
      <c>yaml-source</c>
      <c>The yaml-formated document that was used to create the manifest</c>
      <c>10</c>
      <c>version-dependencies</c>
      <c>List of component versions required by the manifest</c>
</texttable>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating conditional sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    suit-install                => bstr .cbor SUIT_Command_Sequence,
    suit-text                   => bstr .cbor SUIT_Text_Map,
    suit-coswid                 => bstr .cbor concise-software-identity
}

SUIT_Authentication_Wrapper = [ + (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)
]

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    ? suit-common                 => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence,
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence,
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => SUIT_Digest,
    ? suit-coswid                 => SUIT_Digest / bstr .cbor concise-software-identity,
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components  => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}


SUIT_Command_Sequence = [ + (SUIT_Condition // SUIT_Directive // SUIT_Command_Custom) ]

SUIT_Command_Custom = (nint, bstr)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison-type: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive //= (suit-directive-set-component-index,      uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index,     uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,             bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,                 SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,       nil)
SUIT_Directive //= (suit-directive-set-parameters,           {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,      {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                    nil)
SUIT_Directive //= (suit-directive-copy,                     nil)
SUIT_Directive //= (suit-directive-swap,                     nil)
SUIT_Directive //= (suit-directive-run,                      nil)
SUIT_Directive //= (suit-directive-wait,                     { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,       bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]
SUIT_Priority_Parameter_List = [ + [priority: int, parameters: { + SUIT_Parameters }] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}

suit-authentication-wrapper = 1
suit-manifest = 2

suit-manifest-encryption-info = 3
suit-manifest-encrypted       = 4

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5
suit-condition-custom = 6

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorised        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
suit-directive-do-each                  = 16 ; TBD
suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-run-with-arguments       = 31
suit-directive-swap                     = 32

suit-wait-event-argument-authorisation = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7
suit-wait-event-authorisation = 8

suit-parameter-strict-order = 1
suit-parameter-soft-failure = 2
suit-parameter-vendor-id = 3
suit-parameter-class-id = 4
suit-parameter-device-id = 5
suit-parameter-uri = 6
suit-parameter-encryption-info = 7
suit-parameter-compression-info = 8
suit-parameter-unpack-info = 9
suit-parameter-source-component = 10
suit-parameter-image-digest = 11
suit-parameter-image-size = 12

suit-parameter-uri-list = 24
suit-parameter-uri-list-append = 25
suit-parameter-prioritised-parameters = 26

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-vendor-name           = 3
suit-text-model-name            = 4
suit-text-vendor-domain         = 5
suit-text-model-info            = 6
suit-text-component-description = 7
suit-text-manifest-json-source  = 8
suit-text-manifest-yaml-source  = 9
suit-text-version-dependencies  = 10
]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<section anchor="example-0" title="Example 0:">

<t>Secure boot only.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 1,
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840ebec'
                        h'b66cbecb19dcedacf8459c1a22a1453781ba98d8ffb9'
                        h'd4e2912f29d23bac5ae3d51f1ff0c1b1df05e207ca17'
                        h'483a57ede914cf826b73599137881c8364c8',
    / manifest / 2 : h'a401010201035840a2024c818245466c6173684300340104'
                     h'582e8213a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 1,
        / common / 3 : h'a2024c818245466c6173684300340104582e8213a20b58'
                       h'248202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b582482025820001122334455'
                                    h'66778899aabbccddeeff0123456789ab'
                                    h'cdeffedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 87</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f6025851a401010201035840a2024c818245466c6173684300340104582e8213a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d00c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 172</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840ebecb66cbecb19dcedacf845
9c1a22a1453781ba98d8ffb9d4e2912f29d23bac5ae3d51f1ff0c1b1df05e207ca17483a
57ede914cf826b73599137881c8364c8025851a401010201035840a2024c818245466c61
73684300340104582e8213a20b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d00c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-1" title="Example 1:">

<t>Simultaneous download and installation of payload.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 2,
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840b531'
                        h'42132ebddbf0c523378d16fc904badc56553e41c6713'
                        h'b758dbd39f47effec5e7a583c418129f456d0aaaa3c4'
                        h'3fe06dd30d664b709edf0ad05b70dad38bc2',
    / manifest / 2 : h'a401010202035840a2024c818245466c6173684300340104'
                     h'582e8213a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'095825860c0013a106781b687474703a2f2f6578616d706c'
                     h'652e636f6d2f66696c652e62696e15f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 2,
        / common / 3 : h'a2024c818245466c6173684300340104582e8213a20b58'
                       h'248202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b582482025820001122334455'
                                    h'66778899aabbccddeeff0123456789ab'
                                    h'cdeffedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 118</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f6025870a401010202035840a2024c818245466c6173684300340104582e8213a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d0095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 203</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840b53142132ebddbf0c523378d
16fc904badc56553e41c6713b758dbd39f47effec5e7a583c418129f456d0aaaa3c43fe0
6dd30d664b709edf0ad05b70dad38bc2025870a401010202035840a2024c818245466c61
73684300340104582e8213a20b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d0095825860c0013a106781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e15f6
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2:">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 3,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45",
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658400014'
                        h'750c013f7e1cdbec6f14b99b49195e081d1030508a6b'
                        h'8d271bd99dfb382a7767dc45f20c9943ed22a1eaac9d'
                        h'07a041ec1acfc10ad7e45e6424629ff3e3e5',
    / manifest / 2 : h'a501010203035868a2024c818245466c6173684300340104'
                     h'58568613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04'
                     h'501492af1425695e48bf429b2d51f2ab450b582482025820'
                     h'00112233445566778899aabbccddeeff0123456789abcdef'
                     h'fedcba98765432100c1987d001f602f6095825860c0013a1'
                     h'06781b687474703a2f2f6578616d706c652e636f6d2f6669'
                     h'6c652e62696e15f60c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 3,
        / common / 3 : h'a2024c818245466c617368430034010458568613a40350'
                       h'fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425'
                       h'695e48bf429b2d51f2ab450b5824820258200011223344'
                       h'5566778899aabbccddeeff0123456789abcdeffedcba98'
                       h'765432100c1987d001f602f6' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8613a40350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450b5824820258200011'
                                    h'2233445566778899aabbccddeeff0123'
                                    h'456789abcdeffedcba98765432100c19'
                                    h'87d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 167</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258a1a501010203035868a2024c818245466c617368430034010458568613a403
50fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab450b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 252</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658400014750c013f7e1cdbec6f14
b99b49195e081d1030508a6b8d271bd99dfb382a7767dc45f20c9943ed22a1eaac9d07a0
41ec1acfc10ad7e45e6424629ff3e3e50258a1a501010203035868a2024c818245466c61
7368430034010458568613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af14
25695e48bf429b2d51f2ab450b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d001f602f6095825860c0013a106781b6874
74703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-3" title="Example 3:">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 4,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f6584070eb'
                        h'70f2552533fc954e934f50f42bdd9b6f7d4fd7e11463'
                        h'6b9cdbef2a065f9640243a7857f66c4389aea906c4f3'
                        h'b45150c8e55461e9bfda945904033fc70a84',
    / manifest / 2 : h'a5010102040358a3a20254828245466c6173684300340182'
                     h'4352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c0113a20b58248202582000112233445566778899aabbcc'
                     h'ddeeff0123456789abcdeffedcba98765432100c1987d001'
                     h'f602f6095825860c0013a106781b687474703a2f2f657861'
                     h'6d706c652e636f6d2f66696c652e62696e15f60c518e0c00'
                     h'03f60c0113a10a0015f603f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 4,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b58248202582000112233445566778899aabbccddeeff'
                       h'0123456789abcdeffedcba98765432100c1987d00c0113'
                       h'a20b58248202582000112233445566778899aabbccddee'
                       h'ff0123456789abcdeffedcba98765432100c1987d001f6'
                       h'02f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'2000112233445566778899aabbccddee'
                                    h'ff0123456789abcdeffedcba98765432'
                                    h'100c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'8e0c0003f60c0113a10a0015f603f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 236</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258e6a5010102040358a3a20254828245466c61736843003401824352414d4200
040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100c1987d00c0113a20b58248202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d001f602f6095825
860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 321</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f6584070eb70f2552533fc954e934f
50f42bdd9b6f7d4fd7e114636b9cdbef2a065f9640243a7857f66c4389aea906c4f3b451
50c8e55461e9bfda945904033fc70a840258e6a5010102040358a3a20254828245466c61
736843003401824352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

</section>
<section anchor="example-4" title="Example 4:">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 5,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0,
                "compression-info": {
                    "algorithm": "gzip"
                }
            }
        },
        { "directive-copy": null }
    ],
    "run-image": [
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658403491'
                        h'5619c1ef02b4a7ffbbb69083e8b3fb82febd9ecd6feb'
                        h'f666d700fb981b208ec6d3df8735f36fd4a0a84e0189'
                        h'43ef80e25f57fc130a43e57c6634f337b7fa',
    / manifest / 2 : h'a6010102050358a3a20254828245466c6173684300340182'
                     h'4352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c0113a20b5824820258200123456789abcdeffedcba9876'
                     h'54321000112233445566778899aabbccddeeff0c1987d001'
                     h'f602f6095825860c0013a106781b687474703a2f2f657861'
                     h'6d706c652e636f6d2f66696c652e62696e15f60b528a0c00'
                     h'03f60c0113a20843a101010a0016f60c458403f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 5,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b58248202582000112233445566778899aabbccddeeff'
                       h'0123456789abcdeffedcba98765432100c1987d00c0113'
                       h'a20b5824820258200123456789abcdeffedcba98765432'
                       h'1000112233445566778899aabbccddeeff0c1987d001f6'
                       h'02f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8a0c0003f60c0113a20843a101010a0016f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / compression-info / 8 : h'a10101',
                / source-component / 10 : 0,
            },
            / copy / 22, None,
        ],
        / run-image / 12 : h'8403f617f6' \ [
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 244</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258eea6010102050358a3a20254828245466c61736843003401824352414d4200
040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100c1987d00c0113a20b5824820258200123456789abcd
effedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f6095825
860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f60b528a0c0003f60c0113a20843a101010a0016f60c458403f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 329</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f6584034915619c1ef02b4a7ffbbb6
9083e8b3fb82febd9ecd6febf666d700fb981b208ec6d3df8735f36fd4a0a84e018943ef
80e25f57fc130a43e57c6634f337b7fa0258eea6010102050358a3a20254828245466c61
736843003401824352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b
5824820258200123456789abcdeffedcba987654321000112233445566778899aabbccdd
eeff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60b528a0c0003f60c0113a20843a101010a0016f60c45
8403f617f6
]]></artwork></figure>

</section>
<section anchor="example-5" title="Example 5:">

<t>Compatibility test, download, installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 6,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "ext-Flash",
                78848
            ],
            [
                "Flash",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 1 },
        { "condition-not-image": null },
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 1 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840a516'
                        h'466c62602aa017422f23d1469339e40c5cf06f9090da'
                        h'09bd9939ecfc4c1ffe3e6ce50e0620fe9948f76552da'
                        h'703a4c0bf2532d073be2d1f215ec83483f46',
    / manifest / 2 : h'a6010102060358a6a202578282467b1b4595ab2143003401'
                     h'8245466c6173684200040458898e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582482025820001122334455667788'
                     h'99aabbccddeeff0123456789abcdeffedcba98765432100c'
                     h'1987d00c0113a20b5824820258200123456789abcdeffedc'
                     h'ba987654321000112233445566778899aabbccddeeff0c19'
                     h'87d001f602f6095825860c0013a106781b687474703a2f2f'
                     h'6578616d706c652e636f6d2f66696c652e62696e15f60b52'
                     h'8e0c011819f60c0003f60c0113a10a0015f60c47860c0103'
                     h'f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 6,
        / common / 3 : h'a202578282467b1b4595ab21430034018245466c617368'
                       h'4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b58248202582000112233445566778899aabbcc'
                       h'ddeeff0123456789abcdeffedcba98765432100c1987d0'
                       h'0c0113a20b5824820258200123456789abcdeffedcba98'
                       h'7654321000112233445566778899aabbccddeeff0c1987'
                       h'd001f602f6' \ {
            / components / 2 : h'8282467b1b4595ab21430034018245466c6173'
                               h'68420004' \
            [
                [h'7b1b4595ab21', h'003401'],
                [h'466c617368', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8e0c011819f60c0003f60c0113a10a0015f6' \ [
            / set-component-index / 12, 1,
            / condition-not-image / 25, None,
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0103f617f6' \ [
            / set-component-index / 12, 1,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 249</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258f3a6010102060358a6a202578282467b1b4595ab21430034018245466c6173
684200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af142569
5e48bf429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100c1987d00c0113a20b58248202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f6
095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62
696e15f60b528e0c011819f60c0003f60c0113a10a0015f60c47860c0103f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 334</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840a516466c62602aa017422f23
d1469339e40c5cf06f9090da09bd9939ecfc4c1ffe3e6ce50e0620fe9948f76552da703a
4c0bf2532d073be2d1f215ec83483f460258f3a6010102060358a6a202578282467b1b45
95ab21430034018245466c6173684200040458898e13a20350fa6b4a53d5ad5fdfbe9de6
63e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011
2233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c01
13a20b5824820258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e15f60b528e0c011819f60c0003f60c0113a10a0015
f60c47860c0103f617f6
]]></artwork></figure>

</section>
<section anchor="example-6" title="Example 6:">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 7,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 76834
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "Flash",
                132096
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file1.bin"
            }
        },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file2.bin"
            }
        },
        { "directive-set-component": true },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": true },
        { "condition-image": null },
        { "directive-set-component": 0 },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658400d44'
                        h'c766566a88c5bbe61b544edd14effa7d53c9a6d43221'
                        h'99c6285490460b910c8e96c6a1065cc1be9cfa438f7b'
                        h'eeaffa9922e2ae440d6c8d0b9cb26bed2ffe',
    / manifest / 2 : h'a5010102070358a8a20257828245466c6173684300340182'
                     h'45466c6173684300040204588b8e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582482025820001122334455667788'
                     h'99aabbccddeeff0123456789abcdeffedcba98765432100c'
                     h'1987d00c0113a20b5824820258200123456789abcdeffedc'
                     h'ba987654321000112233445566778899aabbccddeeff0c1a'
                     h'00012c2201f602f609584b8c0c0013a106781c687474703a'
                     h'2f2f6578616d706c652e636f6d2f66696c65312e62696e0c'
                     h'0113a106781c687474703a2f2f6578616d706c652e636f6d'
                     h'2f66696c65322e62696e0cf515f60c49880cf503f60c0017'
                     h'f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 7,
        / common / 3 : h'a20257828245466c617368430034018245466c61736843'
                       h'00040204588b8e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b58248202582000112233445566778899aabbcc'
                       h'ddeeff0123456789abcdeffedcba98765432100c1987d0'
                       h'0c0113a20b5824820258200123456789abcdeffedcba98'
                       h'7654321000112233445566778899aabbccddeeff0c1a00'
                       h'012c2201f602f6' \ {
            / components / 2 : h'828245466c617368430034018245466c617368'
                               h'43000402' \
            [
                [h'466c617368', h'003401'],
                [h'466c617368', h'000402'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1a00012c2201f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 76834,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'8c0c0013a106781c687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c65312e62696e0c0113a1'
                            h'06781c687474703a2f2f6578616d706c652e636f'
                            h'6d2f66696c65322e62696e0cf515f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file1.bin,
            },
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file2.bin,
            },
            / set-component-index / 12, True,
            / fetch / 21, None,
        ],
        / run-image / 12 : h'880cf503f60c0017f6' \ [
            / set-component-index / 12, True,
            / condition-image / 3, None,
            / set-component-index / 12, 0,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 272</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602590109a5010102070358a8a20257828245466c617368430034018245466c6173
684300040204588b8e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425
695e48bf429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100c1987d00c0113a20b582482025820012345
6789abcdeffedcba987654321000112233445566778899aabbccddeeff0c1a00012c2201
f602f609584b8c0c0013a106781c687474703a2f2f6578616d706c652e636f6d2f66696c
65312e62696e0c0113a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65
322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 357</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658400d44c766566a88c5bbe61b54
4edd14effa7d53c9a6d4322199c6285490460b910c8e96c6a1065cc1be9cfa438f7beeaf
fa9922e2ae440d6c8d0b9cb26bed2ffe02590109a5010102070358a8a20257828245466c
617368430034018245466c6173684300040204588b8e13a20350fa6b4a53d5ad5fdfbe9d
e663e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b58248202582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c
0113a20b5824820258200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0c1a00012c2201f602f609584b8c0c0013a106781c687474703a2f2f6578
616d706c652e636f6d2f66696c65312e62696e0c0113a106781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Commands</t>
  <t>standard Parameters</t>
  <t>standard Algorithm identifiers</t>
  <t>standard text values</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="I-D.ietf-suit-architecture"/> and in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<date month='October' day='21' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.  This version of the document assumes asymmetric cryptography and a public key infrastructure.  Future versions may also describe a symmetric key approach for very constrained devices.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-07.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='October' day='30' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-04.txt' />
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
KtSHJWl4vX7N4HXtMXUF/kD3fLTGYyaLfi2mVzCEosRp8kjWVGiYsk1kwQIT
16IO2OuPykRhbZ8nS3y6XdcLXiP8776aMdc/+alSCAU7NMUp24qGa9LteTha
W40m6Fmi7OzcXQm0MHxQNRRU13fXxbMleZ5bX5zLf6urn7h3noEw6aI6WaYk
BbBZjRNn02CKpVxh2tu8CBaa/zJK8mrgKhsiIhT8lP8DX+RcDYugTZkwc5UR
SOfP0ZnUVA1c8gChKzmSfIVWvDAqJXGFpy7H8NhwDBMdi408cWyHonKaiUin
FkswCE9VhEjmEhQ+u+WyEHQO9K6/4SvyDdfdYR7YvjQNeujtsi/+S2RmF8wo
WuyNcoFSmcTtBMsuH0I6cjvroXaLAEBBZwhTtBfQZADcrFXiuk5c05cFOa5Z
aoQhNjbpanpl2URbmHQdbj2JVN/mCfeeZM61LjPouHCyk/xyVl/jN2Fnd9bW
MLMkK3+lRog55ZyjaElM1I95FVESd+oPBhVzXss/efLE5Ds2biYc10SVR90g
E5IkKbGmspfWYwaprte8r8vmzbPBmu1KbrPnpaZkOyYs2K/c5NQ1xRDrMBdY
pTeqRBQHVVg2z2oScUlsLPeA4OqbV9ntG/Km4Uz/YZnh4hq75VJ8JoF/MFFZ
ui2rKgLLZuRgLQyRpBAw5f7FKsQuOj5V37lJcve1o5+ozKqzDhjkCoP8c6R4
c5jVLCWxvVZ1jciac55WTgej3OIJWRu03YoDzS252szHCsqgbENemc9xHLJN
5DGSAC5OhKoUrE0hbt5E+0x8BnFvXM0OzjpQ+kU+RTRdPw2VqDmKpTxgXRQl
OfLVBVK2qhdb3dItfkvWXuHA1OJRSKxzZNKcE3sVVotvOWYLu9KXsqbMbqXS
gc6YhxDT+ivbj0VUys0LKCk5ioo8f0yCOv1ppHWnh4qoLm/bZka2rK7anqi3
ednHWLW3GAQVFwrSd3UWpid///M1A725/CFZfkTzCTTvf0R7gDPqbT+ihyf/
OfyI1rMf5oGndR0lxGB2X5Ca3llPnBNdKwaUkVlnACceMHxbo4GKZ9OWfxW/
I32r1I9E7ZYcdHv4nZHUbuzgJ8sqNagpLeqxUlrVI2R9c4qdrn315nE8K4Ld
m30FwtHOjc5m06Ytzxle6y1DaE4uNeuUgW31aOLONazarGyRChwIN5CGHm7X
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
+pXBSjYTo3eAjyuDliwdzsfjylrLpg3r44MGfWVV/QEfH9aWzijntZWvjS/N
OnWi+nhQ/pg8ROvUMHRsGjSAdR+Pyh9Haf23+PEYZbJHj8tN5sGyPU1mhdlB
0+SgvklN2RPd5HBDBRKn/6NtiiOoHerWZxWvBWO/V/6Ysqk2fFzZzQbHCvp4
UJ8hsOHrygqdSmXux4PKCqu6NfNxZYWUVrR+GgNFr2ytl3RZVn8pylRVcily
VKfKUlRog8LKUKKKoklRn3oVEtGgNdofc9E1K/Z8dcabNANq6U3yvwJArZSv
IFAny6tF10rsauEluVytd430be72ZkFaXfQNIrG69tdJuJoRaBJkNWtQL50i
uaxZokih+rqovmwjG7aIrFvCfCNCH5J8h+nFO6ICldrbuVY4s2//OtFL3/wV
Nt20rWHFdTNklwxzZ6fdMO3pm5rsJr7FEtA3dhIT57jbY5kEJs43w2o/krHE
fDOq9ENI4/Qztr6pzzOi0dRdu51AxKCp+42dEsTgqsy5JrUH46rETfhnHBSa
l0MdJVg0tyMaMThyTvUBVxPkhlTRCakGG8wkItwOP+z4X3HodwtD0ZdJwXXd
WpzFQEdb1gQ6YtSpqjE3T/PCZFPVCT0kQFPPlYLWuRD0Klex8WZNZ6ePLyix
xbI/Gmc9zIwh+RXb+O/R2Zfnz/wXL8//fPLqzP/T2V/pqff0/MuvTi7PTp4+
evrlo9vvv7x4OjyC31+ensrfN2dfPfqyexPcnD86+Y//uDxZ/udfv/vP06+/
fPJ01P3zo1Pv9Lu/XhR/+V336Lsv54vbP77Ilo+fvPph/yr5y/OrlyfPTk9O
Ls5m6RneNd9/f/THqz+/S+KDZ+n8+vvvnxy+LK69F7+bJMU334RX0fVJ9iqf
/ultkZ/+9ezdzZ+eFdmzr/6SHD1/NHj2u5vFyddF/sP8ZX/wdFj8KfmGl3X2
7HF1UbT9rypRLcvVZJaElDLEyrfi5ijODcBroPf1oyfnpxbwvnh7c3bz16/+
lP7n+Q/fdU9P/uOv5/L345P/CB8DuM6u/hg8+vL74ZPvv7+++Oufw78uVj8E
f8zG3yf7ZxNv8sP+fJj9ebY4/8vk5k/dg69ul08mJ/NHT8PT7ybBDy97w+tX
l9EP0/yPN188mTwdvY2KH54/uUhnl59/bq2/NC1aPqbJEvT3u8dY3Tyk6m6Y
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
SLF2bEal0oo0A2L1q9SADv8JNaA76xa3VEh9PEx+60rYZkD17gFlA+q3qa1u
berr5cnTmp7gkhreq73/fmrvtWfxwyAmAdvEq+MEPwo8/2gq/YNuvFYVf9Cd
9kej/mgwmIZHo2F8NBhOgSEb9idRdDQZTw+i4RT4vl5vOF7rQjieHCH3Cbda
dzyaHo2HcM4GwcHhCPiacTgcAEWLgyNgi4bT9a6Iw1EPGNrDeASMYy8+mkyj
4Gg4OuoCowhTPOgGh8MtVPrIVh4GaOHuj4AnrBdxDvuNWubhYNQf9uCyR05y
iPzq4dFhTCbzWn61saNdZaTmGY2E8/z1ODWC2LGLE0FjR7vNp9tsZNhVCGw2
MmzJwY96hzEO0wyjAX5GcAIBCuaDzX4eO8Vwg51i3Tlw0X2NMn/zSdhKm4rq
0630BYLy62a0k9i3rqNt8Y+2c01Hu7nVrIPRDmdi2mx9gKXtYG7ZCkc26ocR
U+7OQiPf8vjyHfT/wXacDej7d7bjVMj8tv1sQrZt+9lEjbftp3pq3KOxtX3q
Q49QqZ9N52nbfuptmf+MVqpaq8nWKvSdYHRvCquO+Quawpo3tXe/qb/VTb23
b/6j2TdjZU9YI3T8IjbPrenFVlCt5OSDT7uw4u4HQ3LH5fxyJtz+YNxkwo3H
u+o3bJ7d20aPsY26wtvEr25r2vW2F7fWd+/tZjpuNu95HxarUiU1nq0dWHce
78ScDAu6E3MyKgvrFIJek0ZwF60fava8Taq9bdHcW6e/2AXNva1dFzagube7
C0M9mv/mPCS2R3PLtD28C9M2Po5ilar0N2TpHt1buu8t3Xa735yle9M6NwJq
E6TvLd3VMRr6urd0b7Z0U+2PfzhTd3XX98oZ0JtPs07djbuABYM2kuiNG4BF
Bnb0NPgHsLEPhkdr0/SMxr2jsBdPu324bQ+m08lkMj7qHg7iw8lgOjnsT+NJ
dBSH0Xi63laP/BcwZd3p5Ah4tn73MA7H0SCaHh4MRlNg0aJhgDx0DBzx2uSq
w0E8PezG/dEU+PSwN+gG8GR0EMKtD3z64GByMA3W2NjHwpyP7m3sTR393Db2
xm6bQwt5vE3ixK/Pxj4Z9Q+DbW3scCb4wHZZAhmTmy2d0Z/F5j66t7n/Sm3u
H2boI9ve1mfk3uZ+b3P/B7a535Wt/K5s9/c2d/p3b3PX/fyDm2d/YZv7HW3G
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
qdEKvnkUhGE8myXe/w+BOapc/CQCAA==

-->

</rfc>

