<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-02" category="info">

  <front>
    <title abbrev="Firmware Manifest Format">SUIT CBOR manifest serialisation format</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="November" day="04"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="Architecture"/>.</t>

<t>The SUIT manifest is heavily optimised for consumption by constrained devices. This means that it is not constructed as a conventional descriptive document. Instead, of describing what an update IS, it describes what a recipient should DO.</t>

<t>While the SUIT manifest is informed by and optimised for firmware update use cases, there is nothing in the <xref target="Information"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a device’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
</list></t>

<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

</section>
<section anchor="how-to-use-this-document" title="How to use this document">

<t>For information about firmware update in general and the background of the suit manifest, see <xref target="background"/>.
To implement an updatable device, see <xref target="interpreter-behaviour"/> and <xref target="manifest-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="manifest-structure"/>.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="Architecture"/>.</t>

<section anchor="landscape" title="Landscape">

<t>The various constraints on IoT devices creates a broad set of use-case requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple processors may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>mesh networks may require multicast distribution.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="update-workflow-model" title="Update Workflow Model">

<t>There are several fundamental assumptions that inform the model of the firmware update workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependency manifests should be present before any payload is fetched</t>
  <t>In some applications, payloads must be fetched and validated prior to installation</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the secure boot workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependencies and payloads must be validated prior to loading</t>
  <t>All loaded images must be validated prior to execution</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest</t>
  <t>Resolve dependencies</t>
  <t>Fetch payload(s)</t>
  <t>Install payload(s)</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further 3 steps:</t>

<t><list style="numbers">
  <t>Verify image(s)</t>
  <t>Load image(s)</t>
  <t>Run image(s)</t>
</list></t>

<t>If verification and running is implemented in bootloader, then the</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="suit-manifest-goals" title="SUIT Manifest goals">

<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="numbers">
  <t>Meet the requirements defined in <xref target="Information"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-summary" title="SUIT manifest design summary">
<t>In order to provide flexible behaviour to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behaviour of a Recipient device. Behaviour is encoded as a specialised byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialised byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies behaviours in a linearised form, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behaviour by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that only manifests authenticated by the appropriate identity have access to operate on a component.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

</section>
</section>
<section anchor="interpreter-behaviour" title="Interpreter Behaviour">

<t>This section describes the behaviour of the manifest interpreter. This section focuses primarily on interpreting commands in the manifest. However, there are several other important behaviours of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid manifest, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version AND it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and MAY include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID)</t>
  <t>Unsupported command encountered</t>
  <t>Unsupported parameter encountered</t>
  <t>Unsupported component ID encountered</t>
  <t>Payload not available (update interpreter)</t>
  <t>Dependency not available (update interpreter)</t>
  <t>Application crashed when executed (bootloader interpreter)</t>
  <t>Watchdog timeout occurred (bootloader interpreter)</t>
  <t>Dependency or Payload verification failed (bootloader interpreter)</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported <xref target="interpreter-parameters">parameters</xref>. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter fundamental properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple devices MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="abstract-machine-description" title="Abstract Machine Description">

<t>The byte code that forms the bulk of the manifest is processed by an interpreter. This interpreter can be modelled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands. Certain commands also affect the machine’s behaviour.</t>

<t>Every command that modifies system state targets a specific component. Components are units of code or data that can be targeted by an update. They are identified by Component identifiers, arrays of binary-strings–effectively a binary path. Each component has a corresponding set of configuration, Parameters. Parameters are used as the inputs to commands.</t>

<section anchor="interpreter-parameters" title="Parameters">

<t>Some parameters are REQUIRED to implement. These parameters allow a device to perform core functions.</t>

<t><list style="symbols">
  <t>Vendor ID</t>
  <t>Class ID</t>
  <t>Image Digest</t>
</list></t>

<t>Some parameters are RECOMMENDED to implement. These parameters are needed for most use-cases.</t>

<t><list style="symbols">
  <t>Image Size</t>
  <t>URI</t>
</list></t>

<t>Other parameters are OPTIONAL to implement. These parameters allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Strict Order</t>
  <t>Soft Failure</t>
  <t>Device ID</t>
  <t>Encryption Info</t>
  <t>Unpack Info</t>
  <t>Source Component</t>
  <t>URI List</t>
  <t>Custom Parameters</t>
</list></t>

</section>
<section anchor="commands" title="Commands">

<t>Commands define the behaviour of a device. The commands are divided into two groups: those that modify state (directives) and those that perform tests (conditions). There are also several Control Flow operations.</t>

<t>Some commands are REQUIRED to implement. These commands allow a device to perform core functions</t>

<t><list style="symbols">
  <t>Check Vendor Identifier (cvid)</t>
  <t>Check Class Identifier (ccid)</t>
  <t>Verify Image (cimg)</t>
  <t>Set Current Component (setc)</t>
  <t>Override Parameters (ovrp)</t>
</list></t>

<t>NOTE: on systems that support only a single component, Set Current Component has no effect.</t>

<t>Some commands are RECOMMENDED to implement. These commands are needed for most use-cases</t>

<t><list style="symbols">
  <t>Set Current Dependency (setd)</t>
  <t>Set Parameters (setp)</t>
  <t>Process Dependency (pdep)</t>
  <t>Run (run)</t>
  <t>Fetch (getc)</t>
</list></t>

<t>Other commands are OPTIONAL to implement. These commands allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Use Before (ubf)</t>
  <t>Check Component Offset  (cco)</t>
  <t>Check Device Identifier (cdid)</t>
  <t>Check Image Not Match (nimg)</t>
  <t>Check Minimum Battery (minb)</t>
  <t>Check Update Authorised (auth)</t>
  <t>Check Version (cver)</t>
  <t>Abort (abrt)</t>
  <t>Try Each (try)</t>
  <t>Copy (copy)</t>
  <t>Swap (swap)</t>
  <t>Wait For Event (wfe)</t>
  <t>Run Sequence (srun) mandatory component set</t>
  <t>Run with Arguments (arun)</t>
</list></t>

</section>
<section anchor="command-behaviour" title="Command Behaviour">

<t>The following table describes the behaviour of each command. “params”
represents the parameters for the current component or dependency.</t>

<texttable>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <c>cvid</c>
      <c>binary-match(component, params[vendor-id])</c>
      <c>ccid</c>
      <c>binary-match(component, params[class-id])</c>
      <c>cimg</c>
      <c>binary-match(digest(component), params[digest])</c>
      <c>setc</c>
      <c>component := components[arg]</c>
      <c>ovrp</c>
      <c>params[k] := v for k,v in arg</c>
      <c>setd</c>
      <c>dependency := dependencies[arg]</c>
      <c>setp</c>
      <c>params[k] := v if not k in params for k,v in arg</c>
      <c>pdep</c>
      <c>exec(dependency[common]); exec(dependency[current-segment])</c>
      <c>run</c>
      <c>run(component)</c>
      <c>getc</c>
      <c>store(component, fetch(params[uri]))</c>
      <c>ubf</c>
      <c>assert(now() &lt; arg)</c>
      <c>cco</c>
      <c>assert(offsetof(component) == arg)</c>
      <c>cdid</c>
      <c>binary-match(component, params[device-id])</c>
      <c>nimg</c>
      <c>not binary-match(digest(component), params[digest])</c>
      <c>minb</c>
      <c>assert(battery &gt;= arg)</c>
      <c>auth</c>
      <c>assert(isAuthorised())</c>
      <c>cver</c>
      <c>assert(version_check(component, arg))</c>
      <c>abrt</c>
      <c>assert(0)</c>
      <c>try</c>
      <c>break if exec(seq) is not error for seq in arg</c>
      <c>copy</c>
      <c>store(component, params[src-component])</c>
      <c>swap</c>
      <c>swap(component, params[src-component])</c>
      <c>wfe</c>
      <c>until event(arg), wait</c>
      <c>srun</c>
      <c>exec(arg)</c>
      <c>arun</c>
      <c>run(component, arg)</c>
</texttable>

</section>
</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

</section>
<section anchor="parallel-processing-interpreter" title="Parallel Processing Interpreter">

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters</t>
  <t>Override Parameters</t>
  <t>Set Strict Order = True</t>
  <t>Set Dependency Index</t>
  <t>Set Component Index</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence must declare a single target component. Set Component Index is not permitted inside this sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Depdendency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures is covered in <xref target="RFC8152"/> and the calculation of cryptographic values is beyond the scope of this document.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways, however several templates are provided here to cover common use-cases. Many of these templates can be aggregated to produce more complex behaviour.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: Digest should always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</t>

<section anchor="manifest-source-material" title="Manifest Source Material">

<t>When a manifest is constructed from a descriptive document, the descriptive document SHOULD be included in the severable text section. This section MAY be pruned from the manifest prior to distribution to a device. The inclusion of text source material enables several use-cases on unconstrained intermediate systems, where small manifest size, low parser complexity, and pull parsing are not required.</t>

<t>An unconstrained system that makes decisions based on the manifest can use the source material instead so that it does not need to execute the manifest.</t>

<t>An unconstrained system that presents data to a user can do so according to typical usage patterns without first executing the manifest, and can trust that information with the same level of confidence as the manifest itself.</t>

<t>A verifier can be constructed to emulate execution the manifest and compare the results of that execution to the source material, providing a check that the manifest performs its stated objectives and that the manifest does not exceed the capabilities of the target device.</t>

</section>
<section anchor="required-template-compatibility-check" title="Required Template: Compatibility Check">

<t>The compatibility check ensures that devices only install compatible images.</t>

<t>Common:
Set Current Component
Check Vendor Identifier
Check Class Identifier</t>

<t>All manifests MUST contain the compatibility check template, except as outlined below.</t>

<t>If a device class has a unique trust anchor, and every element in its trust chain is unique–different from every element in any other device class, then it MAY include the compatibility check.</t>

<t>If a manifest includes a dependency that performs a compatibility check, then the dependent manifest MAY include the compatibility check.</t>

<t>The compatibility check template contains a data dependency: Vendor Identifier and Class Identifier MUST be set prior to executing the template. One examples of the full template is included below, however Parameters may be set within a Try-Each block as well. They may also be inherited from a dependent manifest.</t>

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Vendor ID</t>
          <t>Class ID</t>
        </list></t>
      <t>Check Vendor Identifier</t>
      <t>Check Class Identifier</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-xip-secure-boot" title="Use Case Template: XIP Secure Boot">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Run:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Check Image Match</t>
      <t>Directive Run</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-firmware-download" title="Use Case Template: Firmware Download">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Install:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-from-external-storage" title="Use Case Template: Load from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-decompress-from-external-storage" title="Use Case Template Load &amp; Decompress from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
          <t>Compression Info</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-dependency" title="Use Case Template: Dependency">

<t><list style="symbols">
  <t>Dependency Resolution:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
  <t>Validate:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
</list></t>

<t>For any other section that the dependency has, the dependent MUST invoke Process Dependency.</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">

<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Information shared by all command sequences
          <list style="numbers">
              <t>List of dependencies</t>
              <t>List of payloads</t>
              <t>List of payloads in dependencies</t>
              <t>Common list of conditions, directives</t>
            </list></t>
          <t>Dependency resolution Reference or list of conditions, directives</t>
          <t>Payload fetch Reference or list of conditions, directives</t>
          <t>Installation Reference or list of conditions, directives</t>
          <t>Verification conditions/directives</t>
          <t>Load conditions/directives</t>
          <t>Run conditions/directives</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Dependency resolution conditions/directives</t>
      <t>Payload fetch conditions/directives</t>
      <t>Installation conditions/directives</t>
      <t>Text</t>
      <t>COSWID / Reference</t>
      <t>Intermediate Certificate(s) / CWTs</t>
      <t>Inline Payload(s)</t>
    </list></t>
</list></t>

<section anchor="severable-elements" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences</t>

</section>
<section anchor="outer-wrapper" title="Outer wrapper">

<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the outer wrapper are contained in bstr objects. Wherever the manifest references an object in the outer wrapper, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the wrapper is below</t>

<figure><artwork><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper   => bstr .cbor
                                     SUIT_Authentication_Wrapper / nil,
    $SUIT_Manifest_Wrapped,
    ? suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => bstr .cbor SUIT_Text_Map,
    ? suit-coswid                 => bstr .cbor COSWID
}

SUIT_Authentication_Wrapper = [ + (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                  COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)
]]></artwork></figure>

<t>All elements of the outer wrapper must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. The Manifest is authenticated by these blocks in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come first in the SUIT_Outer_Wrapper, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Outer_Wrapper that begins with any element other than a suit-authentication-wrapper.</t>

<t>A manifest that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The outer wrapper MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the outer wrapper contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence,
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence,
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => Digest,
    ? suit-coswid                 => Digest / bstr .cbor concise-software-identity,
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor [ + SUIT_Dependency ],
    ? suit-components             => bstr .cbor [ + SUIT_Component_Identifier ],
    ? suit-dependency-components  => bstr .cbor [ + SUIT_Component_Reference ],
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by recipient devices. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Outer_Wrapper so that a recipient can easily identify the correct data in the outer wrapper.</t>

<t>The suit-manifest-version indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behaviour of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>boolean</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>2</c>
      <c>boolean</c>
      <c>Command Segment</c>
      <c>Soft Failure</c>
      <c>Condition failures only terminate the current command segment.</c>
      <c>3</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>4</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>5</c>
      <c>bstr</c>
      <c>Component/Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>6</c>
      <c>tstr</c>
      <c>Component/Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>7</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>8</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>The information required to decompress the image</c>
      <c>9</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>The information required to unpack the image</c>
      <c>10</c>
      <c>uint</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>11</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>12</c>
      <c>uint</c>
      <c>Component/Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>24</c>
      <c>bstr</c>
      <c>Component/Dependency</c>
      <c>URI List</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>25</c>
      <c>boolean</c>
      <c>Component/Dependency</c>
      <c>URI List Append</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>nint</c>
      <c>int/bstr</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularisation and division of responsibility within a pull parser. The same consideration does not apply to Conditions and Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelise their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametersoftfailure" title="SUIT_Parameter_Soft_Failure">

<t>When executing a command sequence inside SUIT_Directive_Try_Each and a condition failure occurs, the manifest processor aborts the sequence. If Soft Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Soft_Failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr</t>

</section>
<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf
]]></artwork></figure>

</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition and directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block</t>
</list></t>

<t>Argument blocks are defined for each type of command.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behaviour.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditons of any directive or series of directives, depending on where they are placed in the list. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Argument Type</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>nil</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>nil</c>
      <c>3</c>
      <c>Image Match</c>
      <c>nil</c>
      <c>4</c>
      <c>Use Before</c>
      <c>Unsigned Integer timestamp</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>Unsigned Integer</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>nil</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>nil</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>Unsigned Integer</c>
      <c>27</c>
      <c>Update Authorised</c>
      <c>Integer</c>
      <c>28</c>
      <c>Version</c>
      <c>List of Integers</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>bstr</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Components list. If no digest is specified and the component is not present in the Components list, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. One argument is required, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorised" title="suit-condition-update-authorised">

<t>Request Authorisation from the application and fail if not authorised. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorised is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater</t>
  <t>Greater or Equal</t>
  <t>Equal</t>
  <t>Lesser or Equal</t>
  <t>Lesser</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occured. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3]</t>
  <t>1.2-rc3 = [1,2,-1,3]</t>
  <t>1.2-beta = [1,2,-2]</t>
  <t>1.2-alpha = [1,2,-3]</t>
  <t>1.2-alpha4 = [1,2,-3,4]</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to the system that evaluates the condition matching that integer.
SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behaviour of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>31</c>
      <c>Run with Arguments</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Soft_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Soft_Failure is initialised to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behaviour of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behaviour of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behaviour of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimisation: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behaviour. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behaviour of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behaviour of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorisation</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
<section anchor="suittextmap" title="SUIT_Text_Map">
<t>The SUIT_Text_Map contains all text descriptions needed for this manifest. The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Summary</ttcol>
      <c>1</c>
      <c>manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>2</c>
      <c>update-description</c>
      <c>Free text description of the update</c>
      <c>3</c>
      <c>vendor-name</c>
      <c>Free text vendor name</c>
      <c>4</c>
      <c>model-name</c>
      <c>Free text model name</c>
      <c>5</c>
      <c>vendor-domain</c>
      <c>The domain used to create the <xref target="creating-uuids">vendor-id</xref></c>
      <c>6</c>
      <c>model-info</c>
      <c>The information used to create the <xref target="creating-uuids">class-id</xref></c>
      <c>7</c>
      <c>component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>8</c>
      <c>json-source</c>
      <c>The JSON-formated document that was used to create the manifest</c>
      <c>9</c>
      <c>yaml-source</c>
      <c>The yaml-formated document that was used to create the manifest</c>
      <c>10</c>
      <c>version-dependencies</c>
      <c>List of component versions required by the manifest</c>
</texttable>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating conditional sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    suit-install                => bstr .cbor SUIT_Command_Sequence,
    suit-text                   => bstr .cbor SUIT_Text_Map,
    suit-coswid                 => bstr .cbor concise-software-identity
}

SUIT_Authentication_Wrapper = [ + (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)
]

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bytes,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    ? suit-common                 => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence,
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence,
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence,
    ? suit-text                   => SUIT_Digest,
    ? suit-coswid                 => SUIT_Digest / bstr .cbor concise-software-identity,
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components  => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}


SUIT_Command_Sequence = [ + (SUIT_Condition // SUIT_Directive // SUIT_Command_Custom) ]

SUIT_Command_Custom = (nint, bstr)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive //= (suit-directive-set-component-index,      uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index,     uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,             bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,                 SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-for-each-component,       SUIT_Directive_For_Each_Component_Argument)
SUIT_Directive //= (suit-directive-process-dependency,       nil)
SUIT_Directive //= (suit-directive-set-parameters,           {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,      {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                    nil)
SUIT_Directive //= (suit-directive-copy,                     nil)
SUIT_Directive //= (suit-directive-swap,                     nil)
SUIT_Directive //= (suit-directive-run,                      nil)
SUIT_Directive //= (suit-directive-wait,                     { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,       bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]
SUIT_Priority_Parameter_List = [ + [priority: int, parameters: { + SUIT_Parameters }] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}

suit-authentication-wrapper = 1
suit-manifest = 2

suit-manifest-encryption-info = 3
suit-manifest-encrypted       = 4

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5
suit-condition-custom = 6

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorised        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
suit-directive-do-each                  = 16 ; TBD
suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-run-with-arguments       = 31
suit-directive-swap                     = 32

suit-wait-event-argument-authorisation = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7
suit-wait-event-authorisation = 8

suit-parameter-strict-order = 1
suit-parameter-soft-failure = 2
suit-parameter-vendor-id = 3
suit-parameter-class-id = 4
suit-parameter-device-id = 5
suit-parameter-uri = 6
suit-parameter-encryption-info = 7
suit-parameter-compression-info = 8
suit-parameter-unpack-info = 9
suit-parameter-source-component = 10
suit-parameter-image-digest = 11
suit-parameter-image-size = 12

suit-parameter-uri-list = 24
suit-parameter-uri-list-append = 25
suit-parameter-prioritised-parameters = 26

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-vendor-name           = 3
suit-text-model-name            = 4
suit-text-vendor-domain         = 5
suit-text-model-info            = 6
suit-text-component-description = 7
suit-text-manifest-json-source  = 8
suit-text-manifest-yaml-source  = 9
suit-text-version-dependencies  = 10
]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<section anchor="example-0" title="Example 0:">

<t>Secure boot only.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 1,
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840ebec'
                        h'b66cbecb19dcedacf8459c1a22a1453781ba98d8ffb9'
                        h'd4e2912f29d23bac5ae3d51f1ff0c1b1df05e207ca17'
                        h'483a57ede914cf826b73599137881c8364c8',
    / manifest / 2 : h'a401010201035840a2024c818245466c6173684300340104'
                     h'582e8213a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 1,
        / common / 3 : h'a2024c818245466c6173684300340104582e8213a20b58'
                       h'248202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b582482025820001122334455'
                                    h'66778899aabbccddeeff0123456789ab'
                                    h'cdeffedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 87</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f6025851a401010201035840a2024c818245466c6173684300340104582e8213a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d00c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 172</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840ebecb66cbecb19dcedacf845
9c1a22a1453781ba98d8ffb9d4e2912f29d23bac5ae3d51f1ff0c1b1df05e207ca17483a
57ede914cf826b73599137881c8364c8025851a401010201035840a2024c818245466c61
73684300340104582e8213a20b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d00c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-1" title="Example 1:">

<t>Simultaneous download and installation of payload.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 2,
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840b531'
                        h'42132ebddbf0c523378d16fc904badc56553e41c6713'
                        h'b758dbd39f47effec5e7a583c418129f456d0aaaa3c4'
                        h'3fe06dd30d664b709edf0ad05b70dad38bc2',
    / manifest / 2 : h'a401010202035840a2024c818245466c6173684300340104'
                     h'582e8213a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'095825860c0013a106781b687474703a2f2f6578616d706c'
                     h'652e636f6d2f66696c652e62696e15f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 2,
        / common / 3 : h'a2024c818245466c6173684300340104582e8213a20b58'
                       h'248202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b582482025820001122334455'
                                    h'66778899aabbccddeeff0123456789ab'
                                    h'cdeffedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 118</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f6025870a401010202035840a2024c818245466c6173684300340104582e8213a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d0095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 203</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840b53142132ebddbf0c523378d
16fc904badc56553e41c6713b758dbd39f47effec5e7a583c418129f456d0aaaa3c43fe0
6dd30d664b709edf0ad05b70dad38bc2025870a401010202035840a2024c818245466c61
73684300340104582e8213a20b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d0095825860c0013a106781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e15f6
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2:">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 3,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45",
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658400014'
                        h'750c013f7e1cdbec6f14b99b49195e081d1030508a6b'
                        h'8d271bd99dfb382a7767dc45f20c9943ed22a1eaac9d'
                        h'07a041ec1acfc10ad7e45e6424629ff3e3e5',
    / manifest / 2 : h'a501010203035868a2024c818245466c6173684300340104'
                     h'58568613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04'
                     h'501492af1425695e48bf429b2d51f2ab450b582482025820'
                     h'00112233445566778899aabbccddeeff0123456789abcdef'
                     h'fedcba98765432100c1987d001f602f6095825860c0013a1'
                     h'06781b687474703a2f2f6578616d706c652e636f6d2f6669'
                     h'6c652e62696e15f60c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 3,
        / common / 3 : h'a2024c818245466c617368430034010458568613a40350'
                       h'fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425'
                       h'695e48bf429b2d51f2ab450b5824820258200011223344'
                       h'5566778899aabbccddeeff0123456789abcdeffedcba98'
                       h'765432100c1987d001f602f6' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8613a40350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450b5824820258200011'
                                    h'2233445566778899aabbccddeeff0123'
                                    h'456789abcdeffedcba98765432100c19'
                                    h'87d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 167</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258a1a501010203035868a2024c818245466c617368430034010458568613a403
50fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab450b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 252</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658400014750c013f7e1cdbec6f14
b99b49195e081d1030508a6b8d271bd99dfb382a7767dc45f20c9943ed22a1eaac9d07a0
41ec1acfc10ad7e45e6424629ff3e3e50258a1a501010203035868a2024c818245466c61
7368430034010458568613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af14
25695e48bf429b2d51f2ab450b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d001f602f6095825860c0013a106781b6874
74703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-3" title="Example 3:">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 4,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f6584070eb'
                        h'70f2552533fc954e934f50f42bdd9b6f7d4fd7e11463'
                        h'6b9cdbef2a065f9640243a7857f66c4389aea906c4f3'
                        h'b45150c8e55461e9bfda945904033fc70a84',
    / manifest / 2 : h'a5010102040358a3a20254828245466c6173684300340182'
                     h'4352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c0113a20b58248202582000112233445566778899aabbcc'
                     h'ddeeff0123456789abcdeffedcba98765432100c1987d001'
                     h'f602f6095825860c0013a106781b687474703a2f2f657861'
                     h'6d706c652e636f6d2f66696c652e62696e15f60c518e0c00'
                     h'03f60c0113a10a0015f603f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 4,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b58248202582000112233445566778899aabbccddeeff'
                       h'0123456789abcdeffedcba98765432100c1987d00c0113'
                       h'a20b58248202582000112233445566778899aabbccddee'
                       h'ff0123456789abcdeffedcba98765432100c1987d001f6'
                       h'02f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'2000112233445566778899aabbccddee'
                                    h'ff0123456789abcdeffedcba98765432'
                                    h'100c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'8e0c0003f60c0113a10a0015f603f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 236</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258e6a5010102040358a3a20254828245466c61736843003401824352414d4200
040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100c1987d00c0113a20b58248202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d001f602f6095825
860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 321</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f6584070eb70f2552533fc954e934f
50f42bdd9b6f7d4fd7e114636b9cdbef2a065f9640243a7857f66c4389aea906c4f3b451
50c8e55461e9bfda945904033fc70a840258e6a5010102040358a3a20254828245466c61
736843003401824352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

</section>
<section anchor="example-4" title="Example 4:">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 5,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0,
                "compression-info": {
                    "algorithm": "gzip"
                }
            }
        },
        { "directive-copy": null }
    ],
    "run-image": [
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658403491'
                        h'5619c1ef02b4a7ffbbb69083e8b3fb82febd9ecd6feb'
                        h'f666d700fb981b208ec6d3df8735f36fd4a0a84e0189'
                        h'43ef80e25f57fc130a43e57c6634f337b7fa',
    / manifest / 2 : h'a6010102050358a3a20254828245466c6173684300340182'
                     h'4352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c0113a20b5824820258200123456789abcdeffedcba9876'
                     h'54321000112233445566778899aabbccddeeff0c1987d001'
                     h'f602f6095825860c0013a106781b687474703a2f2f657861'
                     h'6d706c652e636f6d2f66696c652e62696e15f60b528a0c00'
                     h'03f60c0113a20843a101010a0016f60c458403f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 5,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b58248202582000112233445566778899aabbccddeeff'
                       h'0123456789abcdeffedcba98765432100c1987d00c0113'
                       h'a20b5824820258200123456789abcdeffedcba98765432'
                       h'1000112233445566778899aabbccddeeff0c1987d001f6'
                       h'02f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8a0c0003f60c0113a20843a101010a0016f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / compression-info / 8 : h'a10101',
                / source-component / 10 : 0,
            },
            / copy / 22, None,
        ],
        / run-image / 12 : h'8403f617f6' \ [
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 244</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258eea6010102050358a3a20254828245466c61736843003401824352414d4200
040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100c1987d00c0113a20b5824820258200123456789abcd
effedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f6095825
860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f60b528a0c0003f60c0113a20843a101010a0016f60c458403f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 329</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f6584034915619c1ef02b4a7ffbbb6
9083e8b3fb82febd9ecd6febf666d700fb981b208ec6d3df8735f36fd4a0a84e018943ef
80e25f57fc130a43e57c6634f337b7fa0258eea6010102050358a3a20254828245466c61
736843003401824352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b
5824820258200123456789abcdeffedcba987654321000112233445566778899aabbccdd
eeff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60b528a0c0003f60c0113a20843a101010a0016f60c45
8403f617f6
]]></artwork></figure>

</section>
<section anchor="example-5" title="Example 5:">

<t>Compatibility test, download, installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 6,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "ext-Flash",
                78848
            ],
            [
                "Flash",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 1 },
        { "condition-not-image": null },
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 1 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840a516'
                        h'466c62602aa017422f23d1469339e40c5cf06f9090da'
                        h'09bd9939ecfc4c1ffe3e6ce50e0620fe9948f76552da'
                        h'703a4c0bf2532d073be2d1f215ec83483f46',
    / manifest / 2 : h'a6010102060358a6a202578282467b1b4595ab2143003401'
                     h'8245466c6173684200040458898e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582482025820001122334455667788'
                     h'99aabbccddeeff0123456789abcdeffedcba98765432100c'
                     h'1987d00c0113a20b5824820258200123456789abcdeffedc'
                     h'ba987654321000112233445566778899aabbccddeeff0c19'
                     h'87d001f602f6095825860c0013a106781b687474703a2f2f'
                     h'6578616d706c652e636f6d2f66696c652e62696e15f60b52'
                     h'8e0c011819f60c0003f60c0113a10a0015f60c47860c0103'
                     h'f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 6,
        / common / 3 : h'a202578282467b1b4595ab21430034018245466c617368'
                       h'4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b58248202582000112233445566778899aabbcc'
                       h'ddeeff0123456789abcdeffedcba98765432100c1987d0'
                       h'0c0113a20b5824820258200123456789abcdeffedcba98'
                       h'7654321000112233445566778899aabbccddeeff0c1987'
                       h'd001f602f6' \ {
            / components / 2 : h'8282467b1b4595ab21430034018245466c6173'
                               h'68420004' \
            [
                [h'7b1b4595ab21', h'003401'],
                [h'466c617368', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8e0c011819f60c0003f60c0113a10a0015f6' \ [
            / set-component-index / 12, 1,
            / condition-not-image / 25, None,
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0103f617f6' \ [
            / set-component-index / 12, 1,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 249</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258f3a6010102060358a6a202578282467b1b4595ab21430034018245466c6173
684200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af142569
5e48bf429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100c1987d00c0113a20b58248202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f6
095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62
696e15f60b528e0c011819f60c0003f60c0113a10a0015f60c47860c0103f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 334</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840a516466c62602aa017422f23
d1469339e40c5cf06f9090da09bd9939ecfc4c1ffe3e6ce50e0620fe9948f76552da703a
4c0bf2532d073be2d1f215ec83483f460258f3a6010102060358a6a202578282467b1b45
95ab21430034018245466c6173684200040458898e13a20350fa6b4a53d5ad5fdfbe9de6
63e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011
2233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c01
13a20b5824820258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e15f60b528e0c011819f60c0003f60c0113a10a0015
f60c47860c0103f617f6
]]></artwork></figure>

</section>
<section anchor="example-6" title="Example 6:">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 7,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 76834
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "Flash",
                132096
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file1.bin"
            }
        },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file2.bin"
            }
        },
        { "directive-set-component": true },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": true },
        { "condition-image": null },
        { "directive-set-component": 0 },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658400d44'
                        h'c766566a88c5bbe61b544edd14effa7d53c9a6d43221'
                        h'99c6285490460b910c8e96c6a1065cc1be9cfa438f7b'
                        h'eeaffa9922e2ae440d6c8d0b9cb26bed2ffe',
    / manifest / 2 : h'a5010102070358a8a20257828245466c6173684300340182'
                     h'45466c6173684300040204588b8e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582482025820001122334455667788'
                     h'99aabbccddeeff0123456789abcdeffedcba98765432100c'
                     h'1987d00c0113a20b5824820258200123456789abcdeffedc'
                     h'ba987654321000112233445566778899aabbccddeeff0c1a'
                     h'00012c2201f602f609584b8c0c0013a106781c687474703a'
                     h'2f2f6578616d706c652e636f6d2f66696c65312e62696e0c'
                     h'0113a106781c687474703a2f2f6578616d706c652e636f6d'
                     h'2f66696c65322e62696e0cf515f60c49880cf503f60c0017'
                     h'f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 7,
        / common / 3 : h'a20257828245466c617368430034018245466c61736843'
                       h'00040204588b8e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b58248202582000112233445566778899aabbcc'
                       h'ddeeff0123456789abcdeffedcba98765432100c1987d0'
                       h'0c0113a20b5824820258200123456789abcdeffedcba98'
                       h'7654321000112233445566778899aabbccddeeff0c1a00'
                       h'012c2201f602f6' \ {
            / components / 2 : h'828245466c617368430034018245466c617368'
                               h'43000402' \
            [
                [h'466c617368', h'003401'],
                [h'466c617368', h'000402'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1a00012c2201f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 76834,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'8c0c0013a106781c687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c65312e62696e0c0113a1'
                            h'06781c687474703a2f2f6578616d706c652e636f'
                            h'6d2f66696c65322e62696e0cf515f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file1.bin,
            },
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file2.bin,
            },
            / set-component-index / 12, True,
            / fetch / 21, None,
        ],
        / run-image / 12 : h'880cf503f60c0017f6' \ [
            / set-component-index / 12, True,
            / condition-image / 3, None,
            / set-component-index / 12, 0,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 272</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602590109a5010102070358a8a20257828245466c617368430034018245466c6173
684300040204588b8e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425
695e48bf429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100c1987d00c0113a20b582482025820012345
6789abcdeffedcba987654321000112233445566778899aabbccddeeff0c1a00012c2201
f602f609584b8c0c0013a106781c687474703a2f2f6578616d706c652e636f6d2f66696c
65312e62696e0c0113a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65
322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 357</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658400d44c766566a88c5bbe61b54
4edd14effa7d53c9a6d4322199c6285490460b910c8e96c6a1065cc1be9cfa438f7beeaf
fa9922e2ae440d6c8d0b9cb26bed2ffe02590109a5010102070358a8a20257828245466c
617368430034018245466c6173684300040204588b8e13a20350fa6b4a53d5ad5fdfbe9d
e663e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b58248202582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c
0113a20b5824820258200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0c1a00012c2201f602f609584b8c0c0013a106781c687474703a2f2f6578
616d706c652e636f6d2f66696c65312e62696e0c0113a106781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Commands</t>
  <t>standard Parameters</t>
  <t>standard Algorithm identifiers</t>
  <t>standard text values</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="Architecture"/> and in <xref target="Information"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="Architecture" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02">
  <front>
    <title>A Firmware Update Architecture for Internet of Things Devices</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02"/>
</reference>
<reference anchor="Information" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02">
  <front>
    <title>Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
txICkdQQZZIBSZ8i6pQ97RFaZ7ZIy/qhM2hRuxKHv93EzASsqaFftiv6iQ7X
kgXtNO+u3G8Z3LZhTxsNKK45qza20mraphTrvWNMsdgPgfDnf3BUhC1qX0x0
lLzTHzfpjLVqVuuJ6oMZOFUkLA00vddTo1hTl5ZOkl43hLMiMNKKSuV9GHPB
QVc5bNnnhFeR7SB79Xly8cbRFKNXizOQ60GucRVPmQqQn8b2FOwKD5g5SIV/
lsLwaMftaioV7c4cGB92FeJZj9vmvIPOpSIF06iyHbqc606U4thwXaSEc2ai
kl8gaFT9UpPoIL/RlcJVpgOn8HiOvFsXRywc8HccJ20AcALMGQoTam4df5nh
uebaH1LjwgpxUNXsKAEbcIORypdCvkZETpU30l4zNgo2K/Vw1ZmhCbtVDgoH
gdkfCaVTUlBWcFoYXwViy+veVi0QrohCXDI1ZL5VHlCTLlVRlYKeODkEZZa/
Ti2/Da1NldGcO4HHgsHn2Q2jqVUvQQXNVdlqToatniJ+c+E5StYfO/lldXya
Kv1j1O8N9LRBKWAKyjeqDGznBWFHFHCsTJBB6jqzGAwXwwkV1+LwWYWEbm7x
SgcdYZYo4oHDbXKJi3GN4SVGYmRvq6XAMfG54hJ41hnV76SYQ9WLluVZ2O5o
VumaM7BgIptrU2HYZaFSWsB8xlqQhrgJf7tbpQHo9qXStCfO7aJRwb56198Z
DW2tg8oKOTHgq/vFdgNxCgmABOrUD3jGKTVVWBdJCya0S7kc2VknLV0HwqwS
iMTJb8SpXoL0rUBRu6YDmimSVDZDDgpsn0sKKKJGBQk5+WFoqpyvR7wDZ06K
Z7wBqkcbdxHr1wnNUyfCRNm4ZQSMNUgnqnjs/8RGO5AGMC30OZG3n/znaDf7
yaklIjmi7f/z+pj6NsvmcDXCX1/MsylA9Cc33d5PKlWI5U1ih1SZaiNKXZBg
ejApdO3PguKS9uackzX2+MJ0c3bq+r42VM2+73kDZ6IiQ0CX7KXyk1P3gD5Q
ZZ6l+JqkJmHrlPLws3KwinrvglXzQxwNzdo/GWX1voaOzqYAf5+gI+yoPxj4
X30FD3SKb0UjpOaU1k+T0i/LDQX2RmvHUlkathiKE5WsGWm8diRdKmKLoZp6
n0C7stq7xdP+REQV+ybiisdBruBM4j4D7abmHTRN1ens1K1mQR3bvot0ljSl
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
SocuCWg+3fWF2OccowLXSbPGLUbVMmt53cgLcngUFR+r6CtnKwputwQ6O0F8
Nck4278COcSUn9/KCUCb5lSBUBrTRknKmbPJzunmGF1kkQqXcOZdq4rqeSdX
QOp1Rm4n47jeLKo3Z+Vqf89HqRLtqyK6yAayfuZ0Nou3ydKJ27aixDKH5xYZ
RQcmMEkwccg6ttiyZAda6ta1Eqxyn5m2yFdBZAC5Gcsrq/owDEfZzmiEbez+
8XfVHGGSpOH53sO9Y//EogecvaBwwyxRU7Isk4U49h/D2rAmgcTxBy68RWlJ
eX3tsgr6I6dWlPgW6BKJOsAe1th0GNUOrTuRDd+opPrsdofeSHZ6ZbvEqcE9
ndOXWWTrIx2OnqRN6NV4kpY58L1pWc3uH2JwAuoqzGQ+4ixtQLMmwHwYrikT
xK4I17CjdK/X9lBK80k6mHWytZQztJ23zPnEGGHmGApy7zChMdVQANb6OJVv
Vf4HTDPN0yKHvMaZIsfKbjYtM6k6mKlp7TXCAxnwPInxQog5RlzNSVdf1zMX
bE6sbB9dsxpd7rlpMcgxVBtleaWNlUG3op0Uj1Nm5ZG7rxU31lr7fQsS6PYY
kwceKzqqzT41d4tr6ZAK9sGqzNCvhDVLuqszt/CdALJEx0wpUKz0wE6AVFCD
gHZcbd5qo9TC7E/E1JmU36uUA/HSmAs8xSLByEXKPZikFSRWWUk3dBvirdYp
flqwJhBODDPWw07qxPUOiYbjztGgotKU20/OXKmLzQhFca61VuyfxrxIOVzq
PrZxvp7nupK6rrMpn2/tAyvxmXLCZd9Ii8TRccFMXlfk7cTWA+HGAsv9EDjX
eOnb5VwkxYfOhcJJjzmYU+U9RsY24qqyTbDZTJV1FdIPoMOkfa4wspRXsJXc
YmXHGvbgww8ltuvpa4WY1qgdjdxK7FpJ2xZ07DaolmTIWSa3Q6pUT2dO3oTl
zccRqU1HlEa4O6FNJxRBAxD87DNkhD/7TLKf4/iU/hx3kTxcC+B95wGQ62dx
rkp3LdhAiNBTWgVxr7eigOuEWhAe6TSyjkKBKVS2pmPEV8YSu5mS8DH+IEKC
691aICankIaHW5GQBXCh9uWjjaxFqewPKlmB/UyFoXAj2JDVvAzSOFsVeP7R
T4U1LDF5HLP/Y0i1yjkAqWiDV/wujJdSbq9pTVpysIbXkoFJCWEEnurMuSRr
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
pcZpMDzpLWy2CdVm2FTTzeoCRU59/flolGnQJ1ZML01qxKqRxW/SG1o2EY1M
NYWhMWH4FsZt0O77pBpsVONTNEf1Vc2wY8Ya1Aar2GOM1gE+rg1asaI4H09q
a62aTayPD1rUonXlB3x82FjOopprVr427i3rtJbq42H1Y/LabFLC0LFpUTQ2
fTyufhxlzd/ixxOUyB4+rjZZBMvuLJmXZgdNk4PmJg2lSHSTww1VQZz+j7Yp
WKB2qNec6bsRjIN+9WPKcNrycW03W5w26ONhc9a+lq9rK3Sqh7kfD2srrGvW
zMe1FVKqz+ZpDBW9snVe0mVV+aUoU13FpchRkyJLUaEN6ipDiWpqJkV9mhVI
RIPW6H7MRdeu1vPVGW/TC6ilt0n/CgCNMr6CQJMkrxbdKK+rhVekcrXeNbK3
udvbxWh10bcIxOraXyffakagTYzVrEGzbIrksmGJIoPq66L+sotsWBpZt4T5
RkQ+JPkO04t3RA0qjbdzo2hm3/5Nkpe++WtcumnbwIrrZsguGebOToVh2tM3
DRlHfIsloG/sxCLOcbfHMklFnG9G9X4ki4j5Zlzrh5DG6WdifdOc+0Ojqbt2
O6mHQVP3GztNh8FVmXNDug3GVYll8E85ULOohh9KAGdhRxliwOKCavatpsgN
qUIQUqE1mEuUth0SuOd/yeHYHQwPXyYl11rrcGYBHQHZEHyIkaCq7tsiK0qT
4VQn2ZCgST1XCiTn4syrQsWrmzWdPnp8TskmloPxJO9jtgrJedjFfw9Pvzh7
7r98dfbnk9en/p9O/0pPvWdnX3x5cnF68uzhsy8e3nz/xfmz0RH8/uLRI/n7
+vTLh1/0roPrs4cn//EfFyfL//zrd//56Ksvnj4b9/788JH36Lu/npd/+V3v
6LsvFunNH1/my8dPX/+wf5n85cXlq5Pnj05Ozk/n2SneNd9/f/THyz+/S+KD
59ni6vvvnx6+Kq+8l7+bJuXXX4eX0dVJ/rqY/eltWTz66+m76z89L/PnX/4l
OXrxcPj8d9fpyVdl8cPi1WD4bFT+Kfmal3X6/HF9UbT9r2uRJsvVdJ6ElMbD
yoHi5g0uDMAboPfVw6dnjyzgPXl7fXr91y//lP3n2Q/f9R6d/Mdfz+Tvxyf/
ET4GcJ1e/jF4+MX3o6fff391/tc/h39NVz8Ef8wn3yf7p1Nv+sP+YpT/eZ6e
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
7Og2XKe37kD8TE4yg/HtOMmgwNYklHltUtkukhdKV94m8Wpb1KqpIHcTmQxq
eduJRreny9yIWt52Es22qGVpOYcfqeWkx1QeFOu55lS+rMxyIFa/Sg3o6J9Q
A7qzbnFLhdTHw+S3roRtB1T/DlA2oH6b2urOpr5enTxr6AkuqdGd2vvvp/Ze
exY/DGISsE28Ok7wo8Dzj6bSP+jFa1XxB73ZYDwejIfDWXg0HsVHw9EMGLLR
YBpFR9PJ7CAazYDv6/dHk7UuhJPpEXKfcKv1JuPZ0WQE52wYHByOga+ZhKMh
ULQ4OAK2aDRb74o4GveBoT2Mx8A49uOj6SwKjkbjox4wijDFg15wONpCpY9s
5WGAFu7BGHjCZhHncNCqZR4Nx4NRHy575CRHyK8eHh3GZDJv5FdbO9pVRmqf
0Vg4z1+PUyOIHbs4EbR2tNt8eu1Ghl2FwHYjw5Yc/Lh/GOMw7TAa4mcEJxCg
YD7Y7OexU4w22CnWnQMX3dco8zefhK20qag+3UpfICi/bkY7iX3rOtoW/2g7
13S0m1vNOhjtcCZm7dYHWNoO5patcGSjfhgx5fYsNPItjy/fQf8fbMfZgL5/
ZztOjcxv288mZNu2n03UeNt+6qfGPRpb26c+9AhV+tl0nrbtp9mW+c9opWq0
mmytQt8JRnemsPqYv6AprH1T+3eb+lvd1Dv75j+afTNW9oQ1QscvYvPcml5s
BdVaTj74tAcr7n0wJHdczi9nwh0MJ20m3Hiyq37D5tm9bfQY26grvE386ram
XW97cWt9995upuN28573YbEqdVLj2dqBdefxVszJsKBbMSejsrBJIei1aQR3
0fqhZs/bpNrbFs29dfqLXdDc29p1YQOae7u7MDSj+W/OQ2J7NLdM26PbMG3j
4yhWqUp/Q5bu8Z2l+87Sbbf7zVm6N61zI6A2QfrO0l0fo6WvO0v3Zks31f74
hzN113f9XjUDevtp1qm7cRewXtBGEr1xA7DIwI6eBv8ANvbh6Ghtmp7xpH8U
9uNZbwC37cFsNp1OJ0e9w2F8OB3OpoeDWTyNjuIwmszW2+qR/wKmrDebHgHP
NugdxuEkGkazw4PheAYsWjQKkIeOgSNem1x1NIxnh714MJ4Bnx72h70AnowP
Qrj1gU8fHkwPZsEaG/tEmPPxnY29raOf28be2m17aCGPt0mc+PXZ2KfjwWGw
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

-->

</rfc>

