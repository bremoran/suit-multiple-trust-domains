<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-00" category="std">

  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="24"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
uses different trust anchors for different purposes or components in the
context of firmware update.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying firmware updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term trust anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software components from multiple software signing authorities.</t>
  <t>a mechanism to remove an uneeded component</t>
  <t>single-object dependencies</t>
  <t>a partly encrypted manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All dependency manifests should be present before any payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All dependencies must be validated prior to loading.</t>
</list></t>

<t>Two steps are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t><strong>Verify delegation chains</strong></t>
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t><strong>Resolve dependencies.</strong></t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>In addition, when multiple manifests are used for an update, each manifest's steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accomodate the additional metadata needed to enable these features, the envelope and manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation chains and Integrated Dependencies
The Common metadata section in the Manifest also gains a list of dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependencies            |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation"><name>Delegation Chains</name>

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Sectino 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info"><name>Delegation Chains</name>

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A dependency is another SUIT_Envelope that describes additional components.</t>

<t>Dependency manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios, for example:</t>

<t><list style="symbols">
  <t>An IoT device may contain a processor in its radio in addition to the primary processor. These two processors may have separate firmware with separate signing authorities. Dependencies allow the firmware for the primary processor to reference a manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of update payloads. The network operator overrides the URI of payload by providing a dependent manifest that references the original manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new firmware version before releasing it. The configuration is delivered as a binary in the same way as a firmware image. The device operator references the firmware manifest from the firmware author in their own manifest which also defines the configuration.</t>
</list></t>

<t>By using dependencies, components such as software, configuration, models, and other resoruces authenticated by different trust anchors can be delivered to devices.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling dependencies. By default, any signature of a dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different componetns), it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index or Set Dependency Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>
With the addition of dependencies, some changes are necessary to the abstract machine, outside the typical scope of added commands. These changes alter the behaviour of an existing command and way that the parser processes manifests:</t>

<t><list style="symbols">
  <t>All commands may target dependency manifests as well as components. To support this behaviour, there is a new command instroduced: Set Dependency Index. This change works together with Set Component Index to choose the object on which the manifest is operating.</t>
  <t>Dependencies are processed in lock-step with the Root Manifest. This means that every dependency's current command sequence must be executed before a dependent's later command sequence may be executed. For example, every dependency's Dependency Resolution step MUST be executed before any dependent's payload fetch step.</t>
</list></t>

<t>The logic of Set Componment Index is modified as below:</t>

<t>As in <xref target="I-D.ietf-suit-manifest"/>, To simplify the logic describing the command semantics, the object "current" is used. It represents the component identified by the Component Index or the dependency identified by the Dependency Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
    if component-index is not false
    else dependencies\[dependency-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg]. The actual operation performed for Set Component Index is described by the following pseudocode, however, because of the definition of current (above), these are semantically equivalent.</t>

<figure><artwork><![CDATA[
component-index := arg
dependency-index := false
]]></artwork></figure>

<t>Similarly, Set Dependency Index is semantically equivalent to current := dependencies[arg], but the actual operation performed is:</t>

<figure><artwork><![CDATA[
dependency-index := arg
component-index := false
]]></artwork></figure>

<t>Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies.</t>

</section>
<section anchor="index-true"><name>Changes to Special Cases of Component Index and Dependency Index</name>

<t>The considerations that apply in Special Cases of Component Index and Dependency Index (Section 6.5) of <xref target="I-D.ietf-suit-manifest"/> are augmented to include Dependency Index as well as Component Index.</t>

<t>The target(s) assigned for each command are defined by the following pseudocode.</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else if component-index is integer:
    current-list = [ components[component-index] ]
else if dependency-index is true:
    current-list = dependencies
else if dependency-index is array:
    current-list = [ dependencies[idx] for idx in dependency-index ]
else:
    current-list = [ dependencies[dependency-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies' sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The Manifest Processor MUST also support a Dependency Index of True, which applies to every dependency, as described in <xref target="index-true"/></t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the commands needed to acquire and process the dependencies of the current manifest. Ideally, all dependency manifests should be fetched before any payload is fetched to ensure that all manifests are available and authenticated before any of the (larger) payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All commands are modified in that they can also target dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-component-index"><name>suit-directive-set-component-index</name>

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value "True" is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If the following commands apply to NO components, then the boolean value "False" is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-set-dependency-index"><name>suit-directive-set-dependency-index</name>

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies, or an array of unsigned integer indices into the list of dependencies. If the following directives apply to ALL dependencies, then the boolean value "True" is used instead of an index. If the following directives apply to NO dependencies, then the boolean value "False" is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>If dependency index is set to True when a command is invoked, then the command applies to all dependencies, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the dependency index is set to True, the Manifest Processor MUST execute the command once for each possible dependency index, ensuring that the command receives the parameters corresponding to that dependency index. If the dependency index is set to an array of unsigned integers, then the Manifest Processor MUST execute the command once for each listed dependency index, ensuring that the command receives the parameters corresponding to that dependency index.</t>

<t>See <xref target="index-true"/> for more details.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking "Fetch," or invoking "Process Dependency" for an individual dependency.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is "fetch payload," this will execute "common" in the current dependency, then "fetch payload" in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is "common," then the command sequence MUST be terminated with an error.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>suit-directive-unlink applies to manifests. When the components defined by a manifest are no longer needed, the manifest processor unlinks the manifest to inform the manifest processor that they are no longer needed. The unlink command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given manifest more than once, and the manifest processor must enforce this. The manifest processor MAY choose to ignore a Unlink directive depending on device policy.</t>

<t>When the reference counter reaches zero, the suit-uninstall command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in manifest processors.</t>

</section>
</section>
<section anchor="SUIT_Dependency"><name>SUIT_Dependency Manifest Element</name>

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency's Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional components, it may be that there is a need to uninstall the components that have been installed by a manifest. Where this is expected, the uninstall command sequence can provide the sequence needed to cleanly remove the components defined by the manifest and its dependencies. In general, suit uninstall will contain primarily unlink directives.</t>

<t>WARNING: This can cause faults where there are loose dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a component can be removed while it is depended upon by another component. To avoid dependency faults, a manifest author MAY use explicit dependencies where possible, or a manifest processor MAY track references to loose dependencies via reference counting in the same way as explicit dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The Uninstall command sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/> of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests"><name>Composite Manifests</name>

<t>An implementer MAY choose to place a dependency's envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI "#42", key -73 would use a URI "#-73".</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/></t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-command-sequences"><name>SUIT Command Sequences</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Resolution</c>
      <c>&#160;</c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>&#160;</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
      <c>&#160;</c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='RFC8392' target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference anchor='RFC8747' target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='L. Seitz' initials='L.' surname='Seitz'><organization/></author>
<author fullname='G. Selander' initials='G.' surname='Selander'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='March' year='2020'/>
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='7' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-20'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   establishment is provided by hybrid public-key encryption (HPKE) and
   AES Key Wrap (AES-KW).  HPKE uses public key cryptography while AES-
   KW uses a pre-shared key-encryption key.  Encryption of the plaintext
   is accomplished with conventional symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= SUIT_Integrated_Dependency

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

SUIT_Integrated_Dependency = (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)
suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution => \
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)

SUIT_Dependencies         = [ + SUIT_Dependency ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Directive //= (
    suit-directive-set-dependency-index, IndexArg)
SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-delegation = 1
suit-dependency-resolution = 7
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-directive-set-dependency-index     = 13
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
H4sIAOC1VmMAA+19a3PbSHbod/6Kjp2qkTwkx5K967GSSSLLclYVP+Za8p1s
ZqZcINCkEIEALwBKZmzvb8lvyS+759kPACS1W7OpfIirpoYi0d2nT5/3OX0w
mUxGbd4W9sRcfri4Mm+SMp/bpjXnn1pbNnlVNmZe1ebNumjzVWHNVb2GX19W
yyQvm1Eym9X2VsbGP2VVWiZLmDerk3k7yW07nzTrvJ20+Ngk48cmjx+P0qS1
i6renJimzUajfFWfGHro+PHj54+PR0ltE1jCpus6bzeju6q+WdTVesXLjm7s
Br7KTsxF2dq6tO3kJa44GjVtUmYfk6IqAYqNbUar/GRkTD1Pbda0m0K+Naat
0uBjXma2bPWLpqrb2s4b9/dmGf3Z1nnqHk6r5RLGul/zsshLv4z91E6KHDYP
k8yqAh6bVI++hV8AV8tktcrLRQDHx8LeWnzo6WiUrNvrqgboJ/Ab/gPUnZgX
U/OmqpNSvmN0v6htmSVl9EtVL+Bc/yNp4TxPzGm9NK/zZd7aTH63cBbFiZnx
0OkSh07xxP5pgb9MYV+jztr/MjVXyU2ySZZJtPy/2LL7Q7z65fnZuzfm7N10
bF5fvZzGENzYctrK6B4AZVUvYZJbi6f4/tXZk+ff/14+Pjs+/l4+fv/k+bF+
fPb0mXx8/vjouX48On6KHy8mL6eeKpdC+CdAgOU8XCl+br3KgFzx8WRh8bD7
j8zzenkHRDuxZVpvVrTt8KHW2tUkqdNrOIG0XdewymgymZhkBtSUpEC5V9d5
Y5qVTfN5nhLeTGabtM5ntjHWc2ZbmfbaMvfpBgwDbw4S4EE7B/rL4MTM58/D
+/369ZAYfN1YfCyzq6LaEBGbu7y9Hi2V8YkjjbDt1JzCo7d5as110hggGHjg
GqgOeC160txdA0Hk7Qjmb0yWz+cWiKyVZ5IyBbJmCeN/W63rVYWPw7dw8CuY
E8GByWCzo7QqkZFMNTeKaMOHMmU0LvMsK+xo9NCgRKirbJ0iBkejlwRwg4C2
ZlGZmd1UZWYaYLvCTpp8UdpapjK1/X/rHGamnSEQhf1k6nVhBVhCEwzswgCY
eQW/208JDhkLkgBDyUbnhNN+ZEAoLYAQgBNjTCDOTWKWNgVs5s0SjzizhV0g
UPwofNPAs/ABh4P0gzVhxqaatwRIgLJ5XS2NO0H3BG4VYWepkrc5gA0zdJat
7bK6tQCZWZfWZkBGbmZcjrFWzf4daBjxYVFspjAVzbRK6rbYGOEAGOvIs6n4
ALIcZedszdRdAY7KqoVFb21SmFWd3+KOHSvi+V1dWyBSB2NjcC84CBdDekBe
SPHA/GIhD40NrIYPbXgkbwqPk045yW7hFOAbZIU0AQIcm2adwnE0NHPIsY4d
u7zV4+2vX6eD/ExcnDWef98MwmwOdjDulIj8rCpv4UxIIIDCM1dAFnlZFdVi
QzhDEjGoIRvz4M2Hy6sHY/6/efuOPr8//z8fLt6fv8TPl384ff3afRjJE5d/
ePfh9Uv/yY8EUf7m/O1LHgzfmuir0YM3p3+EXxCqB+9+vLp49/b09QNmZEAI
aL01Sho6jRb5EX4Col7VFimG5FeA5RdnP/7Xfx49BWz/DUjx46Oj51+/yh/f
Hz17Cn+grOHVqhKIj//E8x6BcrVJjbMkRQGHu8rbpIDzhaMFXrorzTWIHkDn
6DTLckQlPLahsUAfRVHdIbu0HrEGwAcyyeAJsEQW1xURVrAnYnI8V1B4ynYf
WLQgweHEaq4g5QKBlAuEp2hYpF+cX73CQ7vBhcnakXFISGjXJHWGPPtjsimq
BIyfU7PKLYhjmCxgGkErSBBQZrXNQGlvVkBasDvzSiWXAuTl7pxAx/nf26Za
16ndvgDyssNGBfxXAl+DyCUhQMDhPErdOI/jThiWAE+WIK5x2qVtE8BQAoqQ
8Wm9dEUYQRJdVFciUsd4vEQ3I9BxWfQ00wB+o+IXALu7zoGXc4BrtSpE4p0D
5xTVinaHegUUFqgAksE4WgHF+UhYIpsJX97VSFPyMAm5agFfwSIRelZ1hYKA
yCeekWUvW0XhEAa+ATlYJzNADAh/VscHjQVAr168PETQmZhOzDtQuCrBdHZR
cco9pJT1GTmTxs9hTkUNgAGO4gLYAfYF55F09oVyRI8ZVYiqvDErJvhhtgGC
SXMgFACYyUf+4qmbDTy2hOcdEXbOlOCugcyAXFmaAQLhAJEqE7e/kKDMj/wA
WMd0iKKhVB04AHhqpE7gz8YN50XsJ3AuWtuIBlnCQpkaHO5RXPVM54fFZP90
SCATcENmVlTpja79ypGjioAxAjDPF+tajhpNCaT4LrTRWuD6EN+wGCD+A8mh
Krf1D8q5L9FKmKlFggYOmgBJaat1U2xkatwiTgragyUewpKYl2CgpGj58mPy
Gz7Yim2JfF0Dz9Ttpo9k+DkHMDxEOI2bk5CWkDXmhE5wQJWBWZEPcNCVkNRF
eVul6rgoNSChMT8nQlNgaTSgbQUDJP6VKNMqsyhq5JCzMa0tFhowWor6fFZV
BH2RrMESI+PIgXCKAoNhQMhOv3th8iVY/+AFvcxv84yfdhv5BiU0eFALUmcg
zu8qx324DBEMTwC83gaGbzWfN7ZVs4N2QoYHIY+HgO5C2ZO3Vo3/vAx/P2gO
he/IJUamA6zA8TNDy8Eb/m/TFbl5y4NXYF4iutFZxYE8HR0msVuGTgtNrgdC
VHlbkboKxU0DNi8YgaxUlLMC2RNMJ6eLf/DeRbyEuMWDn9uWTyg0OmlHDqn4
GdQQSBgRvERSnpS2LUv+CpOVXxIEMZhj6L1sWw8FKi4Urw/YwG0HyKDfERKV
BxizYG3prDc6Ddp+gnZHBInnEPgaJPF8XZg50KtSpgqcwOZQ9ewlLlrPC7Ko
5jUdTouWDlIsm1klmJNVAWgq0NYGuDeikZZoOtkSzR2EBNXoBj98/iwOOFhg
Z0UCxPB4cqyal/CO28atdqyGcGvkHgb7QymiWwv1har475odIrUWo4WR6Wx4
8hprOSXwYMHWgq2pCQUjgU6VbhAXDWknd2ZF1Yq6nYt6Bj+lapoc+Vk5vhAK
a0RULoAzSy8Pw62QKgWEO3kiogwdqNMZcyD4CWjbe8IMFZJXfTB+abMcuAXm
vU6KVqUdyXVxjNY1CRlH+lNzAQqxtp7HgMdJTMCqdU3Ot8h/cTSIcuiYyGP5
CczTOdLoG5CwBfsa6DvJgnOYmUQy2PMNrCy+Fj5BRtNwZEG9ZBCi1RJk33qB
1k8S7uRO1/UTi6r+Sx0psNbxYBNn/AO9gJ2wYtuswR8EelylL7rQ2D8F7nAS
YhPYYuBgrIsMFbLACx/n5HCCABZzDBchuQYm+r1gEeE/KNJ60KC8UqPgNily
NgvAx8YNVSq+0E8FVQUkuGLXOlrJfgJsMqqJQcQK1qMg7eKtvdHoaGoePfq/
KDo3GsDAASB9YIJHj0bHUyO/4uxoThK16Bl7U+9J9GDCuniWF7m3P/zDT3FV
9FmKWxvtfwpL/m5qXiGOFemkK38/JRmMsi38enRRuiMYcxDL0as/Wor7NEIa
iRrEY2MTWEUfI3sAcVqlwIPkg6KYuMEvzTxprmGJvyO/1E98nYTwb0iiFczO
IiHR2vZk5Fwq+bXx3hfTFcDUpj02dqzyRu2AS9JGeBCfH6pxMGn0y0kFYu82
t3dfgVZABaSg0StiBjobT7LOrpAgC6xlSzJ8WgriqGxgF9uKG0Z6xm2FcKCC
trR33hMiwpyywFEXzixIeqCxRbpWHwYbrUt9tAx63+DYIEW/DINXOCdaSfC0
20RjU/HSYvlL3jqvmzhbKaI6hhGB95M5DOcafJjBDu7g2T/96U+jbyfb/n07
+uJ32/n3Zc+4AAdnjAMd94Xcv8CxfUEujPzmtur/xZP/g9m+sFv90jmz53qE
vHqwgaGlwv19MX9YA2lM3ltAI051heq8M8s9YDl7d/nTxcuBFcKPngtA9GCo
vQvLFurpzCK2r3m7Xs7Ape7tKJhFjJCmD8t7S95BSgb/qzWIiQBTO889wIiS
tN9YDMsg0kMovnWzIPNcOqs+mmUPLF9oY0CM+YKEHDCLo2dHGIiXbcB+MX+P
U325z0nvgYUPIDq7PjF8u4O8v2U4xUO/eNn0h/PHLs786rLN3gNujV2r790f
r/5apNIBqIO8bvjj/gP3+3ikXhv70QL8nzE8qRcc5f3OfX//4fCvJm8U3atV
Bap/c//hh4eD399v+HbMo5RGPdqXqZ8fVrf1xFs7XzHn1H1o0K0DfgChljfo
eZKSItOG7GLK4UgwAhwCTBOpTSYpK7K9nNoED1lsPPaRvfIrknwJfs85Gifd
7zkWS64cJlDRlXvx7r35yc7MFfixAPfB2U9XYBmR1w9eGKwkA0s2d0j/oUpD
oCgUGAMtCzfrGccEgvHJwGAOSANOOO5Iz3pDf4UxQvK5aaQoewYOXFD3TQwd
YwBNIz8xhwWTkgJmEty8ZXszCcxSWXdQVx5cWovlCYDwyvxueowHsjtrgwM+
f/ZnMMH4L+Dc5aIysBbyAu21LYTWHcuGBi0VHK1i4c3pH2GPdb2JwhHDJxwS
wZg9Nf7m2dNnAGJazh0lXWEqrYM7deBtec3ZtDjQnQHVU+6azwpXZF+jrjUs
gbEFZ03h/5Vm6TtglLp1eVIY7xYYIjoOXczzEljLulFhIDsI69vYusN4Ox8r
wP399Mm+YzWU5SP2pshBN7oepXKFqzENzHncGOoMzULJLXG4l/z7OieTGRHk
ZsI9YewO3QD4/6SaT2YSOL8lVFNIbh4tQKn1YNoNp5FHo9NALBHRXFdVQ5ZH
CidgO6Agcr+jbDjDAgd1MQ+2/lJTvPDMTYlokbgPnOGCcnx+NSwjoDUydvw7
K4WrjDGLE0OH66wIBTLHjuGMezzqPmOh4K0zW3P+O1uDNkZk3uUZEg5mCkDg
LjaYKSTGDMwHRF7gsVH0qIJVaopKfHSWTpSaaUKnySfupwY1x0AsQZwo9YqC
wS5pjf4sZcTzdF0kNSdAnfcVxKKR6jH1D95txSlYiXd3qjHq/DYHPLHHmFaA
n7zEagum95D9AXtLPIMmheXqvGqiUDvHJcJ8D1VFSN6N0woaziopAFgnWV6R
gpB9quIDmJZItW4ESZOG9+e+5KoLcSMBI8R3mlAkUeC+HqqIiI+X1XYvJzkI
DVOPmu2Bbg51o8ewLkqpmVPwFlsMqxjMsSTIOriLO7QN2oq5OuM4Y0HELuwt
dSsuvWfY8exMhf57DeM50/Xh/QUO1UDBbCPTc0LDJ5gc/JKek53xJAD5Iief
3+U2scwCzLYiwWfwIGEh3pucu4NHttPQcvQTnwuF/kLOCEK8vLXuTHcJ5b8q
zlMBYHkdD+OZyRhAf9yd4q14eBJNqUEmJA1F88WeiGfBHL9m0zGqnJgZ7B5O
XyyEJgHQ7+DE6De3Cof+ByHv4NMN8QVdKq/cT0wxsiRsFLWFe1wyGBib4Pov
TWuGOByNXqAO7KZRxmH1kAbOt4balxj3lXwHizqMU4HThgca6FUirW21XyJA
PFJJTUryAOyf//rPMGL1nqPDGXxn0xu0hCRenE1S+uarVtuI4pYAciPlAGgK
cHwekNed7EC1/e+nx4e71T2A9oZKw3hkUruSsYyjhQByVnTROzUvMBo6T9YF
FRVs4sBnEioQKtGZWU0/ZVPzh+oO5T5JdDKZLDOK/ZTaVesLAmH3WKl2IhUS
jrWa9QpdqYbTo2gJUoUprZxSFu8ADNjTs9eNIAqgF2LyYpHlqTyPR+WOVSin
LZvDIQ19Awra75Z3lbq4fkyEQJep9ZVajkOEkDB8MDU/xbtzgOSk5Gcg+iyc
AxMbl9L6ei42BEvc7ACsGa5HBNMF022g6QJt1rByQYPUdk0AoLQN6+YaFB9o
CZWuDC5n74PQgxYHFuC2WxDVLS6M6CV2nUgMiZhIlPhVngfVdlzlmGxZcGou
82UOVgSmCPN5x+mMJ0UDbo7hKdAH162rTdXKDowV16RZ5AdCPcoIgGQbYQC2
SouUlpDrEq2YohV2EScA1JjoVqT6shBnseokEqzXIIfmq5X9FnmpXsOlbcOI
Dwz/hLYUfh3Yavy9TMcQJh27UPJSWIlA+4924I0IgkDdqbgSjaUOZ1lOuUiA
QFVbn7bUiVq7kzqhXAN40Ld5tXaCsnHjAmCJ12fIRlo8McXEjSxpy+wei7EK
rYFlVphOBACDZ/sLNt319Ix9aWDtCVhEWj81n/RqQMXI8OfucB/OTEivLRW1
xqklPknvsDhpSmU5zUBdTsD2B0lcznMoywP3S0nlrea4OPMfFvUITqMJWPor
ISHXI51r/kmy/ifE2Fin67FByIH50SyLsMblJhX4ZSBXmbTYdF7PgR9pyyss
gGy49Dxfoo/hBA4YIV42Io0wbGzoLtzCPimFcgz2vAm2NbRPyaDILgZM0pwT
xW2OVV0pZ+7hmLCcxxduURglsCJOpdIeHkEDGj1B9MdWWme8zX7YNS60Hp4e
7i65H/2kJYbOs+nrQFTtqcDM9coqCUWC6n0BQAZBM0b/v0HvAH+VQgNwxtDr
RHWUSQ031+CIx+RWKFrReTML5w6iodZagE+gz0jqBMVDaOG6AiWghMbWQame
c1hdLtoV1aEzw+7/cLYclbMtMOkd+cNXleN1MnAckGoNUfwSDXuFEvPUVPxv
s5NBIa0OLCGAMtmNo3+W+UMSH31gMRTQ+eHy9yoszwhJk418Sq4/6viTtSue
Ys8ZQ4kTygm7+tOYihncpU1KYVbmH4/FbxpX5NFTZ5r+V7nqkseep2B4kSAR
9AfDmQVjO1bIABgBqt/7zDVtTs3aHiDlJgIlyl7TUBEFVGpJJcrudJb+eBBD
VcZCkXQJaEwgwtNmN0OOicBAphVaaMDLSJxGy3c9ZuB/4NtI/lqo4IFg/4HW
Q1OFDTjCXPbhqktV3OFOnfiOJZ+zLmKLZ2BMl6pPOI2shHDyQ8BGv/zsPk/w
ltunX36lZEg+N50fyPIC4puDG2npGTCf44qKX372cLnZKDdyiqzIVYfjQR4i
H1or+xNPtR1gQUr88iv7zCDl1iDLhJ2iKoi52GA7FxFkeQtq1dh1VmFKa2yu
1a+a2TQJCpi8t0jFiwLkQTKrbi0r8Ea8MCEHKutCk/o2KaiIl4+ig1rYJexs
1MUefs/oJiQGhveghUkqanBZElEeo/GZEU7dRZhdeM0bIaUhQHEDA/sK4O8J
u5h02SjQUJFz74BJnaaAp7q7Hou9RggoVQ3WdUKlQOGSfZ1/iQYJ7PUskSsO
XYJBxu6h+fNDWg0vrVpJsmANOWymljo/ttioGBKg/8tWCUyH3+0JPHC2hI0S
DpaAr1yss74kCFVpBwoRpayHD5pDLDFj95HsstAhSmphhN1cJLQ+LEkQeSck
RYQu6RasCbl9RPJleDgd8OD4n4MZfs6zT78S/PBBCCma6ddda6DpvkC7d98q
nbG/BtP2GGXX1qMbc7tm2LX7cJLe/nuTMaT3mao7FHeJM6tYQewGE8iUy+xA
vj2UJDlwoNSoIrVEIuHzw5X7ZRIu/pUUSOd+XTfI97VTY8f2Dddc8y/ojnVc
nG+8r+tCqsOeaTe4AS5vuXGm8jLJKEyEuYMleo2NckagqVcYVm7ankMMjPIT
en6JYibkW2e7YqYnrdboT0qYIPJSuVRor21wJsc1ZPnGE3JCv3cNpionzgjs
4CZYredU552ptqA11ey7OwMXNRI6Qr3Gdcy7DseFCLw/HCzhYgWaaArm1znH
Q4fRrNPUWrwH5IurRXAOVGCTXUtBd/VTkr5E5jQs3V2jsCrfRKMCkI4RTVcT
O0wQaCJRReER0tqu/JM2ybHpfazExZmNu3YRh/XyxnhG7R4fnVzaEl4eIre7
NhF9DCHLX+egNvFyLNgskwB4ZHrhCrnOQ7fK3cVlaf2gNeLC/HLDfInxRhfK
RCQp7N3orctJUO1w7eelyiKKz192lpLZMUGBV32YtyRtSAlJm17LlVCNLZ9q
Nv/fKvTJscivMJf//K90NUFzwlfn58HYrevSoQaLk9HjspZBppMqZ+m2BnAB
5t3GGrZEPl6XLqKKSJ8nmNfWADndjhnFgeVSC631EqNQuUuo4hNty7n2aAXy
v9aFVdaWeGzSydVuGRSfpa+ZDfKmWtWvBQ2uvGJOubTFusCs2gY3UFdgEavf
zD5smHftTkDh4tYXmcd7V8Htky9hMr1Lolw9svti+OE4DFMGSFaScxkliZSG
xVcD43Jme2qTUQw9EImU/gU8NF/VDt2T/eLbnBYviAwtRAkmpwKc1r3TiOvW
LdCNJAwD5aRzzemPFwHJsixiTnAafDsUoktosbg6ZycMlLwnMKgOifqkwCqU
0nGOUtMFQONpwRNIIzq+rU5wDq5jdHbDGKNUlqsbgfa0RmTs79IlXpJ260T3
HUJmU3AgLfMeWPCfIoSoDgLhVOxBiLTw0Issvh1FNbB/7pGRUH0JkJjk7NYg
kMGXZTXuhCfWHmh1Cd1HS1xxvE/VgaRsSHSurjcNRzTdDAFPbgffWVJxAkCQ
osHy0uvN7ZQhCTtBhNZi7KZCF82LTc0AED12oVHqIlBazy1x9kivCe05/fBG
mLvBiEG2zj328LJ63lvPgybq2dEuByDkRnC5CeJafAc5QSgbqY9RRCMDuwmU
HejLpvFXjbZv6jZPKGv74wVIh31UywFdqaHDR90NKRTObXAh1d9SPcTjdXeF
AToxNTC9QCdviZ92mO564RJ2VKU5FT84ChA2FMb0udpt+6XUNN+MxOQDyEIs
/Wtu9ss98YSk1sybtC7zBkZWkmlnEt/2JbpFTVmEQMf1l0JKJdsar/nQ8ZFK
ZQcMFeVYihO4ypdsXJWIWKwmZNWniSStq6bpa1UJrBJi3I02nDUFhGL2eePC
M8gi71APBW4a44NBVjPGUpYeQ/jeHOT77cgx/vIeqQ7lu4HUBdcQVNhxqBDZ
GqxMURueQXpyIAnOtAYHUf1OarPMj35Y5q7j72F3XJyMxa0QiAEky+5kndlG
0gycADo9e82Yo2JctpBkK37+XmkCFpfFa4YlZa5qlQrCW4xjgmTHpCKfhVB4
7zx6N/6kQnoo3/D5odRDu2CGv0YnDtTwwN6NDEou+QYhajq5UKW/5ZakUlHh
W1fEMjXYhDqhbjPmIrPceCbZf5lU9MDuy6Rd3y6+ZUhEeZvkBdWGUrQvrtry
UwvIBwWGDOtDV2fIc/CmMzmNU0o04nRvNBUjGG1GoygZSGVu+kxeOrHDVeXc
DKeTKyQvzVVCDQX+r6nyjgGV2bV5w8hfx3mLBTJ4R4tj6LrBd2q+jb7wfQ/6
H91h66/0ZWfmQgb1ggBf9kTnZVwgBdyIKfEbPHjzy684+haDhijMbhB7/CNS
54Qk8M34luRuvYApB1TWF1JzGrOj5NCyKn/59fDvuj9IrK+xFHaGJ2DCD9jb
8AYmWdMHH/rDSABQAfOeyi8Y2066cVdl0F0PfcXbEn3Ux5WNzvTQNj8Uu2ka
bIvhZmcn2d1pxyIwDI5j5F6k65riMZm/sqTJyqqUpFBtKbFutfYGe6OJcyoR
ZHOg/bRID6M01IsonCY/pAoa7ARSgIzd+7h59/b1H83FK3Ps9HBUokmxJpsd
4j1p7K6iyZAuXM39V3qyZyUNtwX1SI6htSnEu7fnfvSYm8h1ENVJ4/hT1MtA
kkLdv9jp69cBqEFljyL5NinW1jzA2JtLzqoRJEou58DoPVaLSss4g4UsmBRF
H4hkx4ngktScah8K5LpQGP7r3hRqpvc6lbfv7oWnV5jGC7LYZKQNsOpQuoLN
s3sw/w+GlqHky5L4bvtCAwmbrev0gBpYiJAVZOJ9RpVkCNIJu19JGJJnozqs
2nNJMh/I7ZKB+FRyq4QqWl0vOoJe4uxhsYvzaYc6fUhfGQ8ZSDy+V79nR95o
lshMtAVqfuKyf66vSWfKMVsTbLKKi6AzuLZdUhKk2iv2e9tKI4PRxBJAvs95
DmqN7lOiNnrKN9Qb/lrDX0lt2JxivYnjL+kSsUcSxnVgPObPkCKDjQj6gi3c
YChI49V/S1E6tCJIpPsteF+Z9FuLiv824UcyKQz1/MZCKUbzf6dY2rOp8bY5
iY3+DFnVXee3E1bdmR1x79jaLqYN6fwv3zgyepzr/Gtve3RPU0SajIbBcLk6
xt7xvdhJylpcSMhIUy+6tVabc9dcO+wsFoTOH1Czn/EDo+RJX/b9oAfavQcl
6W2eYUFUdMlgQDGJax9A3VdL/WdAKZ33T9UVeDPLdfPc6iyGuWGWqT6C2J0p
KAbbO1sncJPHz7mIYWMezMPmSYBXiueSNlRafcBbeGA6afZehUA8147nMYZH
V4E4MJ5SJ+5WZIZStVcx+4+J4J0Ftbfecu6vjkuSoJbgtZuZggxlJcFDJw6G
Z3BCruzOskNE9+YMT4LRTEfQEfrd+yvStNjHobW5m6ZO6HKyMMXHOJ5NmObb
1sAhd0ktNSfUYKFpk3bdcFMQ7rmZEqSuRUOXhQaNu0AEDZp1/nfgnd3jg9Re
aNjplUVX105l7fM1d/H2FslM6nviBJ1EzegOWiLshrXffqCoxfgCirQFGzQF
IpCbyjUMiKCmsBXzdgh2t6JJb6VEWZmkQFgx2N/uA4CYgW/miZSN9AIFCihO
yIatJKjcpV3JarmCWb1d7BMKY95emPBqgwAkFdNT+X13p2Gz3z0H7y8DuSsn
3Z4xw0KcA1d9wuPv+wQnzwdM63YSGEdBzCSomwyOl7vWU+sHQDGHjscx3fpQ
PK/ZJ2tO220b5eOoQ4ux2yK7UcGR2bTW9mqlDw9xixHdiL/ULilVoYje9+7y
GtXASTantty8YyptaQfHYBN5ug4s4Cj6uJGmr/cLgjBp0PB7qJyCXF5ORpMA
5vW3JFH8LVCw2PiGhEQ6vdhmUuZWt3r91BGaI4T+Bms024By/sPWFZ84v1Kk
lJ6KfSnuDXwtKIlHcDuZYTqFsdpzvxfxG0jlcfCe1EGgBpx1Kg26gFs6j6Cn
3RkU3riLewcEfS9CJbk1IXIVGsiIDFd16GvYgyt5nBzhVpVhQYUrYZBMRbd2
0mfe9QpA21mYxFuJVQq3SZ3jFV3trSOw+9oNvnXNZV6uZSF1umBRh5pGChK4
68SYboFJ94kgNU/NxDkCQA0/8BGdcBo1/HGms9y18wfQcVLcaQAFAYmBDz5z
haMbtrJ965Cgk6qWZXhE8SA08jVqwUvTMd91O54m6nFwgoriBBuGPt70hDuo
92yIb5qoTMItRx1ICgQXJQUqoPjogm6LPkaBT5y9uzw3l/nio38CJUCSfhzY
bHT1Lsyn0TtSxDtxV5ilt4/DtVNQMxAAN7GpkK1J1tC1SrRf3STuoB0QZC1E
kPgbcb55S9TVR5vCKFEmZfx7za+9aSKcjf2uOEQg/T0cbGMQdq2ljC2+ZYPL
DIN2JsUC6+mul0S5bc29sRHfHy/xrQHobdFfgOwtZCyFEspiQRUhiRqXDPp4
ofKg7rZrejr93fTofi2bYm7h+5JJG9zoCyUVebS26deThVXNlOAXmxnJsuSe
TZ0aGaLdFeVeqQtLLW1HmqifR0O3yEJTEeVQaAuQusT3EXG+15XNeovLv5TB
Jd7Zjg1+QNuAswYlKm0bXmA2WrirktK1Vwt0DJ5rMF+ocqad5khyvmHvIF+t
2r0eV8e4TuVlTNIsG9eh6jJ6K4rQecRiWpsyU3+rX8MxAE9euqzfXYXXXZuw
+pKuCtI4nCMsc1JfLkhYuo00g77RNsxo7a92KqNAL3X84iDgkFgvqWCdN+tv
l3LdLNWOINcPFRr1q82312p/pT7CH5zVIga0N0qoezLdX5ZDGgdaRUWGkuk4
LNkGkbHqdcPixAWXkqhl62/8MnK8DdWxwWmA72Pg27tHRrl2E9E4g3a7Zitt
h4GGBxXXAcoPviQkxTB2sdH3aW33ESL7lcK7XXcPW3stsAVZUrBrF4BGvpze
ceCWVDl2me8Yr2g5/HT6/u3F238+8R282OihvjSNvljH1TkXZBFHPHVgp4vp
2PVOot59XPNH9kyn9nn4xXlUAM2dXkK+FyZkbGkYmavyBITMrFdoHm1cNb0b
TRfFk9sqj8KivK+o2lpao6DFjzuH88YbAJ1GEowIjS9zKmab34A38W+iXk7V
EOKwgrHjGJDQ7zePGgRpiFGHvdevolo/7HQuyG3W7sx6GpomTAoUeyQ3XZGQ
b+TtKI9bxz80Z/gqAdzMG+fff36YypdO7fYaNEnUmCQUW9MWZCs36sMrZzpr
oA+vuNebew5RlbhXJITl1RoYlR5VmO2I3kTSb6yArRTsLbXEacmmXFSJNOIM
PJwrWRt2qGDEcV5EPY5UczMYqwPIrahMNUOOHUsDkHFUOTYs5JOGLzcAk/Nb
D6+2pP2ReLEJWzaQW4x6yitJ4Isoh4uWvPMb+qF7crBfD2W6oYrGHRMFUT95
OyXG/HsG3vfT53sMPFieO/53Vg1nOXo8fbp/GuoQxi8DAfpu6YKsvjipN+Xz
fT1g9683UK61D3MD+QaYComD34LnXv0QaC81rONErU/b/DUI4rdF5W+LrLfv
rs5P9l32zDvW146rnhh1JEuwwTc2RYJRv40k42kQerPdgBTxcrT0N41/d4Km
fvTvTri4jY3e1j+I3XC1ojXYlfs9DMslko7Xy2OPSVwdPxVzJXp2raYnlo9y
NESnDLozRxgLg76kvIDt+T06EWBpUTWaaMAUVLIJ2opgyKHR3ozzOqGSxUnF
FpgoXlGjwctx5XXCeLFYye8pkB+b/DJJ4JJoSAj7zpYLrl+NENq76tqtjy79
892bcsFe4Qec7emxhFTQVuHS6gcPnx4/GNOvk2dPBn6Gbx+w3jp3L2F1YZEh
/WX1Mc9dfT02MFdHn3FmT0PK8GzUiyvueqdUksTbJiuO9lIOvEF2LC8twlgV
qn16r1PgQVDtQ5YJN/TeP9tfK6LAlGIknHqW+wptW0Rvop2qnCA7xm2f/DX3
9iJa3b+pecebmAdeF633e4dE8p+h1imW9j9Vp1PPgMlfrNl5dKcIgFux3wvB
/2Ntg7+69ucI6/+q/g6mTgNp0vPCvRyJDPINM728kc+pdD/+4PPnIUVPWRt+
Q/npW3oHZ9hR5vPDHJxkjKLgj3mj11HlhklB75iznYMr6R0zLsIktUG1XVAP
dipYl/RO/y0uo9HrZGYL80VvRbh3zozkBgT+N3pGL28ZvDHzxYzACPgSeJtf
BnJVPRDuu/LRE7P1MsU9yW909L3Zcgtif9HIwCpDVDQ6em4GLm/slYejJ09M
cKFiq0tPFOM6BcRUI161e6c2RsdmfMPKUSNrsPCdxKymXY+za2xxjkoMSeaW
QnN0dOErLTs9raXdpnSL5jiNvo/d3cJxdDLnRvy5ZLPcVPqqT1jct4fHdzRK
eIBuYMu+W9T+yyBUNK/WpSs7id7STnbd88f0pvDEPxPeeaUe1vLg0TG+RVxR
iJEypEIzS9IbRP3plN+/dPby5WtgUrxuOEmzrOCXoem79bpvDaen1TzFIssy
eKte/MJCfJTtEWYSHJlHtsMpjc8/AWJ2ikbqxkQTjP72b6P3D3w890bJd9/9
YEiRHnRfHPLDPxhsLmmm6ayqNSmsvx7um5N+9C+3ClLDLlfsVzI/m2/pv2BB
fK0H9hwa4QeZL371ykd69cpIIXExrMnSkhyc2B3bHLgPOLRjEVIfVU4e4nLr
MlhL8C2L7ljTh2nvt852DAI6Dmhimjd3j4TbQqdgYB09rsPRvrGmhaG42617
bSbglwKPdvccwLYVz7+4NzDtw4T5TmiPkr2H7rjPuDh5cO3++hh3hWXjKgVs
u3XYLV0IXwPGhNktbfi1X+3wg/k8uGnJULuVueMdPfqP2zKe+vBQhpOHPjKC
Aw9BgIfxyJVjOCuoeyw7FeWY9eppvTi89zx9VTjmXby3q48/Ul3M8GQ71SJv
97McgVeoX+8PGOvNAWBGPXlnjka7iNY8G3X52Bw/HY0GCA1m6k2lpDCwih68
OR6sc+uVRTNpHj3pPjxgtSgdH32/p4LOBER/9HxLOVH/3w/myRNu+/f/Afzo
dgdGjAAA

-->

</rfc>

