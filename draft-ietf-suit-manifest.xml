<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-09" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2020" month="July" day="13"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest. Firmware updates and secure boot
both tend to use sequences of common operations, so the manifest encodes
those sequences of operations, rather than declaring the metadata. The
manifest also serves as a building block for secure boot.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or secure boot are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In the SUIT manifest specification, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and secure boot.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and secure boot use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications in a Trusted Execution Environment (TEE), see <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>The following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severed fields.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies, software images, and installing them.</t>
  <t>Boot Procedure: A procedure that boots a Recipient by verifying dependencies and images, loading images, and invoking one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Instructions and data that allow a Recipient to perform a useful function. Typically, changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: The Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of urequirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivery to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Boot Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a MAC, to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads or Dependencies.</t>
  <t>Delegation Chains (see <xref target="ovr-delegation"/>) allow a Recipient to work from one of its Trust Anchors to an authority of the Authentication Block.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, including lists of dependencies and affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable fields.</t>
    </list></t>
  <t>Severable fields (see <xref target="ovr-severable"/>).</t>
  <t>Integrated dependencies (see <xref target="ovr-integrated"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           ------------> +------------------------------+
| Severable Elements      |        | Manifest                     |
| Human-Readable Text     |        +------------------------------+
| COSWID                  |        | Structure Version            |
| Integrated Dependencies |        | Sequence Number              |
| Integrated Payloads     |        | Reference to Full Manifest   |
+-------------------------+  +------ Common Structure             |
                             | +---- Commands                     |
+-----------------------+    | |   | Digests of Envelope Elements |
| Common Structure      | <--+ |   +------------------------------+
+-----------------------+      |
| Dependencies          |      +-> +-----------------------+
| Components IDs        |          | Commands              |
| Common Commands ---------------> +-----------------------+
+-----------------------+          | List of ( pairs of (  |
                                   |   * command code      |
                                   |   * argument          |
                                   | ))                    |
                                   +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads or dependencies. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to validate intermediate Update Authorities against long-term a Trust Anchor. These are lists of CWTs, where the first in the list is signed by a Trust Anchor.</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains one or more COSE authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The payload element in each of these COSE elements is a SUIT_Digest <xref target="SUIT_Digest"/>.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which the newest manifest is and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of three parts: a list of dependencies, a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/>, <xref target="SUIT_Dependency"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Dependency Resolution, Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Boot Command Sequences are: System Validation, Image Loading, and Image Invocation. A Boot Procedure is the complete set of each Boot Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command.</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, CoSWID, or Text data. Integrated Dependencies and Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a <xref target="ovr-severable">Severable Element</xref>. It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the <xref target="ovr-envelope">Envelope</xref> that have <xref target="ovr-integrity">Integrity Check Values</xref> in the <xref target="ovr-manifest">Manifest</xref>.</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system Severs the Text and CoSWID sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient Severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Dependencies and Payloads">

<t>In some cases, it is beneficial to include a dependency or a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest requires encryption, it must be referenced as a dependency, so a trivial manifest may be used to enclose the encrypted manifest. The encrypted manifest may be contained in the dependent manifest’s envelope.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="composite-manifests"/>, <xref target="encrypted-manifests"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Interpreter Behavior">

<t>This section describes the behavior of the manifest interpreter and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported component ID encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
  <t>Missing component from a set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the interpreter MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity. Where a device supports only one level of access, it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device supports more than one trusted party, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported parameters. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD require that all Components in the Component Set are specified by one manifest and its dependencies. This manifest is called the Root Manifest.</t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient can receive many incompatible or inapplicable manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>The guidelines in <xref target="creating-manifests">Creating Manifests</xref> require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to: Conditions, Override Parameters, Set Parameters, Try-Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again in its entirety after authenticity validation.</t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>Alternatively, a Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by an interpreter. This interpreter can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component or dependency. A dependency is another SUIT_Envelope that describes additional components. Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, i.e. arrays of binary strings, but referenced in commands by Component Index, the index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency. Most commands operate on either a component or a dependency. Setting the Component Index clears the Dependency Index. Setting the Dependency Index clears the Component Index.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Offset</c>
      <c>assert(offsetof(current) == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Check Image Not Match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(current, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>break if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true" title="Special Cases of Component Index and Dependency Index">

<t>The interpreter MUST support a special case of Component Index if more than two or more components are supported: setting Component Index to True is allowed. When a command is invoked and the Component Index is True, the command MUST be invoked once for each Component, in the order listed in the array of Component Identifiers. The interpreter MUST support a special case of Dependency Index when two or more dependencies are supported. When a command is invoked and the Dependency Index is True, the command MUST be invoked once for each Dependency, in the order listed in the array of Dependencies.</t>

<t>This is represented by the following pseudocode.</t>

<figure><artwork><![CDATA[
if iscomponent(current):
    if current is true:
      cmd(component) for-each component in components
    else:
      cmd(current)
else:
    if current is true:
      cmd(dependency) for-each dependency in dependencies
    else:
      cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component or Dependency. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True or Dependency Index = True. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index or Dependency Index to each possible index in turn.</t>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component or dependency index of True, it does not ignore any commands. It applies them to the current component or dependency on each iteration.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may fork a process for each command until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive. The interpreter MUST track each Set Component Index directive, and cause an Abort if more than one Set Component Index directive targets the same Component Index. When Strict Order = False, each suit-directive-run-sequence MUST begin with a Set Component Index directive. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that forks suit-directive-run-sequence processes to check that the first element is correct, then fork a process to handle the remainder of the sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The Manifest Processor MUST also support a Dependency Index of True, which applies to every dependency, as described in <xref target="index-true"/></t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains they MAY require independent verification of authenticity or security policies. Security domains may be divided by separation technology such as Arm TrustZone, or Intel SGX. Security domains may also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module may require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains, a manifest processor MAY be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Abstract Machine. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The Author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True or Dependency Index = True, this means that the parameters consumed by each command MUST have been set for each Component or Dependency, respectively.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</spanx></t>

<section anchor="template-compatibility-check" title="Compatibility Check Template">

<t>The compatibility check ensures that Recipients only install compatible images.
In this template all information is contained in the common block and the following sequence of operations are used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="identifiers"/>)</t>
  <t>Check Class Identifier condication (see <xref target="identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot" title="Secure Boot Template">

<t>This template performs a secure boot operation.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

<t>According to <xref target="command-behavior"/>, the Run directive applies to the component referenced by the current Component Index. Hence, the Set Component Index directive has to be used to target a specific component.</t>

</section>
<section anchor="firmware-download-template" title="Firmware Download Template">

<t>This template triggers the download of firmware.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install" title="Install Template">

<t>This template modifies the Firmware Download template and adds an additional sequence. The Firmware Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the Install sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload" title="Integrated Payload Template">

<t>This template triggers the installation of a payload included in the manifest envelope. It is identical to <xref target="firmware-download-template"/> except that it places an added restriction on the URI passed to the Set Parameters directive.</t>

<t>An implementor MAY choose to place a payload in the envelope of a manifest. The payload envelope key MAY be a positive or negative integer. The payload envelope key MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the manifest. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the payload. For example, an envelope that contains a payload a key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
<section anchor="template-load-ext" title="Load from Nonvolatile Storage Template">

<t>This directive loads an firmware image from external storage.</t>

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-load-decompress" title="Load &amp; Decompress from Nonvolatile Storage Template">

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This template is similar to <xref target="template-load-ext"/> but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

</section>
<section anchor="template-dependency" title="Dependency Template">

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementor MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see <xref target="secparameters"/>)</t>
      <t>Encryption Info (see <xref target="secparameters"/>)</t>
    </list></t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a <xref target="composite-manifests">composite manifest</xref>.</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The following operations are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following operations are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Delegation Chains, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation field MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see <xref target="authentication-info"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band updates Trust Anchors.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list of one or more cryptographic authentication wrappers for the Manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the Manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be an empty list.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>To use an encrypted manifest, it must be a dependency of a plaintext manifest. This allows fine-grained control of what information is accessible to intermediate systems for the purposes of management, while still preserving the confidentiality of the manifest contents. This also means that a Recipient can process an encrypted manifest in the same way as an encrypted payload, allowing code reuse.</t>

<t>A template for using an encrypted manifest is covered in <xref target="template-encrypted-manifest">Encrypted Manifest Template</xref>.</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a Concise Software Identifier found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>The CoSWID, Text section, or any Command Sequence of the Update Procedure (Dependency Resolution, Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps Recipients to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map of pairs. It MAY contain two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text mappings</t>
  <t>SUIT_Component_Identifier =&gt; map mappings</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in <xref target="manifest-common">suit-common</xref> or the suit-common of a dependency.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The yaml-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A text version number</c>
      <c>suit-text-version-required</c>
      <c>A text expression of the required version number</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="text-version-required" title="text-version-required">

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author should populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a text expression that is representative of the version constraints placed on the dependency.</t>

<t>For example, to express a dependency on a component “[‘x’, ‘y’]”, where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<t><spanx style="verb">
[h'78',h'79'] : {
    7 : "&gt;=1.2.5,&lt;2"
}
</spanx></t>

<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid contains a Concise Software Identifier. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of <xref target="SUIT_Dependency"></xref> blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement; at least one manifest in a dependency tree MUST contain a suit-components block.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or try-each is required by more than one Command Sequence, suit-common-sequence results in a smaller encoding.</t>

<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, however the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see <xref target="suit-component-identifier"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. A dependency MAY declare a prefix to the components defined in the dependency manifest. Components are identified by Component Identifiers, i.e. arrays of binary strings, but referenced in commands</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution: suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL to implement. Only one manifest in an update may contain the “run” directive.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 4,5,6 form the Boot Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is a command code identifier, followed by a <xref target="reporting-policy">SUIT_Reporting_Policy</xref>.</t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a reporting policy</t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether or not to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive, <xref target="suit-directive-try-each"/>, is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behavior. See <xref target="suit-parameter-soft-failure"/>.</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>To facilitate construction of Reports that describe the success, or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>If the component index is set to True when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list. If the dependency index is set to True when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Dependency, in the order expressed in the Dependencies list.</t>

<t>SUIT does NOT REQUIRE a particular format of Records or Reports. SUIT only defines hints to the Reporting engine for which Records it should aggregate into the Report.</t>

<t>For example, a system using DICE certificates MAY use instances of suit-send-sysinfo-success to construct its certificates.</t>

<t>An OPTIONAL Record format, SUIT_Record is defined in <xref target="full-cddl"/>. It is encoded as a map, with the following elements.</t>

<texttable>
      <ttcol align='left'>Element</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-record-success</c>
      <c>The boolean or integer success or failure code of the command.</c>
      <c>suit-record-component-id</c>
      <c>The current component when the record was generated.</c>
      <c>suit-record-dependency-id</c>
      <c>The current dependency digest when the record was generated.</c>
      <c>suit-record-command-sequence-id</c>
      <c>The label of the Command Sequence that was executing when the record was generated.</c>
      <c>suit-record-command-id</c>
      <c>The label of the command that was in progress when the record was generated.</c>
      <c>suit-record-params</c>
      <c>The set of parameters that was consumed by the current command.</c>
      <c>suit-record-actual</c>
      <c>The value against which a suit-condition compared a parameter.</c>
</texttable>

<t>In Secure Boot operations, the Reporting engine MAY aggregate the Records produced in a Procedure into the evidence used for an attestation report.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-parameter-component-offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="identifiers" title="Constructing Identifiers">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by <xref target="identifier-conditions">identifier conditions</xref>.</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>A RFC 4122 UUID representing the vendor of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the <xref target="SUIT_Digest"></xref> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expiry date for the use of the manifest encoded as a POSIX timestamp; a positive integer. Implementations that use this parameter MUST use a 64-bit internal representation of the integer.</t>

</section>
<section anchor="suit-parameter-component-offset" title="suit-parameter-component-offset">

<t>This parameter sets the offset in a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its offset into the component’s storage area. This offset MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>Compression Info defines any information that is required for a Recipient to perform decompression operations. Typically, this includes the algorithm identifier. This document defines the use of ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="I-D.kucherawy-rfc8478bis"/>.</t>

<t>Additional compression formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a Recipient to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either <xref target="suit-directive-copy"></xref> or with <xref target="suit-directive-swap"></xref>. The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for <xref target="suit-directive-run"></xref>. The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with <xref target="suit-condition-minimum-battery"></xref>.</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with <eref target="suit-condition-update-authorized">suit-condition-update-authorized</eref> to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when <xref target="suit-condition-version"></xref> is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>suit-directive-wait <xref target="suit-directive-wait"/> directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as <xref target="suit-parameter-update-priority"/></c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (POSIX timestamp)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>Indicates a list of URIs from which to fetch a resource. The URI list is encoded as a list of tstr, in priority order. The Recipient should attempt to fetch the resource from each URI in turn, ruling out each, in order, if the resource is inaccessible or it is otherwise undesirable to fetch from that URI. suit-parameter-uri-list is consumed by <xref target="suit-directive-fetch-uri-list"/>.</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to <xref target="suit-directive-fetch"></xref>. Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside <xref target="suit-directive-try-each"></xref> or <xref target="suit-directive-run-sequence"></xref> and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-condition-component-offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Custom Condition</c>
      <c>SUIT_Condition_Custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if <xref target="suit-parameter-soft-failure"></xref> is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary use. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. The Recipient MAY treat them as scoped by component or as global identifiers.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

<t>Globally-scoped identifiers MUST match, regardless of current component index. Component-scoped identifiers match only when the current component index resolves to the component associated with the component-scoped identifier.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the <xref target="suit-parameter-image-digest"></xref> for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the <xref target="suit-parameter-image-digest"></xref>. If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the <xref target="suit-parameter-use-before">suit-parameter-use-before parameter</xref>, which must have already been set as a parameter, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-offset" title="suit-condition-component-offset">

<t>Verify that the offset of the current component matches the offset set in <xref target="suit-parameter-component-offset"></xref>. This condition allows a manifest to select between several images to match a target offset.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient’s battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes <xref target="suit-parameter-minimum-battery"></xref>.</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. <xref target="suit-parameter-update-priority"></xref> provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component’s version against the version info specified in <xref target="suit-parameter-version"></xref></t>

</section>
<section anchor="SUIT_Condition_Custom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Abort</c>
      <c>suit-directive-abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>Fetch URI list</c>
      <c>suit-directive-fetch-uri-list</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into suit-components. If the following commands apply to ALL components, then the boolean value “True” is used instead of an index. If the following commands apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>If dependency index is set to True when a command is invoked, then the command applies to all dependencies, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the dependency index is set to True, it must execute the command once for each possible dependency index, ensuring that the command receives the parameters corresponding to that dependency index.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t><xref target="suit-parameter-soft-failure"></xref> is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and dependency-index, respectively. If component-index or dependency-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

</section>
<section anchor="suit-directive-fetch-uri-list" title="suit-directive-fetch-uri-list">

<t>suit-directive-fetch-uri-list uses the same semantics as <xref target="suit-directive-fetch"></xref>, however it iterates over the <xref target="suit-parameter-uri-list">URI List</xref> to select a URI to fetch from.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t>suit-directive-copy reads its source from <xref target="suit-parameter-source-component"></xref>.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through <xref target="suit-parameter-run-args">suit-parameter-run-arguments</xref> and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t><xref target="suit-parameter-soft-failure"></xref> defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the CoSWID, Text section, or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope with an identical key, so that it matches the key of the corresponding Integrity Check Value.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The SUIT digest is a CBOR List containing two elements: a suit-digest-algorithm-id and a bstr containing the bytes of the digest.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate a CBOR tag for the SUIT Envelope and another for the SUIT Manifest.</t>
  <t>allocate a media type for suit: application/suit-envelope</t>
  <t>setup several registries as described below</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>3</c>
      <c>Image Match</c>
      <c>4</c>
      <c>Use Before</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c>28</c>
      <c>Version</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c>30</c>
      <c>Fetch URI List</c>
      <c>31</c>
      <c>Swap</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c>nint</c>
      <c>Custom Condition</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c>2</c>
      <c>Class ID</c>
      <c>3</c>
      <c>Image Digest</c>
      <c>4</c>
      <c>Use Before</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>12</c>
      <c>Strict Order</c>
      <c>13</c>
      <c>Soft Failure</c>
      <c>14</c>
      <c>Image Size</c>
      <c>18</c>
      <c>Encryption Info</c>
      <c>19</c>
      <c>Compression Info</c>
      <c>20</c>
      <c>Unpack Info</c>
      <c>21</c>
      <c>URI</c>
      <c>22</c>
      <c>Source Component</c>
      <c>23</c>
      <c>Run Args</c>
      <c>24</c>
      <c>Device ID</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>27</c>
      <c>Update Priority</c>
      <c>28</c>
      <c>Version</c>
      <c>29</c>
      <c>Wait Info</c>
      <c>30</c>
      <c>URI List</c>
      <c>31</c>
      <c>Component Index</c>
      <c>nint</c>
      <c>Custom</c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c>2</c>
      <c>Update Description</c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c>nint</c>
      <c>Custom</c>
</texttable>

</section>
<section anchor="suit-component-text-values" title=" SUIT Component Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c>2</c>
      <c>Model Name</c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c>4</c>
      <c>Model Info</c>
      <c>5</c>
      <c>Component Description</c>
      <c>6</c>
      <c>Component Version</c>
      <c>7</c>
      <c>Component Version Required</c>
      <c>nint</c>
      <c>Custom</c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<section anchor="suit-digest-algorithm-identifiers" title="SUIT Digest Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>SHA224</c>
      <c>2</c>
      <c>SHA256</c>
      <c>3</c>
      <c>SHA384</c>
      <c>4</c>
      <c>SHA512</c>
      <c>5</c>
      <c>SHA3-224</c>
      <c>6</c>
      <c>SHA3-256</c>
      <c>7</c>
      <c>SHA3-384</c>
      <c>8</c>
      <c>SHA3-512</c>
</texttable>

</section>
<section anchor="suit-compression-algorithm-identifiers" title="SUIT Compression Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>zlib</c>
      <c>2</c>
      <c>Brotli</c>
      <c>3</c>
      <c>zstd</c>
</texttable>

</section>
<section anchor="unpack-algorithms" title="Unpack Algorithms">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>HEX</c>
      <c>2</c>
      <c>ELF</c>
      <c>3</c>
      <c>COFF</c>
      <c>4</c>
      <c>SREC</c>
</texttable>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="I-D.ietf-suit-architecture"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='May' day='27' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-11.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='2' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-11.txt' />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8747" target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2020' month='March' />
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor="I-D.kucherawy-rfc8478bis">
<front>
<title>Zstandard Compression and the application/zstd Media Type</title>

<author initials='Y' surname='Collet' fullname='Yann Collet'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='April' day='23' year='2020' />

<abstract><t>Zstandard, or "zstd" (pronounced "zee standard"), is a data compression mechanism.  This document describes the mechanism and registers a media type and content encoding to be used when transporting zstd-compressed content via Multipurpose Internet Mail Extensions (MIME).  It also registers a corresponding media type, content encoding, and structured syntax suffix.  Despite use of the word "standard" as part of its name, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.  This document replaces and obsoletes RFC 8478.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-kucherawy-rfc8478bis-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-kucherawy-rfc8478bis-05.txt' />
</reference>


<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section numbered="no" anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  ? suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * $$SUIT_Envelope_Extensions,
  (int => bstr)
}

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication = [ + bstr .cbor SUIT_Authentication_Block ]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members,
    SUIT_Severable_Members_Digests,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unserverble-manifest-member-extensions,
)

SUIT_Severable_Members_Digests = (
  ? suit-dependency-resolution-digest => SUIT_Digest,
  ? suit-payload-fetch-digest => SUIT_Digest,
  ? suit-install-digest => SUIT_Digest,
  ? suit-text-digest => SUIT_Digest,
  ? suit-coswid-digest => SUIT_Digest,
  * $$severable-manifest-members-digests-extensions
)

SUIT_Common = {
    ? suit-dependencies           => SUIT_Dependencies,
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  uint/bool)
SUIT_Common_Commands //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})


SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-image-not-match,   SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-use-before,        SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-minimum-battery,   SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-update-authorized, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-version,           SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-component-offset,  SUIT_Reporting_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-copy,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-swap,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-run,                  SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-wait,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-abort,                SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-fetch-uri-list,       SUIT_Reporting_Policy)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Reporting_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Command_ID /= suit-command-custom
SUIT_Command_ID /= suit-condition-vendor-identifier
SUIT_Command_ID /= suit-condition-class-identifier
SUIT_Command_ID /= suit-condition-image-match
SUIT_Command_ID /= suit-condition-use-before
SUIT_Command_ID /= suit-condition-component-offset
SUIT_Command_ID /= suit-condition-device-identifier
SUIT_Command_ID /= suit-condition-image-not-match
SUIT_Command_ID /= suit-condition-minimum-battery
SUIT_Command_ID /= suit-condition-update-authorized
SUIT_Command_ID /= suit-condition-version
SUIT_Command_ID /= suit-directive-set-component-index
SUIT_Command_ID /= suit-directive-set-dependency-index
SUIT_Command_ID /= suit-directive-abort
SUIT_Command_ID /= suit-directive-try-each
;SUIT_Command_ID /= suit-directive-do-each
;SUIT_Command_ID /= suit-directive-map-filter
SUIT_Command_ID /= suit-directive-process-dependency
SUIT_Command_ID /= suit-directive-set-parameters
SUIT_Command_ID /= suit-directive-override-parameters
SUIT_Command_ID /= suit-directive-fetch
SUIT_Command_ID /= suit-directive-copy
SUIT_Command_ID /= suit-directive-run
SUIT_Command_ID /= suit-directive-wait
SUIT_Command_ID /= suit-directive-run-sequence
SUIT_Command_ID /= suit-directive-swap
SUIT_Command_ID /= suit-directive-fetch-uri-list

suit-record = {
  suit-record-success             => bool/int,
  ? suit-record-component-id      => SUIT_Component_ID,
  ? suit-record-dependency-id     => SUIT_Digest,
  ? suit-record-command-sequence-id => (
      suit-common-sequence /
      suit-dependency-resolution /
      suit-payload-fetch /
      suit-install /
      suit-validate /
      suit-load /
      suit-run /
      * $$suit-command-sequence-list-extensions
  ),
  ? suit-record-interpeter-offset => uint,
  ? suit-record-command-id        => SUIT_Command_ID,
  ? suit-record-params            => SUIT_Parameters,
  ? suit-record-actual            => SUIT_Parameters,
  * $$suit-record-extensions
}

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

SUIT_Parameters //= (suit-parameter-uri-list =>
    bstr .cbor SUIT_URI_List)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    * $$SUIT_Compression_Info-extensions,
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    * $$SUIT_Unpack_Info-extensions,

}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_URI_List = [+ tstr ]

SUIT_Text_Map = {
    ? suit-text-components =>
    [
        + {
            1 => SUIT_Component_Identifier
            SUIT_Text_Component_Keys
        }
    ],
    SUIT_Text_Keys
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    ? suit-text-version-required      => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
suit-text-version-required      = 7
]]></artwork></figure>

</section>
<section numbered="no" anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-offset</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840356
3303937656636346266336262396234393465373165316632343138656566386434363
6636339303266363339613835356563396166336539656464623939584093347ceebc1
209a2d660bfbbe78e461079f1952c614e1ae8f734ff0ea438110d056c1a0cce6b0599d
b54e6704847de49efe60e9a7b821215d83368a2c8c7c088' / [
        h'd28443a10126a05844820258403563303937656636346266336262396234
3934653731653166323431386565663864343636636339303266363339613835356563
396166336539656464623939584093347ceebc1209a2d660bfbbe78e461079f1952c61
4e1ae8f734ff0ea438110d056c1a0cce6b0599db54e6704847de49efe60e9a7b821215
d83368a2c8c7c088' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584035633039376566363462663362623962
3439346537316531663234313865656638643436366363393032663633396138353565
63396166336539656464623939' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3563303937656636346266336262396
2343934653731653166323431386565663864343636636339303266363339613835356
563396166336539656464623939'
                ] /,
                / signature / h'93347ceebc1209a2d660bfbbe78e461079f195
2c614e1ae8f734ff0ea438110d056c1a0cce6b0599db54e6704847de49efe60e9a7b82
1215d83368a2c8c7c088'
            ]) /
    ] /,
    / manifest / 3:h'a50101020003585fa202818141000458568614a40150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248
202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654321
00e1987d0010f020f0a4382030f0c43821702' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:0,
        / common / 3:h'a202818141000458568614a40150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820258200011223
3445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f0
20f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'821702' / [
            / directive-run / 23,2
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  117</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a1035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0358248202582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  266</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584035633039376566363462
663362623962343934653731653166323431386565663864343636636339
303266363339613835356563396166336539656464623939584093347cee
bc1209a2d660bfbbe78e461079f1952c614e1ae8f734ff0ea438110d056c
1a0cce6b0599db54e6704847de49efe60e9a7b821215d83368a2c8c7c088
035871a50101020003585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840393
8376565633835666139396664333164333332333831623938313066393062303563326
530643466323834613666343231313230376564303066666637353058404931df82e15
3bf1e3af5a59800216d8a47c33a37839e7d63d9f526fd369aa8359daae18f7619c9591
23e7f7f928ee92a9893afedd35d06a936d6ed3d5843bf2a' / [
        h'd28443a10126a05844820258403938376565633835666139396664333164
3333323338316239383130663930623035633265306434663238346136663432313132
30376564303066666637353058404931df82e153bf1e3af5a59800216d8a47c33a3783
9e7d63d9f526fd369aa8359daae18f7619c959123e7f7f928ee92a9893afedd35d06a9
36d6ed3d5843bf2a' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584039383765656338356661393966643331
6433333233383162393831306639306230356332653064346632383461366634323131
32303765643030666666373530' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3938376565633835666139396664333
1643333323338316239383130663930623035633265306434663238346136663432313
132303765643030666666373530'
                ] /,
                / signature / h'4931df82e153bf1e3af5a59800216d8a47c33a
37839e7d63d9f526fd369aa8359daae18f7619c959123e7f7f928ee92a9893afedd35d
06a936d6ed3d5843bf2a'
            ]) /
    ] /,
    / manifest / 3:h'a50101020103585fa202818141000458568614a40150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248
202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654321
00e1987d0010f020f0958258613a115781b687474703a2f2f6578616d706c652e636f6
d2f66696c652e62696e1502030f0a4382030f' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:h'a202818141000458568614a40150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820258200011223
3445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f0
20f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  152</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a1035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0358248202582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0958258613a115781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a4382
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  301</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584039383765656338356661
393966643331643333323338316239383130663930623035633265306434
66323834613666343231313230376564303066666637353058404931df82
e153bf1e3af5a59800216d8a47c33a37839e7d63d9f526fd369aa8359daa
e18f7619c959123e7f7f928ee92a9893afedd35d06a936d6ed3d5843bf2a
035894a50101020103585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f0958258613a115781b687474703a
2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a438203
0f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields" title="Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840373
5363835353739613833626162643731656338656632326661343961633837336637386
13730386134336136373465373832616433306236353938643137615840faca70796c3
19ce6dae69690a64ced3ab91b9bb7f3e9a5004122d629d2816216a870448424ce4410d
658b80215185e32d8ec6feb15c7275d64437c36418463e4' / [
        h'd28443a10126a05844820258403735363835353739613833626162643731
6563386566323266613439616338373366373861373038613433613637346537383261
6433306236353938643137615840faca70796c319ce6dae69690a64ced3ab91b9bb7f3
e9a5004122d629d2816216a870448424ce4410d658b80215185e32d8ec6feb15c7275d
64437c36418463e4' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584037353638353537396138336261626437
3165633865663232666134396163383733663738613730386134336136373465373832
61643330623635393864313761' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3735363835353739613833626162643
7316563386566323266613439616338373366373861373038613433613637346537383
261643330623635393864313761'
                ] /,
                / signature / h'faca70796c319ce6dae69690a64ced3ab91b9b
b7f3e9a5004122d629d2816216a870448424ce4410d658b80215185e32d8ec6feb15c7
275d64437c36418463e4'
            ]) /
    ] /,
    / manifest / 3:h'a70101020203585fa202818141000458568614a40150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248
202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654321
00e1987d0010f020f09820258203ee96dc79641970ae46b929ccf0b72ba9536dd84602
0dbdc9f949d84ea0e18d20a4382030f0c438217020d8202582023f48b2e2838650f43c
144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:h'a202818141000458568614a40150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820258200011223
3445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f0
20f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / install / 9:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
        ],
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'821702' / [
            / directive-run / 23,2
        ] /,
        / text / 13:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'23f48b2e2838650f43c144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8'
        ],
    } /,
    / install / 9:h'8613a1157832687474703a2f2f6578616d706c652e636f6d2f
766572792f6c6f6e672f706174682f746f2f66696c652f66696c652e62696e1502030f
' / [
        / directive-set-parameters / 19,{
            / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
        } ,
        / directive-fetch / 21,2 ,
        / condition-image-match / 3,15
    ] /,
    / text / 13:h'a1814100a2036761726d2e636f6d0578525468697320636f6d70
6f6e656e7420697320612064656d6f6e7374726174696f6e2e20546865206469676573
7420697320612073616d706c65207061747465726e2c206e6f742061207265616c206f
6e652e' / {
        [h'00']:{
                / vendor-domain / 3:'arm.com',
                / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
            }
    } /,
}
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  191</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a10358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0358248202582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09820258203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d8202582023f48b2e2838650f43c144234aee18401ffe3cce47
33b23881c3a8ae2d2b66e8
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  340</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584037353638353537396138
336261626437316563386566323266613439616338373366373861373038
6134336136373465373832616433306236353938643137615840faca7079
6c319ce6dae69690a64ced3ab91b9bb7f3e9a5004122d629d2816216a870
448424ce4410d658b80215185e32d8ec6feb15c7275d64437c36418463e4
0358bba70101020203585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f09820258203ee96dc79641970ae4
6b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c43
8217020d8202582023f48b2e2838650f43c144234aee18401ffe3cce4733
b23881c3a8ae2d2b66e8
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  923</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a402589281588fd28443a10126a058448202584037353638353537396138
336261626437316563386566323266613439616338373366373861373038
6134336136373465373832616433306236353938643137615840faca7079
6c319ce6dae69690a64ced3ab91b9bb7f3e9a5004122d629d2816216a870
448424ce4410d658b80215185e32d8ec6feb15c7275d64437c36418463e4
0358bba70101020203585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f09820258203ee96dc79641970ae4
6b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c43
8217020d8202582023f48b2e2838650f43c144234aee18401ffe3cce4733
b23881c3a8ae2d2b66e809583c8613a1157832687474703a2f2f6578616d
706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c65
2f66696c652e62696e1502030f0d590204a20179019d2323204578616d70
6c6520323a2053696d756c74616e656f757320446f776e6c6f61642c2049
6e7374616c6c6174696f6e2c2053656375726520426f6f742c2053657665
726564204669656c64730a0a2020202054686973206578616d706c652063
6f766572732074686520666f6c6c6f77696e672074656d706c617465733a
0a202020200a202020202a20436f6d7061746962696c6974792043686563
6b20287b7b74656d706c6174652d636f6d7061746962696c6974792d6368
65636b7d7d290a202020202a2053656375726520426f6f7420287b7b7465
6d706c6174652d7365637572652d626f6f747d7d290a202020202a204669
726d7761726520446f776e6c6f616420287b7b6669726d776172652d646f
776e6c6f61642d74656d706c6174657d7d290a202020200a202020205468
6973206578616d706c6520616c736f2064656d6f6e737472617465732073
6576657261626c6520656c656d656e747320287b7b6f76722d7365766572
61626c657d7d292c20616e64207465787420287b7b6d616e69666573742d
6469676573742d746578747d7d292e814100a2036761726d2e636f6d0578
525468697320636f6d706f6e656e7420697320612064656d6f6e73747261
74696f6e2e205468652064696765737420697320612073616d706c652070
61747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images" title="Example 3: A/B images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840616
5306331656136383963393830306138343335353066333837393662366664626435326
1306337386265356432363031316438653738346461343364343763584010222ddbce4
e82a85f6ec7b72db34d7c5be8d2e822e4b2d099a4cf1d08aa2174c56c2e93bf20c785b
ca298900208d92d352faf86e6cddc902a726bbc443c21ff' / [
        h'd28443a10126a05844820258406165306331656136383963393830306138
3433353530663338373936623666646264353261306337386265356432363031316438
653738346461343364343763584010222ddbce4e82a85f6ec7b72db34d7c5be8d2e822
e4b2d099a4cf1d08aa2174c56c2e93bf20c785bca298900208d92d352faf86e6cddc90
2a726bbc443c21ff' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584061653063316561363839633938303061
3834333535306633383739366236666462643532613063373862653564323630313164
38653738346461343364343763' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'6165306331656136383963393830306
1383433353530663338373936623666646264353261306337386265356432363031316
438653738346461343364343763'
                ] /,
                / signature / h'10222ddbce4e82a85f6ec7b72db34d7c5be8d2
e822e4b2d099a4cf1d08aa2174c56c2e93bf20c785bca298900208d92d352faf86e6cd
dc902a726bbc443c21ff'
            ]) /
    ] /,
    / manifest / 3:h'a5010102030358aaa202818141000458a18814a20150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f82583
68614a105198400050514a20358248202582000112233445566778899aabbccddeeff0
123456789abcdeffedcba98765432100e1987d0583a8614a1051a00084400050514a20
35824820258200123456789abcdeffedcba987654321000112233445566778899aabbc
cddeeff0e1a00012c22010f020f095861860f82582a8613a105198400050513a115781
c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051
a00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c653
22e62696e1502030f0a4382030f' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a202818141000458a18814a20150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258368614a10519840
0050514a20358248202582000112233445566778899aabbccddeeff0123456789abcde
ffedcba98765432100e1987d0583a8614a1051a00084400050514a2035824820258200
123456789abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a000
12c22010f020f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8814a20150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258368614a1051984000505
14a20358248202582000112233445566778899aabbccddeeff0123456789abcdeffedc
ba98765432100e1987d0583a8614a1051a00084400050514a203582482025820012345
6789abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a00012c22
010f020f' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    h'8614a105198400050514a203582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0' / [
                        / directive-override-parameters / 20,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200011223344556
6778899aabbccddeeff0123456789abcdeffedcba9876543210' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                            ] /,
                            / image-size / 14:34768,
                        }
                    ] / ,
                    h'8614a1051a00084400050514a20358248202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a00012c22'
/ [
                        / directive-override-parameters / 20,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200123456789abc
deffedcba987654321000112233445566778899aabbccddeeff' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                            ] /,
                            / image-size / 14:76834,
                        }
                    ] /
                ] ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / install / 9:h'860f82582a8613a105198400050513a115781c68747470
3a2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a00084400
050513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f' / [
            / directive-try-each / 15,[
                h'8613a105198400050513a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65312e62696e' / [
                    / directive-set-parameters / 19,{
                        / offset / 5:33792,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ] / ,
                h'8613a1051a00084400050513a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e' / [
                    / directive-set-parameters / 19,{
                        / offset / 5:541696,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ] /
            ] ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  288</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a10359011ba5010102030358aaa202818141000458a18814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258368614a105198400050514a20358248202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d058
3a8614a1051a00084400050514a2035824820258200123456789abcdeffe
dcba987654321000112233445566778899aabbccddeeff0e1a00012c2201
0f020f095861860f82582a8613a105198400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a
00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  437</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584061653063316561363839
633938303061383433353530663338373936623666646264353261306337
386265356432363031316438653738346461343364343763584010222ddb
ce4e82a85f6ec7b72db34d7c5be8d2e822e4b2d099a4cf1d08aa2174c56c
2e93bf20c785bca298900208d92d352faf86e6cddc902a726bbc443c21ff
0359011ba5010102030358aaa202818141000458a18814a20150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0f8258368614a105198400050514a2035824820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583a
8614a1051a00084400050514a2035824820258200123456789abcdeffedc
ba987654321000112233445566778899aabbccddeeff0e1a00012c22010f
020f095861860f82582a8613a105198400050513a115781c687474703a2f
2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a00
084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f66
696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load &amp; Decompress (<xref target="template-load-decompress"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840346
2346337633863306664613736633963393539316139646231363039313865326233633
93661353862306135653439383466643465386639333539613932385840d7063361f65
3d57e63691e1bd9c856058c773b94e488bff58d599c45277788e90eb92fbef666f584e
8d35b3b20ceef50a69b94dcff12beee92e426a06ea31320' / [
        h'd28443a10126a05844820258403462346337633863306664613736633963
3935393161396462313630393138653262336339366135386230613565343938346664
3465386639333539613932385840d7063361f653d57e63691e1bd9c856058c773b94e4
88bff58d599c45277788e90eb92fbef666f584e8d35b3b20ceef50a69b94dcff12beee
92e426a06ea31320' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584034623463376338633066646137366339
6339353931613964623136303931386532623363393661353862306135653439383466
64346538663933353961393238' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3462346337633863306664613736633
9633935393161396462313630393138653262336339366135386230613565343938346
664346538663933353961393238'
                ] /,
                / signature / h'd7063361f653d57e63691e1bd9c856058c773b
94e488bff58d599c45277788e90eb92fbef666f584e8d35b3b20ceef50a69b94dcff12
beee92e426a06ea31320'
            ]) /
    ] /,
    / manifest / 3:h'a801010204035867a20283814100814102814101045858880
c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2
d51f2ab450358248202582000112233445566778899aabbccddeeff0123456789abcde
ffedcba98765432100e1987d0010f020f085827880c0113a115781b687474703a2f2f6
578616d706c652e636f6d2f66696c652e62696e1502030f094b880c0013a1160116020
30f0a45840c00030f0b583a880c0213a4035824820258200123456789abcdeffedcba9
87654321000112233445566778899aabbccddeeff0e1a00012c22130116001602030f0
c45840c021702' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:h'a20283814100814102814101045858880c0014a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d0010f020f' / {
            / components / 2:[
                [h'00'] ,
                [h'02'] ,
                [h'01']
            ],
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / payload-fetch / 8:h'880c0113a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e1502030f' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / install / 9:h'880c0013a116011602030f' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 22:1 / [h'02'] /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'840c00030f' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15
        ] /,
        / load / 11:h'880c0213a4035824820258200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c22130116001602030f'
/ [
            / directive-set-component-index / 12,2 ,
            / directive-set-parameters / 19,{
                / image-digest / 3:h'820258200123456789abcdeffedcba987
654321000112233445566778899aabbccddeeff' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                ] /,
                / image-size / 14:76834,
                / source-component / 22:0 / [h'00'] /,
                / compression-info / 19:1 / "gzip" /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'840c021702' / [
            / directive-set-component-index / 12,2 ,
            / directive-run / 23,2
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  245</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a10358f1a801010204035867a20283814100814102814101045858880c00
14a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48
bf429b2d51f2ab450358248202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d0010f020f085827880c
0113a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e
62696e1502030f094b880c0013a116011602030f0a45840c00030f0b583a
880c0213a4035824820258200123456789abcdeffedcba98765432100011
2233445566778899aabbccddeeff0e1a00012c22130116001602030f0c45
840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  394</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584034623463376338633066
646137366339633935393161396462313630393138653262336339366135
3862306135653439383466643465386639333539613932385840d7063361
f653d57e63691e1bd9c856058c773b94e488bff58d599c45277788e90eb9
2fbef666f584e8d35b3b20ceef50a69b94dcff12beee92e426a06ea31320
0358f1a801010204035867a20283814100814102814101045858880c0014
a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf
429b2d51f2ab450358248202582000112233445566778899aabbccddeeff
0123456789abcdeffedcba98765432100e1987d0010f020f085827880c01
13a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62
696e1502030f094b880c0013a116011602030f0a45840c00030f0b583a88
0c0213a4035824820258200123456789abcdeffedcba9876543210001122
33445566778899aabbccddeeff0e1a00012c22130116001602030f0c4584
0c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images" title="Example 5: Two Images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840323
1306231323835306332333930393164386538326330653965393130363632623638616
33834323435386136343138653333663637303165643538333432635840b5b8cb30c2b
bb646c4d32426d72768668d6d6af54c26ac46c4020ca37ada47b9468340b4d0b2ddd15
db824a7e6b0bc233e753940dfb7131fa145ddc456da3cf6' / [
        h'd28443a10126a05844820258403231306231323835306332333930393164
3865383263306539653931303636326236386163383432343538613634313865333366
3637303165643538333432635840b5b8cb30c2bbb646c4d32426d72768668d6d6af54c
26ac46c4020ca37ada47b9468340b4d0b2ddd15db824a7e6b0bc233e753940dfb7131f
a145ddc456da3cf6' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584032313062313238353063323339303931
6438653832633065396539313036363262363861633834323435386136343138653333
66363730316564353833343263' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3231306231323835306332333930393
1643865383263306539653931303636326236386163383432343538613634313865333
366363730316564353833343263'
                ] /,
                / signature / h'b5b8cb30c2bbb646c4d32426d72768668d6d6a
f54c26ac46c4020ca37ada47b9468340b4d0b2ddd15db824a7e6b0bc233e753940dfb7
131fa145ddc456da3cf6'
            ]) /
    ] /,
    / manifest / 3:h'a601010205035895a202828141008141010458898c0c0014a
40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2a
b450358248202582000112233445566778899aabbccddeeff0123456789abcdeffedcb
a98765432100e1987d0010f020f0c0114a2035824820258200123456789abcdeffedcb
a987654321000112233445566778899aabbccddeeff0e1a00012c2209584f900c0013a
115781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030
f0c0113a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696
e1502030f0a49880c00030f0c01030f0c47860c0017021702' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a202828141008141010458898c0c0014a40150fa6b4a53d
5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025
82000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1
987d0010f020f0c0114a2035824820258200123456789abcdeffedcba9876543210001
12233445566778899aabbccddeeff0e1a00012c22' / {
            / components / 2:[
                [h'00'] ,
                [h'01']
            ],
            / common-sequence / 4:h'8c0c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0c0114a2035824820258200123456789abcdeffedcba987654321000112233445566
778899aabbccddeeff0e1a00012c22' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:h'820258200123456789abcdeffedcb
a987654321000112233445566778899aabbccddeeff' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] /,
                    / image-size / 14:76834,
                }
            ] /,
        } /,
        / install / 9:h'900c0013a115781c687474703a2f2f6578616d706c652e
636f6d2f66696c65312e62696e1502030f0c0113a115781c687474703a2f2f6578616d
706c652e636f6d2f66696c65322e62696e1502030f' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file1.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file2.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'880c00030f0c01030f' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'860c0017021702' / [
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,2 ,
            / directive-run / 23,2
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  264</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a103590103a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
820258200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a115
781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f0a49880c00030f0c01030f0c47860c0017021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  413</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584032313062313238353063
323339303931643865383263306539653931303636326236386163383432
3435386136343138653333663637303165643538333432635840b5b8cb30
c2bbb646c4d32426d72768668d6d6af54c26ac46c4020ca37ada47b94683
40b4d0b2ddd15db824a7e6b0bc233e753940dfb7131fa145ddc456da3cf6
03590103a601010205035895a202828141008141010458898c0c0014a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f0c0114a203582482
0258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a11578
1c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e15
02030f0a49880c00030f0c01030f0c47860c0017021702
]]></artwork></figure>

</section>
</section>
<section numbered="no" anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of <xref target="severable-fields">Severable Elements</xref></t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section numbered="no" anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>OPTIONAL</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>RECOMMENDED</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>RECOMMENDED</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>RECOMMENDED</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>RECOMMENDED</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>OPTIONAL</c>
      <c>Version Match</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>OPTIONAL</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>OPTIONAL</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIADe7DF8AA+y9/ZYbx3Uv+j+eoi+1VsSxAYikKEti4qwzHJLR3IiiDoey
ksheSg/QM9Mm0A13N4aEKeZZzrOcJ7v7u3ZVNTBDWfGJz42Xl81Bd9fnrl37
87dns9lkqIdV9ag4Lk7aZlH3VfG4bspuV7w4/2O1GIqX1aar+qoZyqFum+Lu
yeMXL49m52VfLYuzqqvLVf1nfvSs7dblUFy0XTFcVcVZezG8Kbuq+G6zLIeq
pwenzVB1TTUU7UXx6qpuLvvi7tl3p6+OiudlU19U/TApz8+76vpRgR1pP/BG
eGHZLppyDUNeduXFMKur4WLWb+thtpY3Zve+nCygy8u22z0q+mE5mdSb7lEx
dNt+eHDv3pf3HkxgYOUjmMBi29XDbvKm7V5fdu1284g6m7yudvDT8pENePYE
O5tM+qFslj+Wq7aBAeyqfrKpH02KortYVMt+2K3k16IY2oX7Z90sYQn1h77t
hq666O3v3Tr6c+jqhb28aNdr+Nae1s2qbkI31dthtqph0tDIebuC12btr34N
T2CZ1uVmA2vsxvHjqrqu8KWHk0m5Ha7aDkY/g2f4n7qBB4/nxfO2Kxv5jVf6
cVc1y7KJnrTdJaw37z2QT7cuvq7X9VAt5Xm1LuuVfTqnT/9H2a3nMKFJ0ulX
8+JVv7hqL6qmvox6/qpsGqCd7Okte7+iz+eDfX5gBI/r7vVVu/pz3H/VvE6f
xH0/68ptg613xRlQTtw9fD0/l6//R18P8wt7e76s0kH887z4NyCv86qLF+Gf
26pJn8SDOG3gJMZ9v4aP5n+Wj/5HjS9A75NJQ8e0vq6Qbl8+O3l4/8ED+ecX
9z/Tf3765Re/eTSBg9Nc+PdPZ0/m4cCV3eIK1nwxbLuRp/Zp28zW7bJaRa8M
VbXJGoCOP//yUx3D/S8/u6cj+/RL/fXzBw++0F8/f/i5Nvp6u7iquvLNbgZn
8YuHn39xXvf47Kun//KIFkb43B080Sv8+Q79bKcA/hNtxp3v69f1plrWJb+I
TOxR8eDeg3vcXNldVnBIr4Zh0z/65BNY7Df6wRw25xP86xPq7EfoDL45e/n0
JB4K/lLcvahXVcFLdfTXGBP2+iP1+qP0Ch8//fpZPLanb4E3DuU5jA1oCE5X
85r+EC5/Fz74q4w2jONH5Lw6jh95HNDQyYtnydBPgGPCfSQX2LPajRpf/qsM
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
Wq+KqsvI14rEzfWYipWf1xWvaqs16/x5/WZNP+fEZv0+Z8RmrV7RBNvMwUKH
GmzAQocaDL9ih+qtPSkY2kw8KRHb7DopFduMOZCMf/zxB+ZfOMC7JSgvLeZY
Eylq07rsC5QcLs+GIItqUXzFk85SOgbKp8rzjmVZYBNxa3cwE3mCi8l9H/Gb
sHYwT8b1dBWLBKaUtzAQGSzrstxj5hB5e8PVIks6m8ZqjjTqddZXTFMicg2v
s8Tc+ZiOD4/OKKfltTl2lgYmxdyjBA+YsmI0Ojj+5uSJ9uz5yQ/7L461745/
oqfs9OSbR/sXx/unB6ffHNz++s3Zqe3D928OD8Xnm+NHB9/oN8HNycH+999f
7F//x0+//Mfhy28en471Hw4O2eEvP52t/v6V7v/yzdX89ttny+ujxy/e7l5O
//708vn+k8P9/bPj2eIYb0T49Vf/28sffpvG7pPF1Ztff33sPV+9Yc++mkxX
P/4YXkZv9pcv0uS716v08Kfj326+e7JaPnn096n/9MB68tXNfP/lKn179dy0
Tu3Vd9Mf+bCOnxxVB0Xk8aKSLeN6PZlNQ8oWqqbPLtzCkuYIr8Hey4PHJ4cK
8h6+vjm++enRd4v/OHn7i364//1PJ+Lz0f734RGg6/jy2+Dgm1/tx7/++ubs
px/Cn+brt8G3S+fX6e7xhE3e7l7Zyx9m85O/T26+091Ht9ePJ/tXB6fh4S+T
4O1zw37z4iJ6m6Tf3jx8PDkdv45Wb58+PlvMLr7+Whl/qVs0fJ57nQ+F3/zG
kxZpIterWPwleWOuusUqlrm1C5d5yptzoxiUi6VIDkn6+By4MwH6k9lws0y6
PKmNgkyeZrIG8DrNM/4VSL2QRb1I6nSTDvKHiDL+XaNERlkGIxIhalAwylcR
uYb55cLRM1CSaotJ9YMXwzxmSrFyAPHv2tltWoZVDiHmhQgSE3FVyjMFhtKm
2ksxKPW3297+XTPU307bu6O8aoZ3gS4rhL9ruiir5+XLxg5/mRWsNXI6yqBt
Uy6CKcHECqHpezxnVawdLBYrkadKMoiS318hsxjeYVYoynVE20irKb+sSFwO
8OW7d7IQ35SS7/m9EO/f34eKSquFCpRPClRseI4F2cmKZ56lo+Gp5FOhvMme
8pw9jPupd7UG19yuZu5d3vOMseclkenZthUYumE6gT6GL56pm/BXtzCFmaVb
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
Ung/Svj7WgWnjtJr1Jr/B9q1RPFQxwIA

-->

</rfc>

