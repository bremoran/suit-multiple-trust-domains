<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-04" category="std">

  <front>
    <title abbrev="SUIT CBOR Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2020" month="March" day="09"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest. Firmware updates and trusted boot
both tend to use sequences of common operations, so the manifest encodes
those sequences of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/>.</t>

<t>Most Update and Trusted Execution operations are composed of the same small set of fundamental operations, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these fundamental operations in different orders and changing the parameters they use, a great many use cases can be supported by the same encoding. The SUIT manifest uses this observation to heavily optimize update metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>The following terminology is used throughout this document.</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a device’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers four aspects of firmware update: the background that has informed this specification, the behavior of a device consuming a manifest, the process of creating a manifest, and the structure of the manifest itself.</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="interpreter-behavior"/> describes what actions a manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a manifest.</t>
  <t><xref target="manifest-structure"/> specifies the content of the manifest.</t>
</list></t>

<t>For information about firmware update in general and the background of the suit manifest, see <xref target="background"/>.
To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="manifest-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="manifest-structure"/>.</t>

</section>
<section anchor="background" title="Background">

<t>This section describes the logistical challenges, device constraints, use cases, and design principles that informed the structure of the manifest. For the security considerations of the manifest, see <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints on IoT devices create a broad set of use-case requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple processors may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>mesh networks may require multicast distribution.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="update-workflow-model" title="Update Workflow Model">

<t>There are several fundamental assumptions that inform the model of the firmware update workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the secure boot workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further 3 steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader MAY add its own authentication, e.g. a MAC, to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

<section anchor="pre-authentication-compatibility-checks" title="Pre-Authentication Compatibility Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a device receives an incompatible manifest.</t>

<t>If a device:</t>

<t><list style="numbers">
  <t>expects to receive many incompatible manifests.</t>
  <t>expects to receive few manifests with failing signatures–for example if it is behind a gateway that checks signatures.</t>
  <t>has a power budget that makes signature verification undesirable.</t>
</list></t>

<t>Then, the device MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification. The guidelines in <xref target="creating-manifests">Creating Manifests</xref> require that the common section contain the applicability checks, so this section is sufficient for applicability verification. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST result in an error.</t>

</section>
</section>
<section anchor="suit-manifest-goals" title="SUIT Manifest Goals">

<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="symbols">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-summary" title="SUIT Manifest Design Summary">
<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Interpreter Behavior">

<t>This section describes the behavior of the manifest interpreter. This section focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the interpreter: encoding version detection , rollback protection, and authenticity verification are chief among these (see <xref target="interpreter-setup"/>).</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid manifest, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version AND it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and MAY include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported component ID encountered.</t>
  <t>Payload not available (update interpreter).</t>
  <t>Dependency not available (update interpreter).</t>
  <t>Application crashed when executed (bootloader interpreter).</t>
  <t>Watchdog timeout occurred (bootloader interpreter).</t>
  <t>Dependency or Payload verification failed (bootloader interpreter).</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported <xref target="interpreter-parameters">parameters</xref>. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple devices MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="abstract-machine-description" title="Abstract Machine Description">

<t>The byte code that forms the bulk of the manifest is processed by an interpreter. This interpreter can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands. Certain commands also affect the machine’s behavior.</t>

<t>Every command that modifies system state targets a specific component. Components are units of code or data that can be targeted by an update. They are identified by Component identifiers, arrays of binary-strings–effectively a binary path. Each component has a corresponding set of configuration, Parameters. Parameters are used as the inputs to commands.</t>

<section anchor="interpreter-parameters" title="Parameters">

<t>Some parameters are REQUIRED to implement. These parameters allow a device to perform core functions.</t>

<t><list style="symbols">
  <t>Vendor ID.</t>
  <t>Class ID.</t>
  <t>Image Digest.</t>
</list></t>

<t>Some parameters are RECOMMENDED to implement. These parameters are needed for most use-cases.</t>

<t><list style="symbols">
  <t>Image Size.</t>
  <t>URI.</t>
</list></t>

<t>Other parameters are OPTIONAL to implement. These parameters allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Strict Order.</t>
  <t>Soft Failure.</t>
  <t>Device ID.</t>
  <t>Encryption Info.</t>
  <t>Unpack Info.</t>
  <t>Source Component.</t>
  <t>URI List.</t>
  <t>Custom Parameters.</t>
</list></t>

</section>
<section anchor="commands" title="Commands">

<t>Commands define the behavior of a device. The commands are divided into two groups: those that modify state (directives) and those that perform tests (conditions). There are also several Control Flow operations.</t>

<t>Some commands are REQUIRED to implement. These commands allow a device to perform core functions</t>

<t><list style="symbols">
  <t>Check Vendor Identifier (cvid).</t>
  <t>Check Class Identifier (ccid).</t>
  <t>Verify Image (cimg).</t>
  <t>Set Current Component (setc).</t>
  <t>Override Parameters (ovrp).</t>
</list></t>

<t>NOTE: on systems that support only a single component, Set Current Component has no effect.</t>

<t>Some commands are RECOMMENDED to implement. These commands are needed for most use-cases</t>

<t><list style="symbols">
  <t>Set Current Dependency (setd).</t>
  <t>Set Parameters (setp).</t>
  <t>Process Dependency (pdep).</t>
  <t>Run (run).</t>
  <t>Fetch (getc).</t>
</list></t>

<t>Other commands are OPTIONAL to implement. These commands allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Use Before (ubf).</t>
  <t>Check Component Offset  (cco).</t>
  <t>Check Device Identifier (cdid).</t>
  <t>Check Image Not Match (nimg).</t>
  <t>Check Minimum Battery (minb).</t>
  <t>Check Update Authorized (auth).</t>
  <t>Check Version (cver).</t>
  <t>Abort (abrt).</t>
  <t>Try Each (try).</t>
  <t>Copy (copy).</t>
  <t>Swap (swap).</t>
  <t>Wait For Event (wfe).</t>
  <t>Run Sequence (srun) mandatory component set.</t>
  <t>Run with Arguments (arun).</t>
</list></t>

</section>
<section anchor="command-behavior" title="Command Behavior">

<t>The following table describes the behavior of each command. “params”
represents the parameters for the current component or dependency.</t>

<texttable>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <c>cvid</c>
      <c>binary-match(component, params[vendor-id])</c>
      <c>ccid</c>
      <c>binary-match(component, params[class-id])</c>
      <c>cimg</c>
      <c>binary-match(digest(component), params[digest])</c>
      <c>setc</c>
      <c>component := components[arg]</c>
      <c>ovrp</c>
      <c>params[k] := v for k,v in arg</c>
      <c>setd</c>
      <c>dependency := dependencies[arg]</c>
      <c>setp</c>
      <c>params[k] := v if not k in params for k,v in arg</c>
      <c>pdep</c>
      <c>exec(dependency[common]); exec(dependency[current-segment])</c>
      <c>run</c>
      <c>run(component)</c>
      <c>getc</c>
      <c>store(component, fetch(params[uri]))</c>
      <c>ubf</c>
      <c>assert(now() &lt; arg)</c>
      <c>cco</c>
      <c>assert(offsetof(component) == arg)</c>
      <c>cdid</c>
      <c>binary-match(component, params[device-id])</c>
      <c>nimg</c>
      <c>not binary-match(digest(component), params[digest])</c>
      <c>minb</c>
      <c>assert(battery &gt;= arg)</c>
      <c>auth</c>
      <c>assert(isAuthorized())</c>
      <c>cver</c>
      <c>assert(version_check(component, arg))</c>
      <c>abrt</c>
      <c>assert(0)</c>
      <c>try</c>
      <c>break if exec(seq) is not error for seq in arg</c>
      <c>copy</c>
      <c>store(component, params[src-component])</c>
      <c>swap</c>
      <c>swap(component, params[src-component])</c>
      <c>wfe</c>
      <c>until event(arg), wait</c>
      <c>srun</c>
      <c>exec(arg)</c>
      <c>arun</c>
      <c>run(component, arg)</c>
</texttable>

</section>
</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

</section>
<section anchor="parallel-processing-interpreter" title="Parallel Processing Interpreter">

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence must declare a single target component. Set Component Index is not permitted inside this sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures is covered in <xref target="RFC8152"/> and the calculation of cryptographic values is beyond the scope of this document.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways, however several templates are provided here to cover common use-cases. Many of these templates can be aggregated to produce more complex behavior.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: Digest should always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</t>

<section anchor="manifest-source-material" title="Manifest Source Material">

<t>When a manifest is constructed from a descriptive document, the descriptive document SHOULD be included in the severable text section. This section MAY be pruned from the manifest prior to distribution to a device. The inclusion of text source material enables several use-cases on unconstrained intermediate systems, where small manifest size, low parser complexity, and pull parsing are not required.</t>

<t>An unconstrained system that makes decisions based on the manifest can use the source material instead so that it does not need to execute the manifest.</t>

<t>An unconstrained system that presents data to a user can do so according to typical usage patterns without first executing the manifest, and can trust that information with the same level of confidence as the manifest itself.</t>

<t>A verifier can be constructed to emulate execution the manifest and compare the results of that execution to the source material, providing a check that the manifest performs its stated objectives and that the manifest does not exceed the capabilities of the target device.</t>

</section>
<section anchor="required-template-compatibility-check" title="Required Template: Compatibility Check">

<t>The compatibility check ensures that devices only install compatible images.</t>

<t>Common:
Set Current Component
Check Vendor Identifier
Check Class Identifier</t>

<t>All manifests MUST contain the compatibility check template, except as outlined below.</t>

<t>If a device class has a unique trust anchor, and every element in its trust chain is unique–different from every element in any other device class, then it MAY include the compatibility check.</t>

<t>If a manifest includes a dependency that performs a compatibility check, then the dependent manifest MAY include the compatibility check.</t>

<t>The compatibility check template contains a data dependency: Vendor Identifier and Class Identifier MUST be set prior to executing the template. One example of the full template is included below, however Parameters may be set within a Try-Each block as well. They may also be inherited from a dependent manifest.</t>

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Vendor ID.</t>
          <t>Class ID.</t>
        </list></t>
      <t>Check Vendor Identifier.</t>
      <t>Check Class Identifier.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-xip-secure-boot" title="Use Case Template: XIP Secure Boot">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest.</t>
          <t>Size.</t>
        </list></t>
    </list></t>
  <t>Run:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Check Image Match.</t>
      <t>Directive Run.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-firmware-download" title="Use Case Template: Firmware Download">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest.</t>
          <t>Size.</t>
        </list></t>
    </list></t>
  <t>Install:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI.</t>
        </list></t>
      <t>Fetch.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-from-external-storage" title="Use Case Template: Load from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index.</t>
        </list></t>
      <t>Copy.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-decompress-from-external-storage" title="Use Case Template Load &amp; Decompress from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index.</t>
          <t>Compression Info.</t>
        </list></t>
      <t>Copy.</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-dependency" title="Use Case Template: Dependency">

<t><list style="symbols">
  <t>Dependency Resolution:
  <list style="symbols">
      <t>Set Current Dependency.</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI.</t>
        </list></t>
      <t>Fetch.</t>
      <t>Check Image Match.</t>
      <t>Process Dependency.</t>
    </list></t>
  <t>Validate:
  <list style="symbols">
      <t>Set Current Dependency.</t>
      <t>Check Image Match.</t>
      <t>Process Dependency.</t>
    </list></t>
</list></t>

<t>For any other section that the dependency has, the dependent MUST invoke Process Dependency.</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">

<t>The manifest is enveloped in a CBOR map containing:</t>

<t><list style="numbers">
  <t>Authentication delegation chain(s)</t>
  <t>The authentication wrapper (a list of COSE sign/MAC objects)</t>
  <t>The manifest (a map)
  <list style="numbers">
      <t>Critical Information</t>
      <t>Information shared by all command sequences
      <list style="numbers">
          <t>List of dependencies</t>
          <t>List of payloads</t>
          <t>List of payloads in dependencies</t>
          <t>Common list of conditions, directives</t>
        </list></t>
      <t>Reference URI</t>
      <t>Dependency resolution Reference or conditions/directives</t>
      <t>Payload fetch Reference or conditions/directives</t>
      <t>Installation Reference or conditions/directives</t>
      <t>Verification conditions/directives</t>
      <t>Load conditions/directives</t>
      <t>Run conditions/directives</t>
      <t>Text / Reference</t>
      <t>COSWID / Reference</t>
    </list></t>
  <t>Dependency resolution conditions/directives</t>
  <t>Payload fetch conditions/directives</t>
  <t>Installation conditions/directives</t>
  <t>Text</t>
  <t>COSWID</t>
  <t>Inline Payload(s)</t>
</list></t>

<t>All elements in the outer map are wrapped in bstr.</t>

<figure><artwork><![CDATA[
+--------------------+
| Manifest Envelope  |
+--------------------+
| Delegation CWTs    |
| COSE Envelopes     |
| Manifest --------------------> +-----------------------+
| Severable Elements |           | Manifest (bstr)       |
+--------------------+           +-----------------------+
                                 | Structure Version     |
                                 | Sequence Number       |
+-----------------------+ <------- Common Info           |
| Common Info (bstr)    |        | Reference URI         |
+-----------------------+        | Installation Commands ---+
| Dependencies          |        | Invocation Commands -----+
| Components IDs        |        | Protected Elements    |  |
| Component References  |        +-----------------------+  |
| Common Commands --------+                                 |
+-----------------------+ |                                 |
                          +-> +-----------------------+ <---+
                              | Commands (bstr)       |
                              +-----------------------+
                              | List of ( pairs of (  |
                              |   * command ID code   |
                              |   * argument          |
                              | ))                    |
                              +-----------------------+
]]></artwork></figure>

<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

<section anchor="severable-elements" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences</t>

</section>
<section anchor="envelope" title="Envelope">

<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the envelope are contained in bstr objects. Wherever the manifest references an object in the envelope, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the envelope is below</t>

<figure><artwork><![CDATA[
SUIT_Envelope = {
    suit-delegation            => bstr .cbor SUIT_Delegation
    suit-authentication-wrapper
        => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    * $$SUIT_Severed_Fields,
}

SUIT_Delegation = [ + [ + CWT ] ]

SUIT_Authentication_Wrapper = [ + bstr .cbor SUIT_Authentication_Block ]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Severed_Fields //= ( suit-dependency-resolution =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-payload-fetch =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-install =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-text =>
    bstr .cbor SUIT_Text_Map)
$$SUIT_Severed_Fields //= (suit-coswid =>
    bstr .cbor concise-software-identity)
]]></artwork></figure>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The envelope MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest.</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the envelope contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted. This ensures that the manifest can be stored decrypted and that a recipient MAY convert the suit-manifest-encrypted element to a suit-manifest element.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the Recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the Recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => #6.32(tstr),
    * $$SUIT_Severable_Command_Sequences,
    * $$SUIT_Command_Sequences,
    * $$SUIT_Protected_Elements,
}

$$SUIT_Severable_Command_Sequences //= (suit-dependency-resolution =>
    SUIT_Severable_Command_Segment)
$$SUIT_Severable_Command_Segments //= (suit-payload-fetch =>
    SUIT_Severable_Command_Sequence)
$$SUIT_Severable_Command_Segments //= (suit-install =>
    SUIT_Severable_Command_Sequence)

SUIT_Severable_Command_Sequence =
    SUIT_Digest / bstr .cbor SUIT_Command_Sequence

$$SUIT_Command_Sequences //= ( suit-validate =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-load =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-run =>
    bstr .cbor SUIT_Command_Sequence )

$$SUIT_Protected_Elements //= ( suit-text => SUIT_Digest )
$$SUIT_Protected_Elements //= ( suit-coswid => SUIT_Digest )

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components
        => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope.</t>

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a device after installation.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text is a digest that uniquely identifies the content of the Text that is packaged in the SUIT_Envelope. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the SUIT_Envelope. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behavior of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>bstr</c>
      <c>Component / Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>2</c>
      <c>bstr</c>
      <c>Component / Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>3</c>
      <c>bstr</c>
      <c>Component / Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>4</c>
      <c>uint</c>
      <c>Component / Global</c>
      <c>Use Before</c>
      <c>POSIX timestamp</c>
      <c>5</c>
      <c>uint</c>
      <c>Component</c>
      <c>Component Offset</c>
      <c>Offset of the component</c>
      <c>12</c>
      <c>boolean</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>13</c>
      <c>boolean</c>
      <c>Command Segment</c>
      <c>Soft Failure</c>
      <c>Condition failures only terminate the current command segment.</c>
      <c>14</c>
      <c>uint</c>
      <c>Component / Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>18</c>
      <c>bstr</c>
      <c>Component / Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>19</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>The information required to decompress the image</c>
      <c>20</c>
      <c>bstr</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>The information required to unpack the image</c>
      <c>21</c>
      <c>tstr</c>
      <c>Component / Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>22</c>
      <c>uint</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>23</c>
      <c>bstr / nil</c>
      <c>Component</c>
      <c>Run Arguments</c>
      <c>An encoded set of arguments for Run</c>
      <c>24</c>
      <c>bstr</c>
      <c>Component / Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>25</c>
      <c>uint</c>
      <c>Global</c>
      <c>Minimum Battery</c>
      <c>A minimum battery level in mWh</c>
      <c>26</c>
      <c>int</c>
      <c>Component / Global</c>
      <c>Priority</c>
      <c>The priority of the update</c>
      <c>nint</c>
      <c>int / bstr / tstr</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametersoftfailure" title="SUIT_Parameter_Soft_Failure">

<t>When executing a command sequence inside SUIT_Directive_Try_Each and a condition failure occurs, the manifest processor aborts the sequence. If Soft Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Soft_Failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-vendor-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Events)


SUIT_Parameters //= (suit-parameter-uri-list
    => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition is a command code identifier, followed by Nil. Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or Nil</t>
</list></t>

<t>Argument blocks are defined for each type of directive.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behavior.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. Conditions never take arguments; conditions should test using parameters instead. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>REQUIRED</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>REQUIRED</c>
      <c>3</c>
      <c>Image Match</c>
      <c>REQUIRED</c>
      <c>4</c>
      <c>Use Before</c>
      <c>OPTIONAL</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>OPTIONAL</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>OPTIONAL</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>OPTIONAL</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>OPTIONAL</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c>OPTIONAL</c>
      <c>28</c>
      <c>Version</c>
      <c>OPTIONAL</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>OPTIONAL</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter, which must have already been set as a parameter, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]

SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        nil)
SUIT_Condition //= (suit-condition-minimum-battery,   nil)
SUIT_Condition //= (suit-condition-update-authorized, nil)
SUIT_Condition //= (suit-condition-version,           nil)
SUIT_Condition //= (suit-condition-component-offset,  nil)
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>REQUIRED if more than one component</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>REQUIRED if dependencies used</c>
      <c>14</c>
      <c>Abort</c>
      <c>OPTIONAL</c>
      <c>15</c>
      <c>Try Each</c>
      <c>OPTIONAL</c>
      <c>16</c>
      <c>Reserved</c>
      <c>N/A</c>
      <c>17</c>
      <c>Reserved</c>
      <c>N/A</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>OPTIONAL</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>OPTIONAL</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>REQUIRED</c>
      <c>21</c>
      <c>Fetch</c>
      <c>REQUIRED for Updater</c>
      <c>22</c>
      <c>Copy</c>
      <c>OPTIONAL</c>
      <c>23</c>
      <c>Run</c>
      <c>REQUIRED for Bootloader</c>
      <c>29</c>
      <c>Wait</c>
      <c>OPTIONAL</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>OPTIONAL</c>
      <c>32</c>
      <c>Swap</c>
      <c>OPTIONAL</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Soft_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Soft_Failure is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimization: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorization = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day
                                            ; (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorization = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day
                                            ; (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
<section anchor="suittextmap" title="SUIT_Text_Map">
<t>The SUIT_Text_Map contains all text descriptions needed for this manifest. The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Summary</ttcol>
      <c>1</c>
      <c>manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>2</c>
      <c>update-description</c>
      <c>Free text description of the update</c>
      <c>3</c>
      <c>vendor-name</c>
      <c>Free text vendor name</c>
      <c>4</c>
      <c>model-name</c>
      <c>Free text model name</c>
      <c>5</c>
      <c>vendor-domain</c>
      <c>The domain used to create the <xref target="creating-uuids">vendor-id</xref></c>
      <c>6</c>
      <c>model-info</c>
      <c>The information used to create the <xref target="creating-uuids">class-id</xref></c>
      <c>7</c>
      <c>component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>8</c>
      <c>json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>9</c>
      <c>yaml-source</c>
      <c>The yaml-formatted document that was used to create the manifest</c>
      <c>10</c>
      <c>version-dependencies</c>
      <c>List of component versions required by the manifest</c>
</texttable>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating Conditional Sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope = {
    suit-delegation            => bstr .cbor SUIT_Delegation
    suit-authentication-wrapper
        => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    * $$SUIT_Severed_Fields,
}

SUIT_Delegation = [ + [ + CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication_Wrapper = [ + bstr .cbor SUIT_Authentication_Block ]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Severed_Fields //= ( suit-dependency-resolution =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-payload-fetch =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-install =>
    bstr .cbor SUIT_Command_Sequence)
$$SUIT_Severed_Fields //= (suit-text =>
    bstr .cbor SUIT_Text_Map)
$$SUIT_Severed_Fields //= (suit-coswid =>
    bstr .cbor concise-software-identity)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => #6.32(tstr),
    * $$SUIT_Severable_Command_Sequences,
    * $$SUIT_Command_Sequences,
    * $$SUIT_Protected_Elements,
}

$$SUIT_Severable_Command_Sequences //= (suit-dependency-resolution =>
    SUIT_Severable_Command_Sequence)
$$SUIT_Severable_Command_Sequences //= (suit-payload-fetch =>
    SUIT_Severable_Command_Sequence)
$$SUIT_Severable_Command_Sequences //= (suit-install =>
    SUIT_Severable_Command_Sequence)

SUIT_Severable_Command_Sequence =
    SUIT_Digest / bstr .cbor SUIT_Command_Sequence

$$SUIT_Command_Sequences //= ( suit-validate =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-load =>
    bstr .cbor SUIT_Command_Sequence )
$$SUIT_Command_Sequences //= ( suit-run =>
    bstr .cbor SUIT_Command_Sequence )

$$SUIT_Protected_Elements //= ( suit-text => SUIT_Digest )
$$SUIT_Protected_Elements //= ( suit-coswid => SUIT_Digest )

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components
        => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        nil)
SUIT_Condition //= (suit-condition-minimum-battery,   nil)
SUIT_Condition //= (suit-condition-update-authorized, nil)
SUIT_Condition //= (suit-condition-version,           nil)
SUIT_Condition //= (suit-condition-component-offset,  nil)

SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-swap,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 nil)
SUIT_Directive //= (suit-directive-abort,                nil)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {SUIT_Text_Keys => tstr}

SUIT_Text_Keys /= suit-text-manifest-description
SUIT_Text_Keys /= suit-text-update-description
SUIT_Text_Keys /= suit-text-vendor-name
SUIT_Text_Keys /= suit-text-model-name
SUIT_Text_Keys /= suit-text-vendor-domain
SUIT_Text_Keys /= suit-text-model-info
SUIT_Text_Keys /= suit-text-component-description
SUIT_Text_Keys /= suit-text-manifest-json-source
SUIT_Text_Keys /= suit-text-manifest-yaml-source
SUIT_Text_Keys /= suit-text-version-dependencies

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

suit-manifest-encryption-info = 4
suit-manifest-encrypted       = 5

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-swap                     = 32

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-vendor-name           = 3
suit-text-model-name            = 4
suit-text-vendor-domain         = 5
suit-text-model-info            = 6
suit-text-component-description = 7
suit-text-manifest-json-source  = 8
suit-text-manifest-yaml-source  = 9
suit-text-version-dependencies  = 10
]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>Secure boot and compatibility check.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a058248202582064d8094
da3ef71c5971b7b84e7f4be1f56452c32fdde7bc1c70889112f1d5d9958407d637397e
12abdd41bc026a8e8a22f0f902a5b972e7786d570a37ac43c370b64a6946b0311f059c
a01d40f74d88d6fd7193baa36f5cf20aa57c46a0411a6b704' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582064d8094da3ef71c5971b7b84e7f4be1f
56452c32fdde7bc1c70889112f1d5d99' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'64d8094da3ef71c5971b7b84e7f4be1f56452c32fdde7bc1c70889112f1d5d99'
                ] /,
                / signature / h'7d637397e12abdd41bc026a8e8a22f0f902a5b
972e7786d570a37ac43c370b64a6946b0311f059ca01d40f74d88d6fd7193baa36f5cf
20aa57c46a0411a6b704'
            ])
    ] /,
    / manifest / 3:h'a50101020103585ea20244818141000458548614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f60a438203f60c438217f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:h'a20244818141000458548614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450382025820001122334
45566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f
6' / {
            / components / 2:h'81814100' / [
                [h'00']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'8217f6' / [
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  116</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035870a50101020103585ea20244818141000458548614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
45038202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d001f602f60a438203f60c438217f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  231</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a058248202582064d8094da3ef71c5971b7b84
e7f4be1f56452c32fdde7bc1c70889112f1d5d9958407d637397e12abdd4
1bc026a8e8a22f0f902a5b972e7786d570a37ac43c370b64a6946b0311f0
59ca01d40f74d88d6fd7193baa36f5cf20aa57c46a0411a6b704035870a5
0101020103585ea20244818141000458548614a40150fa6b4a53d5ad5fdf
be9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820258
2000112233445566778899aabbccddeeff0123456789abcdeffedcba9876
5432100e1987d001f602f60a438203f60c438217f6
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>Simultaneous download and installation of payload.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a0582482025820666b83f
f51628190387170489535aa9441656d8a24401de6458595c42cb0165d58405cb310acb
34f7ebb42acfffce430dbda94faa412900ce8e76650445e2c37e4cc132d8bb5f30ecf5
f8130270bbf8d159f6d36e1cdf97b64229910fdb447538af1' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820666b83ff51628190387170489535aa94
41656d8a24401de6458595c42cb0165d' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'666b83ff51628190387170489535aa9441656d8a24401de6458595c42cb0165d'
                ] /,
                / signature / h'5cb310acb34f7ebb42acfffce430dbda94faa4
12900ce8e76650445e2c37e4cc132d8bb5f30ecf5f8130270bbf8d159f6d36e1cdf97b
64229910fdb447538af1'
            ])
    ] /,
    / manifest / 3:h'a50101020203585ea20244818141000458548614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f60958258613a115781b687474703a2f2f6578616d706c652e636f6d2
f66696c652e62696e15f603f60a438203f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:h'a20244818141000458548614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450382025820001122334
45566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f
6' / {
            / components / 2:h'81814100' / [
                [h'00']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  151</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035893a50101020203585ea20244818141000458548614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
45038202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d001f602f60958258613a115781b687474703a
2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a438203
f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  266</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a0582482025820666b83ff5162819038717048
9535aa9441656d8a24401de6458595c42cb0165d58405cb310acb34f7ebb
42acfffce430dbda94faa412900ce8e76650445e2c37e4cc132d8bb5f30e
cf5f8130270bbf8d159f6d36e1cdf97b64229910fdb447538af1035893a5
0101020203585ea20244818141000458548614a40150fa6b4a53d5ad5fdf
be9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820258
2000112233445566778899aabbccddeeff0123456789abcdeffedcba9876
5432100e1987d001f602f60958258613a115781b687474703a2f2f657861
6d706c652e636f6d2f66696c652e62696e15f603f60a438203f6
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-and-secure-boot" title="Example 2: Simultaneous Download, Installation, and Secure Boot">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a058248202582038df852
c98928fae9694fce5b6b51addd631bfde473eceb20c8b929ae6ec2d6c584050bba3dd9
b0ad6da91265cff1ec69c3a9e2e42ffd97e780e37c78ac7889140620439874108ec527
1f3325988f2774f17339fcd61a5c08a3d15fb7fcdeef9294e' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582038df852c98928fae9694fce5b6b51add
d631bfde473eceb20c8b929ae6ec2d6c' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'38df852c98928fae9694fce5b6b51addd631bfde473eceb20c8b929ae6ec2d6c'
                ] /,
                / signature / h'50bba3dd9b0ad6da91265cff1ec69c3a9e2e42
ffd97e780e37c78ac7889140620439874108ec5271f3325988f2774f17339fcd61a5c0
8a3d15fb7fcdeef9294e'
            ])
    ] /,
    / manifest / 3:h'a60101020303585ea20244818141000458548614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f60958258613a115781b687474703a2f2f6578616d706c652e636f6d2
f66696c652e62696e15f603f60a438203f60c438217f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a20244818141000458548614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450382025820001122334
45566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f
6' / {
            / components / 2:h'81814100' / [
                [h'00']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'8217f6' / [
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  156</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035898a60101020303585ea20244818141000458548614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
45038202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d001f602f60958258613a115781b687474703a
2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a438203
f60c438217f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  271</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a058248202582038df852c98928fae9694fce5
b6b51addd631bfde473eceb20c8b929ae6ec2d6c584050bba3dd9b0ad6da
91265cff1ec69c3a9e2e42ffd97e780e37c78ac7889140620439874108ec
5271f3325988f2774f17339fcd61a5c08a3d15fb7fcdeef9294e035898a6
0101020303585ea20244818141000458548614a40150fa6b4a53d5ad5fdf
be9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503820258
2000112233445566778899aabbccddeeff0123456789abcdeffedcba9876
5432100e1987d001f602f60958258613a115781b687474703a2f2f657861
6d706c652e636f6d2f66696c652e62696e15f603f60a438203f60c438217
f6
]]></artwork></figure>

</section>
<section anchor="example-3-load-from-external-storage" title="Example 3: Load from External Storage">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a05824820258208ae1d4d
1846e82975dd5d7555ef0c3836e7e653a8bb1214466457781c0d2f2aa58401ef2d0ca6
aabf259feb880a1a4deb4e345cda314b2facf9983766da3744af825b3f98c74afdfa85
aed406b10315e0cc6c44ee19321681c69f911bc90bf8d22c0' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'820258208ae1d4d1846e82975dd5d7555ef0c383
6e7e653a8bb1214466457781c0d2f2aa' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'8ae1d4d1846e82975dd5d7555ef0c3836e7e653a8bb1214466457781c0d2f2aa'
                ] /,
                / signature / h'1ef2d0ca6aabf259feb880a1a4deb4e345cda3
14b2facf9983766da3744af825b3f98c74afdfa85aed406b10315e0cc6c44ee1932168
1c69f911bc90bf8d22c0'
            ])
    ] /,
    / manifest / 3:h'a701010204035863a2024782814100814101045856880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab45038202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9
8765432100e1987d001f602f6095827880c0013a115781b687474703a2f2f6578616d7
06c652e636f6d2f66696c652e62696e15f603f60a45840c0003f60b4b880c0113a1160
016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:h'a2024782814100814101045856880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45038202582
000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e198
7d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'00'] ,
                [h'01']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450382025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'880c0013a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0113a1160016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / source-component / 22:0 / [h'00'] /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  180</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358b0a701010204035863a2024782814100814101045856880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45038202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100e1987d001f602f6095827880c0013a115
781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f603f60a45840c0003f60b4b880c0113a1160016f603f60c45840c0117f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  295</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a05824820258208ae1d4d1846e82975dd5d755
5ef0c3836e7e653a8bb1214466457781c0d2f2aa58401ef2d0ca6aabf259
feb880a1a4deb4e345cda314b2facf9983766da3744af825b3f98c74afdf
a85aed406b10315e0cc6c44ee19321681c69f911bc90bf8d22c00358b0a7
01010204035863a2024782814100814101045856880c0014a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
45038202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d001f602f6095827880c0013a115781b687474
703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a45
840c0003f60b4b880c0113a1160016f603f60c45840c0117f6
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a0582482025820310798d
3d8276a740505d1f017972e281d6d26c9967a658879ae6d07e6a238a958404d48f0059
918c261bc1636b467b2b455801c4d211758a42e82a8f8fc245f21857d7c0e78f1b6d6a
8ab1f0c9e147043066c0af53c1563070d4934faeec21bac55' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820310798d3d8276a740505d1f017972e28
1d6d26c9967a658879ae6d07e6a238a9' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'310798d3d8276a740505d1f017972e281d6d26c9967a658879ae6d07e6a238a9'
                ] /,
                / signature / h'4d48f0059918c261bc1636b467b2b455801c4d
211758a42e82a8f8fc245f21857d7c0e78f1b6d6a8ab1f0c9e147043066c0af53c1563
070d4934faeec21bac55'
            ])
    ] /,
    / manifest / 3:h'a701010205035863a2024782814100814101045856880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab45038202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9
8765432100e1987d001f602f6095827880c0013a115781b687474703a2f2f6578616d7
06c652e636f6d2f66696c652e62696e15f603f60a45840c0003f60b4d880c0113a2130
1160016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814100814101045856880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45038202582
000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e198
7d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'00'] ,
                [h'01']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450382025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'880c0013a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0113a21301160016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / source-component / 22:0 / [h'00'] /,
                / compression-info / 19:1 / gzip /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  182</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358b2a701010205035863a2024782814100814101045856880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45038202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100e1987d001f602f6095827880c0013a115
781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f603f60a45840c0003f60b4d880c0113a21301160016f603f60c45840c01
17f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  297</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a0582482025820310798d3d8276a740505d1f0
17972e281d6d26c9967a658879ae6d07e6a238a958404d48f0059918c261
bc1636b467b2b455801c4d211758a42e82a8f8fc245f21857d7c0e78f1b6
d6a8ab1f0c9e147043066c0af53c1563070d4934faeec21bac550358b2a7
01010205035863a2024782814100814101045856880c0014a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
45038202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d001f602f6095827880c0013a115781b687474
703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a45
840c0003f60b4d880c0113a21301160016f603f60c45840c0117f6
]]></artwork></figure>

</section>
<section anchor="example-5-compatibility-test-download-installation-and-secure-boot" title="Example 5: Compatibility Test, Download, Installation, and Secure Boot">

<t>Compatibility test, download, installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a05824820258209a45659
58c6e09c92fc69feeb09081c875f113082245ba2025801fa46dc2280e58404604e6413
30d610fd0a0545b9b816f09c0767edf66fc57f40393cd4423e0807b36226e843e0f57b
f860a3cf542655048648dea81e62e39f19e7ac96652d3de90' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'820258209a4565958c6e09c92fc69feeb09081c8
75f113082245ba2025801fa46dc2280e' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'9a4565958c6e09c92fc69feeb09081c875f113082245ba2025801fa46dc2280e'
                ] /,
                / signature / h'4604e641330d610fd0a0545b9b816f09c0767e
df66fc57f40393cd4423e0807b36226e843e0f57bf860a3cf542655048648dea81e62e
39f19e7ac96652d3de90'
            ])
    ] /,
    / manifest / 3:h'a701010205035863a2024782814101814100045856880c011
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab45038202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9
8765432100e1987d001f602f6085823840c0013a115781b687474703a2f2f6578616d7
06c652e636f6d2f66696c652e62696e094b880c0113a1160016f603f60a45840c0103f
60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814101814100045856880c0114a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45038202582
000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e198
7d001f602f6' / {
            / components / 2:h'82814101814100' / [
                [h'01'] ,
                [h'00']
            ] /,
            / common-sequence / 4:h'880c0114a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450382025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:[
                        / algorithm-id / 2 / sha256 /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ],
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / payload-fetch / 8:h'840c0013a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            }
        ] /,
        / install / 9:h'880c0113a1160016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / source-component / 22:0 / [h'01'] /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0103f6' / [
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  176</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358aca701010205035863a2024782814101814100045856880c0114a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab45038202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100e1987d001f602f6085823840c0013a115
781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e09
4b880c0113a1160016f603f60a45840c0103f60c45840c0117f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  291</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a05824820258209a4565958c6e09c92fc69fee
b09081c875f113082245ba2025801fa46dc2280e58404604e641330d610f
d0a0545b9b816f09c0767edf66fc57f40393cd4423e0807b36226e843e0f
57bf860a3cf542655048648dea81e62e39f19e7ac96652d3de900358aca7
01010205035863a2024782814101814100045856880c0114a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
45038202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d001f602f6085823840c0013a115781b687474
703a2f2f6578616d706c652e636f6d2f66696c652e62696e094b880c0113
a1160016f603f60a45840c0103f60c45840c0117f6
]]></artwork></figure>

</section>
<section anchor="example-6-two-images" title="Example 6: Two Images">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81d28443a10126a05824820258201d15a17
13d3a4510ca392454adff987abb5425348e449618122ffa817012cc315840197a4a3a4
188fe1dd8baa468ae9a35ac8e5ef462017530116eadd90892c96c6ab00825fcb45edb7
57547733c14d3b637ea8a085ce7bfc782a0b2cd80d31b1294' / [
        18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / ES256 /,
                } /,
                / unprotected / {
                },
                / payload / h'820258201d15a1713d3a4510ca392454adff987a
bb5425348e449618122ffa817012cc31' / [
                    / algorithm-id / 2 / sha256 /,
                    / digest-bytes /
h'1d15a1713d3a4510ca392454adff987abb5425348e449618122ffa817012cc31'
                ] /,
                / signature / h'197a4a3a4188fe1dd8baa468ae9a35ac8e5ef4
62017530116eadd90892c96c6ab00825fcb45edb757547733c14d3b637ea8a085ce7bf
c782a0b2cd80d31b1294'
            ])
    ] /,
    / manifest / 3:h'a501010203035899a202448181410004588f8814a20150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f825
82e8405f614a2038202582000112233445566778899aabbccddeeff0123456789abcde
ffedcba98765432100e1987d058308405f614a203820258200123456789abcdeffedcb
a987654321000112233445566778899aabbccddeeff0e1a00012c2201f602f60958538
60f8258248405f613a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6
5312e62696e58248405f613a115781c687474703a2f2f6578616d706c652e636f6d2f6
6696c65322e62696e15f603f60a438203f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a202448181410004588f8814a20150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f82582e8405f614a20
38202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d058308405f614a203820258200123456789abcdeffedcba9876543210001
12233445566778899aabbccddeeff0e1a00012c2201f602f6' / {
            / components / 2:h'81814100' / [
                [h'00']
            ] /,
            / common-sequence / 4:h'8814a20150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab450f82582e8405f614a203820258
2000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e19
87d058308405f614a203820258200123456789abcdeffedcba98765432100011223344
5566778899aabbccddeeff0e1a00012c2201f602f6' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    h'8405f614a2038202582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100e1987d0' / [
                        / condition-component-offset / 5,F6 / nil / ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:[
                                / algorithm-id / 2 / sha256 /,
                                / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                            ],
                            / image-size / 14:34768,
                        }
                    ] / ,
                    h'8405f614a203820258200123456789abcdeffedcba987654
321000112233445566778899aabbccddeeff0e1a00012c22' / [
                        / condition-component-offset / 5,F6 / nil / ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:[
                                / algorithm-id / 2 / sha256 /,
                                / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                            ],
                            / image-size / 14:76834,
                        }
                    ] /
                ] ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'860f8258248405f613a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65312e62696e58248405f613a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65322e62696e15f603f6' / [
            / directive-try-each / 15,[
                h'8405f613a115781c687474703a2f2f6578616d706c652e636f6d
2f66696c65312e62696e' / [
                    / condition-component-offset / 5,F6 / nil / ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ] / ,
                h'8405f613a115781c687474703a2f2f6578616d706c652e636f6d
2f66696c65322e62696e' / [
                    / condition-component-offset / 5,F6 / nil / ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ] /
            ] ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  256</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358fca501010203035899a202448181410004588f8814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f82582e8405f614a2038202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d058308405f614a20382
0258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0e1a00012c2201f602f6095853860f8258248405f613a11578
1c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e58
248405f613a115781c687474703a2f2f6578616d706c652e636f6d2f6669
6c65322e62696e15f603f60a438203f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  371</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587081d28443a10126a05824820258201d15a1713d3a4510ca392454
adff987abb5425348e449618122ffa817012cc315840197a4a3a4188fe1d
d8baa468ae9a35ac8e5ef462017530116eadd90892c96c6ab00825fcb45e
db757547733c14d3b637ea8a085ce7bfc782a0b2cd80d31b12940358fca5
01010203035899a202448181410004588f8814a20150fa6b4a53d5ad5fdf
be9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f82582e
8405f614a2038202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100e1987d058308405f614a203820258200123
456789abcdeffedcba987654321000112233445566778899aabbccddeeff
0e1a00012c2201f602f6095853860f8258248405f613a115781c68747470
3a2f2f6578616d706c652e636f6d2f66696c65312e62696e58248405f613
a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62
696e15f603f60a438203f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>IANA is requested to setup a registry group for SUIT elements.</t>

<t>Within this group, IANA is requested to setup registries for SUIT keys:</t>

<t><list style="symbols">
  <t>SUIT Envelope Elements</t>
  <t>SUIT Manifest Elements</t>
  <t>SUIT Common Elements</t>
  <t>SUIT Commands</t>
  <t>SUIT Parameters</t>
  <t>SUIT Text Values</t>
  <t>SUIT Algorithm Identifiers</t>
</list></t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="I-D.ietf-suit-architecture"/> and in <xref target="I-D.ietf-suit-information-model"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='November' day='19' year='2019' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-08.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='January' day='20' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-05.txt' />
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIALO8Zl4AA+y9+XrbVpYg/j+eAj+nv4mcIiXuolST7pZlueIubx05lapO
+fMHgqCEMkkwAGhZiTPPMs8yT/Y7610AcJGXmuoapzsVEcDdzj333LOfdrsd
lGk5T07Ds/A8W8ZpkYQP0mWU34bPJ39L4jL8PlnlSZEsy6hMs2V4cP7g+ff3
25OoSKbhZZKn0Tz9hV89yvJFVIazLA/L6yS8zGblTZQn4Q+raVQmBb14vCyT
fJmUYTYLX16ny6siPLj84fHL++HTaJnOkqIMoskkT96ehvg4xNHsq2kWL6MF
THaaR7OynSblrF2s07K9kC/anUEQw2BXWX57GhblNAjSVX4awhKG/ePxy3xd
lL1O56TTC2BmEQySxOs8LW+Dmyx/c5Vn6xUPHLxJbuHR9NTMuP0QxwyCooyW
09fRPFvCPG6TIlilp0EY5rM4mRbl7VyehmGZxc6f6XIKMNQHRZaXeTIrzO/b
hfezzNPYfBxniwW0NW/T5Txd2mGSd2V7nsLaoZNJNofP2tk3v4M3AK1FtFoB
kPnbIFqX11kOs23DW/wnXcLXDw7Dp1keLeUZA/hBniyn0dJ7k+VXAGbebMCX
fBE+SRdpmUzlfbKI0rlpekhN/z3KF4ewgKAy6HeH4csivs5myTK98kb+Llou
AVlqb/cc/ZqaH5am+ZYZPEjzN9fZ/Bd//GT5pvrGH/tRHq2X2HseXgKm+MND
68OJtP73Ii0PZ+brw2lSncQfD8P/AnSaJLkPhD9mybL6xp/E4yUcPX/sN9Do
8Bdp9O8pfgCjB8GSzmX6NkE8/f7R+aDb68mf4+4Q/oRDspy5Hz1uPzy0hyvK
42sAdFyu84a3pmm2bC+yaTLH/trtdhhNAI2juAzgnBdhsUridJbGTCqmSRHn
6QT2GSkFd4AkIQr1JB+GQJH0R5gWQRRO1svpPMHPFkkZAU2JYIxsXXIfab4g
aoNUBhD3cfYSRnmbxkkrvLlO4EWZBTM4hd7XLfrF38FcMvg0ja/DtAzh4MzT
pGhBX9Mwzm9XZXaVRyt4HTgrBsKSIWTgjFFPdvaPdD5roX7YT4n0B+jmJMvK
YJKV13B68XEWroHuFsnP62SJE4El4qGH/rNVktNIMJMi88YI4VuAdxHAoa62
dpvBH7B+aBoh3ON5lJvZChgPecMW6RTgGwRfhUj08my6jrGLIDiz0OXVQMsY
ukuLBewMQjsp8IaAuwCmwQQ1nCURIgxTfbMZBORpAh/epLD8t+v5EmY6Sedp
CdA+DH+8TmGLcXKAO8tiBXQS12PGTxfRFXfibdx1siiS+Vv4E+aTLrBZtCTE
gDbYLpoDuZ/ehm9h9dkaWsAClilADKb/Fk5PNJkDMhRr2PyIkfJJenVd3iT4
v3ABwQlYJu0ya8uf4cGTm6e9p/cJAbI4m8Ms4YgjZHlSuE0wVSTcuAAHAofh
xc/raD6/dSaa8pjpMp6vC8QrQfJ2BcvjbPk2uQUM8gESHqRLc5L8c3SfEQ/e
IYrBK0A4XAfindkrxWIYmLYHf4RwmM2BZfQ9yFb4A+d+Hz9cRG+SEO7qJIeu
k+UVwIVBsMhgZtAamq/ncBguGsaEXrIbXjbfS3hOMzjk6Xxa+Eea1tjCESeA
54hUgMxluMzCjFB7FeXQ4QFBb4rjr2A5jI7RFGcHm54U98MYMBXIbglDVzEa
Ts3SQ1NET4R6NIVzhSi/ytO3gJtXuIFE0XjWyvwACKEZ4V+yxDnCKb914T5N
pghMeA73NOwt3PAhkir7C1iOQucHn2W8pXZSp3SWsLsYuK9CyFq2REwCJuWq
upUwlRwmn+JcUsKxYo1bkiJOAjAVFBHTJdhiuDPz+riHyNkh6s3SKYPVGaiG
i4WMFU2nqWKLnYczbJLS5gEfhXBYAKKkKzj7W6HTMLfLEnYfN70Jm6PSQTCa
VZinxRsgdWV6xRtnKAHS1+pSEOv1JBWEP4iBZZbz/qyXStHzZJXBbZ8hov2e
7o85dAefrYU+hUUMRJnPJtB2mOMiZcSIlre2+S2uGnczXwC+IN4VtzDAQpAf
UB640iJhah4BEJaI5dBLkeQEjyB4zOAvivUCAX4tMED6lxAMZtEC6G2UMwnG
d9dA5dpzOMi1cxG6l3/466+bOYPffoOxn2aARz9IS4DdSwHPxTvYHAK3vZmI
LiMoMhQlYAkEJWB/wmKB+FGwlDCDWz9CMorrdG9DodUA1lvc/qhKE2cAYsKu
1TyK8fqHGRG9aIXxdRK/4VsQoFNrmWKveQ7raoVAPtLZrfmW5sisjIf5hZBn
auUzI/aiauHmrperiAe34wIregsHW+5l2N7mRQNiEFWFY4+3Sg77ySiKl/GV
3upADaFpie/gJ/YLA0fhFSBAich865AQxej1Cm8iS7NoG4i/gF6R3iUsjhne
Y10QWsO6swmiXqSXx3USAZkENIarYpH+4nAMwrLNmJYAdtJlgiPiT7ju4fqY
mksyCCwr4A+NNzxxYDxdXL8ONqXeqyhsltsShgB6QExAgMm9WUXsGlP722+8
/yAKk2yGVK6gnmHNRILtqDrcoRWB1/ZIQGfAZeNBh6OfT1JYOPwg0OBuJMIb
TJSDoEUiBETmdpg2YNTOkSFY2iv6JRCOdJnNs6vbIMBtA7KJJAOu1HtPf7h8
ea/F/w2fPae/v7/4zx8ef3/xEP++/O7syRPzRyBfXH73/IcnD+1ftuX586dP
L5495MbwNPQeBfeenv3lHvPP956/ePn4+bOzJ/cY4LABIJyuiTmKiDXH9RLZ
A0kd8TAqApURptjmwfmL//O/uwPYqP8PxJZet3sCO8I/xt3jAfyA23DJo9F2
8E88AAGw8kmEVBV5DgDyKoVjhZw9XIjX2c0yRKQAcBK8ZhnyJXSWLCgRY9YF
UdM8W19dMzvmrAJaf0ObdFpVexgSUNd8sPDx+OLlI9whIgmkgZAmeF+jriHK
p4fQ+4vodp5FU1TUrNIkpqvDlUQYhoJdyRQO7e0KGA7EpUdVcrRa50h1SVTA
WWP/3ydFts7jZPMAiP8GEJmcWpARgLiseHLYjyprtvdjBUC9/5FllG4AMu7T
XGYmwhgtgLktuApD4DmnPCGSGIgDNi0QpzLTLU6Pd+U0fO4MYG94b26NU7N9
hGfMAJa3p0QgAZOQnaEL3pUX6Qgq0Ir0aqksZ8vKg7cA/jhdIWdW8GbIL+6a
eQD43mxpRcIV2hQnKcpAjhQNfQGJYE4Md6RECkoiMsIQbpbyVq9eMyaxIMju
4N281Ck9TPFqQwVBeAYnifkrRSjbFsGd5LgLPPYCpjIV7SJPg/g62x1+VmMT
CHmEo57cilQeKS/EDLbsFp12BSQKxMSCU0fJtEUzTN5FC2ItkUNMSPrGUc+O
HgifdwrTeZtO+VJmmH5dEJ9H7ADiUHmTGVzADlBglNYtZDOde3k2A9ZFORTD
NUS0WuEwkNLfAOokKsmmS/f9QXGfyPt32Y0qB4gePBRyEzTpVOIMRR1Y8Br5
ZnhVFp7ovBbMx+EmwIIgrVkKg3gdOZdqWeubKdUkuYa7PRMcFzGXr3KGnGJd
yz2jpMxA3qP6jZ5lJiK4MYKI9qYvQaifEW399Vc7ZSD2vv7ImQqxEQh859Ln
W5dOHghxyxjFDEEeZ81bJnJIE7DXU95WUHhTuSFmMpbL2C7DECu8btZzGAzk
Zu5TAWMU2EVtcdvByN0Y9bdZAnSjbKqypstSdBH+0oJHJHFY+szahioTBbfn
VYK6mrnZOAeJlHsH3snZ4SJJKht3GLzMUO0xZ8VIJLSQDpPSMm61Ado4dvN6
q13DwcnmvMs8cRTyDeXlQRrBv20IOJMP7Kp//cpZm55JkTz9TQQmIi1KpN3I
q4N4vyS68dkRlyR3+kSFYxwLxHiVKCoNFDA7uWEAxcMUWeHJmjCypk5BPVLK
miFXpWIeuioHEmxQLAY+FQgh60iI0ovpCTaORXQLvMPwoXQLuAHUNZzkcD2r
0OhBlJUPpJozRNqII6rGAiYR7sOcRO4pHBzUwpGmJyEGQRnyWzzgMuOVUZHS
XcxThvGSCOg+TOLmGgRQpKxFtlAdBGwBzLwRctAjy7SsC2mzVitZvk3zbEk4
baBhdSseRC5wYG4mChekQ3bRxXoi8CEBAlhVmBdBARcIIhEuMoqR3KR4IlFk
Bo4ZeyTl7FOjowGUJO1uoaAxCh6SuqWF7riOryBIjQ6tzIChYXmbuFYEAisP
kxU0hV87VQ5ffUXQNzyuMGfnFgOYsVfNr4MaVZ0fkYMaLsGBbOOB1DWSLY5P
ljAWLQ/FT/G+mrNtSqk3KyVvkpzOtDIWCDvpFJkbIl6oCnLtrY61A2n9BNrf
pFOAjbsOtyODT6RlwrGZ5aI9AYQRei4iP/UJ7AzytklObebJOyUUTf3LNOFm
Fko3ScqbJFkSh1ThjLB3VuYQOUd8bVp78q7y0pmc0Qs6LL/b1iUasjRkT1Ct
iRYcUV9jT/Mov0rMEKQ24dWitiXm44QLd3tHXQocr7nTNRGBQoU8n0deJMU1
CCQlinP+NGkZgEXIKOrhz5aAvpe8VFXeuDiGQCMSY/UyW5DXnHhSneMmklXl
Fk+xwSkiB0yABbtBDuTDrljWCidro740XQoTqyohPLJv4IgKNvAx1KP3I6x+
BkJ0+BTvCjp9YoUp0FYA++yqt0hRueLbyLna+FrCDvSOqnIkNzIMnTcQNFaw
1bLkBd4tk4T1fAi9ZIZEBXeOLQZGp4YLEXklIfH1DDAHiE+C5vr41hENhXeb
JEqG3V5FOiTtalLCsNTX46WQfgcTW0aSNLOUFoSSbwEHpxFTDmS1rb48EoT5
RNB0ZKG/ByRTUabXFt+wYPwA1Y7SB5GmqWrkt7RLVHoEKD0gXRmbCwDZHbC0
KjJGYdknktARGHxxgYi85uuvSHK1ItPlrkxeTWAR7Qhe5WKOZeVp8m7FthIF
tcjgwgDKFhNrr+oB1c3CXfQGqOsUFVUkiQ5hwsmqgM3qHoZ/IvU076heynUe
v+d9KOgoO1z7uH9IuqD528TbvsNgAJceoqpuIkmpw0NAczbouI+DH6+TpYe6
fMsjtSiRyYf7cR75gocsmCCI4JEtZqhMw3y9XBLpESsTsoyzdU5Y2DcwGZml
Wkn6+DB8QqfTPBnDGtdLV9h+PGNVv0rT3oiFFSx4dyPn0iSEYjWyc5OSkpWo
6Ns9tsjIVFv3BkcmrT+RBSPqNB1lZl29CZ39BflG0uwgLiEzhppjlfCTw6tD
WNfTs/OWKiUax12hwRdGVdC7UCt0482tbemnqMan6qDBWC7csn5GWhfYyDCL
YU0M6XkWv8GH4SwqrmGQ39Ptbjsm/t8h2aj8m7OxydAjl25ZuZzfFlZ/yaQY
5lTGdKV9Fb7Ik/aZB6kKgTxHwigspqP/du3B5Z44YAgZUhzAuyMhaIT/t5uI
jnDSV+soF7s5E6wwuorw/DlGhnS5gqsdWIn10tl91vjkU+XamQEAQT7OELzA
nOVRiBL0FWvVLdmyCkc86rHAZe5pFx5bXRFTLCaFBbMl1J5ZqsYOCqJdDU1m
yY2DAkSuZ1FKFNQKJ+22q/1LZ2KZniTX6AcUhVew+Jvoli9KuuEKpzVRQhTf
ImHdJ+vpVVLy1ygzOh/7tAPuY5Dac2SE+cJeun5GdBJB7M3YeES7RedflJai
0RS71+tzdgTadOUYpGmeC5OBq3WKhoElk82fzlWPpLr64tXBV3VdyH3DvRr+
L/Yng0qlSExoPuViaIrPkqMW8Z0QiBR47epztytltFbrlQEXIk/MemZGBNRv
tBMQOkkDui7xt3swDmau6Ab3QAvO9Oq2FV7eRCuy0fI1J50W9y2QfaJJu0ZH
c20/5wkC/gAJJAK2DJM8z3LhkcmWqXAP/5DBFcHEw6zTs3v5tjIyfaLLGLMq
iyQpDRd4lalRy3YwSeAqIP3p0yRRNwBHwJgmMzK6NsjZjTqfb8JLlv4M3mas
uLH22yV863+n+ssNXxI5jUsjWsijPAFAs2RCRt4mpwj49OIdy7hvUTZB0xwx
gkuSQaPp22iJwpO1d+Mk9OmSnOewi1JG4o3wrc1VpiQiRULCl7Oxozl2Qbxf
59A2vo3nSQWF2eeJ2GzcC6OzYEsS07eoMDrYHGTsqKi4CkjbZyxlhs+J/25o
HHvXFKnsq32wBm1zF2SY4N3Ztz3brD0h1zNCkHuZWPi5kxdzdIB7Su0appAu
lP9DxdSqxL1rMGuY7oTGNi3FaODC/2EPcg04mwSv3d1XWbc6wLa09ljluzb2
VvM/rJTuLwxoOJu+ggvRULJwRL4c12glR7tF6asMS9zO6qVj8JsIPHFweFHa
Zp6qrInwPWS19uUaaGZ+Gzz2GMzsLVJs1mHMHbuTMTp7riIomaGnSFGmqPVR
8z1bbfHinq3nrvcpW9OSNAcWlv0BjP9pq8HdRLxsXeI5rZjCrPVTndIe6Hty
B8QO0KUBlXxolMGQCdLpoJQH71p6kapwQVEP6NMvzB16i2XkRAxQiSytbIll
lLQw1tbD9xzTHlfA0pmQMgkZIZ1AGM+BjM2RN0ZVBPfi+B2Jm5Rg4A3CWZhn
nYGZYRKxV5tVfPI8YtwOp0siqDCRBXqMOe4xaslNNnmMGV2WXpCJXYcIPXZZ
TLxRv7iUhecJWmLYTXUJTKTtnVm15h1i8wDi+RUxvBPgh2dI6REhQE4Vyzd7
YgsCs3dSiHfxirgtIHTApV+RT0Fs/Hbg6nYQgV3ybjLS1aNrMKps9VyR8zBc
GmphNR2mzKbDeYM9RGe+kJz5WmztKUqhBYax3Li1qLKUnQ2nawLS9r3xCAyJ
04cYU5Mtp5UpWmsk8qEg+esRahlXW/UknuRoFsK1Gp8BAIKjSScmUjzWWqJW
Ej0t+f+sy3Y2azNBcZqJqcIRCm8dZhRAQ6TAWCIRIR7cGu2QamjJXqKcGUgP
FX2SNfZOAAwLOrPk7iV6c3aTZrAT4fW0THztiOWzScxzv02Xb7M31AP8Sm3Y
AMLgOsJYiVz2NwEUXbNpw3PDMCy0444Rkg8nr9LTjRFlQuQif96rNapvgMNA
1f12OsTnijlisTiigyoSao94lr79lqG2iOyC1XVQLwBPwx+CpMm+QOobagRh
1MI47uZNzirGFqD2SzqI7L8LGAVzuU6iqY+R3jFQYUEHMvYce23rUNbt3xga
8dpVdRcw3MD1oOT40Co1aD8F999GBWKrATZdLTfJfI42UUffqmYNOHFv0KYy
AR61JCFQ7nM9nBh2QXK9wWIWe61SpUX6AOLCEefUT0pff10460eXaQwduJVb
1tyVeNySkoiR9VHFuzKOKPwFVeWO8yqeHhHo1HhNKzaKdGaKXAUzbrSYg22E
CjFMf6tHNLAMo6OReILSUPtKsItIKO0C/DdbMRueZ5M1q44WacFbJ6Zqtvko
YWBde5llfCVZlEMg4moNfpydPzGudVHI1jMMGCFX+1L15udqZ5IXsO25NwsS
e2xshEPhSU5XKxVpScL1co4iGXpH0p1KHZWO/y9MSi20NCG5SFXnl4vcSLuT
womA+24dzV14in2NcAKAeK5cFvu6s8EL6QvrgT10PgzPKgDjJjQz8SiD7X9h
BmuFZ/Mr5OyvF+I10QQuNYiUenmoEdrTScwxfiChOFgW96zwZoQ0Yyc274yC
xJ83iyzKWDD2inAgfh3CwTgc5NrY3Q2DbrgNoS2ogLW02KWIK+AO2d7DfK4V
gdWmYJld8mZ5bN1sLNP661eN3jdbPVxcjriiOzZdCby1g1kW0w0IAhcIAeQ0
vrSfI4IYoiJgspfhd8DYvxXde8UcxnYpS2R1ZobsOTM6tbIS8h68LA0eacFp
n8/RxccJKWH88gQu326ARuHrNAHGaJEZf/6DulMTkML16rff7osLg7MPl/im
sgn8dRC8qBi7RDes175anVrVhapP5zVe7s69ydoqED5Rw+pvnAIEzs6cjZNE
O0gFnLIMsl7KWQeKYmMIqiA9DJ8Bd3rHKZHauTolXV64XC8m4kyht2pkd4uU
jyaegjDOa6c2OewfPbNixIyGvSaO8S1qzpGTtzM0GvLrSANYVeoUp1o4XqTl
wXsV0bK2dqQOogNW/wnFX6N/pUuXgMHOFnJnkwsvMQuuM6UipOcZ+HhWa9P0
KW2sDHf2F3e0JWzDzuaAwd8lGEsrk0oiK1dUOIrNSBKePXuoIGVPJABJ8g4j
+kTzlsnVg7qPAm2U9Ic4+Grkn/WQRk4FbZgzlJec41Izu+GSOXQwoT17qRCB
cQ/IKvYnYDEwivXh0fk8gnvz8cP75Abu4LweQHMq2AbufmIux20fxfbielj9
TiIACDwmaDU8MA6aBrtodg7zuF+DM+cIxnlUoEsCHXZ1pg4PHHNitfWPqDmY
ZleosUtQmiMLXr6jlTNJALAu0COouhMbe8HLFW9r+G5N+gHGC9zWCVksJpZX
gTZwmg1vWFhlH9xAb3zX2pB8ogmnyUvWxIXQcOkyJdm85JNaO99zkHELdZ+T
fRffI7kGPS/2avtJAmKiE4UKNB56RA8Mjf356v/87+9VHcVGSLgyVEHVZvsL
XBjPkexFW84+HrgJ0585+SjUFyMEOVqw5Op4PZGSih1X1MIZsQp8Eb1LF+uF
UmqWkJQJ5QAsPLYcvBGpHzqpErHP6lFwRX7xWW78dsPkVaeo3l8at2AP3k+W
d3114F299sX9Q6Wo7gDTLOHlkOThhtgmyIPg9aHDOuYQkY+VXSZeE7WRBkiG
HGsLB34F5V3BoDOFQ5UBQC0Mchz8ZdtqQX77jRqJk2WJhF/4U3dNEurFF+kO
6x8Jr2ioKClg5q0SS2lN7JL7QSw0lN+zidgjyqZfmiRFulI7u8eNS+adpoOj
/jvASYXnSIVgN6xIIA2tcdrQIBv3IMdguQGdhOfw734+c2zlPiuFK4bZLEX9
5rkOCUerg5enTCvy5C15qcpnhWk3dXUBbxO9H5kyk5X8TF30pnsMJipZoD8r
1Ghw+LR+Wx+wqI4XbDsIcqrq3l8OcbX6QF/PsBnoIsR7ckCNd37k+MK9MLxY
HcGFHXEDjUUiIzsqb+KFw2OrBMW0MBVepGrkbXFwE19gcNvempBg0RIUJXRC
2+V07nnw7DUAfmm85MlR4cJjcCh+18A6cxxy1BBSsVKbRv48MQj04pTZAOan
bdBURfGp2qaCEmjcZOGBkJn7zGP7nK31kafILk62QoKvzoDUjeSSEpOqsTBx
/jS18EcOXo9KJu4F8eXOHoZ9kCzmUzE/nUkyGk3lgQYoVsxjghPfakCdsmcQ
neH1/E2Tp5/QVI1CbhB0qwz/RHwwjTGINUCaKAd6p7lJa/mlOvyCo/xZRiD1
rN4q8yz2lPl5IpounprRwoTncBrQXcPRVaJmlDwlZHk05NeFEZrRWEiKWKW2
7P3C3RcetoQlOliXxsoF16Cl2YeW/oor2DItRWM9JYsIR2OQJw6Dirsz4OXz
R6IbK61S1ezQF5a8p1bjAwxPnke3NM6EspphOA/G3rbFQSR9iyaTSN6iPvta
4igs+8G0okotNc5kll6tcxELXzhqzReOLkxd3yJN87JaszuToyEjbzPb5tcN
PAiwdJcVRSl2r3HcnhKdgFX434rWva6VJgOdOcTkNGLkHgrllGub5EoKYnyY
XjENbp6Q9YXbNac80SheZk04v0Cbg+gDM95l+gsZw3/4/jE8fV5K6he3G40z
vzsYHHdKRV5/DpcU9x8+R6sSecJkszJ8xEIHizLUFQPoYkkhwBQatJxlLOVh
3gfz85IClC3aysLCJ6lE7a7heC9cjGIUUf1nEOhf4sVT08JFxhr9Ung3PvOU
mocNlCayleLOi1MxYNozfitH+2Cq9qFCEwqZDw0zRK54B7FaSJBdfukkYAJS
o+TrPMPIhnn4CHfBs8ASKnlz3YrZvtVlD7wmD3fiSxW5rTr9IAaokFjKXwjG
ux/E8oG4GDNeHsTp4ooeN/ObB0AsYnr/HJafoxziHPSD7G2+um+uWuSvOZCM
oau8FNlu8cpYXs09Xrh5TFajhEzkNsB1+wH1Pt54PIPKqh2BHpc9NWBxVwwv
VvTihYg2bqsVcIP0Eh20D/L1kn6wR97BFUNSDr83xa1Hfwue7Dz4P2BKTHYf
PlhPZi6CGHA/p5jvEDEkcz5QmuCi0NTDMcagZ8j3RbTCpeISv3+aLkmMfkCG
VgAPyOAT572figB9Fg5Qxne++JPo1wC7VdEzQYQ6iCZ5eZ+j72/5yjso81tu
ma1u8SSv+Cf6RcKuwf+KqgckU5TAL8gR/OBmlpgNu1Rh7KDArUOGaRpRXiN7
nwKk9HOS087yqzX7Ix5EvN8upTNmiVp+DrHVb7JCuELiYXiPqH9xLzD+I40y
OIm5gst2xsieGBSF6b2HycEpfi+ub8hDvm/TP/QfeI+kBN4L00FuNQfOoeXJ
/PUnFpbb6fSvr+5jq3ivViRB20aAMdVGU7qabdv7tjG/4qZImKCpXejpt46a
4a8/AQf211fwHZIo+E67ePPXV/jlW4LYm9Zb4tXzK+4QF+DIjvCdKwbaPpEI
NPWZzkiGfEMRtvSyPgzSCGiL4uiBHQsAQwoKWNvvG97xrraL5AqRjQEA6BaG
9B8HVvD8igFDmb7cHaD4gAOd8zpPoRv8HugC9gPbAiz2wTK7Obgf/k+cLO9q
5rzk9BDZzBkw/PZb8+10Lwxg8mVQYMkoQHrzD0ADpCl2ghMhNf9qJoUUxb5P
C0ttDmj1SFnse1HovyZ1iDt57I26A8JjP+/gI9TK4rLzJHqDGEC7VyQ/3zeq
QhR+CRHgqUUEJFFN+6SrLPK4bR4LziMx4//s2QLoG05uDTR8TrbX8gCX0gpv
gBBij4hFgo0KMX7k4RUDICBxVBMnA71+YR2UXEXGr1/VVXdBoL4SXtCMCCik
ivX1rKxzaXihjt8gOKX0057QlkRJmMBQJYsNLk6Y7yvipKyugo6dSNEQgClu
IkKIquWlzBNsFSdWh1nV5WJkmfWmqGt2QdLPKMTdGkBt5hdxCvW11ZiE+Z2i
VCOpF9nbTdyXEc86D99m6J07t0pkN6mhq9bVCOvMak6Je6OYcGTwNunESQmD
OdNqIT6OuRvdRNQZ0Ub5T5v85Mj7lfUfL9RBrhndguBMPQVUQYS2T8qMIPkr
yTPWkYEcuwYbvug6No54zjRQb4Hsp1DeosWWX4mPZjc97wPYBMu/N/TYYsTZ
MiOy+ZJ/1yMQPLw0vzTsDF3nI7NrNTU6n/XtAwDg1vmSt/9lviYlRmklLauX
Tkj58pLCgGDZf8tIZ445SGEWNkcAuZUSm4kK8HS5FnuyA0arynEAtMHdscUK
JoqyNAgjAaotMr2sShcsnMgnKdQMIfzyrBTr9R0gTf4BmOK8EGOZ48eBHHeJ
yrNklpB5kObdMs6M0GCBU5COBBRJ4ToUB8EPS5yFKhF5kCIGHMzTzPJ1VUSk
2OHraF6eBjWpZIN4puKLt/pvab/1lSO8PEb6YgRBa7/ix4GzaWTagK1A33Qz
VS+9ZTUZNMFPXFhjYII5npi0pBSwYyT0Ntw6bS/8eNmqgsp0ruk71kvlt3Am
ogIzGAzXRUTOm7B7TZBAdEwLpI8mQFpaUjoQHpxENuug4n9HW8PZqRMr5rIK
0KXODYBVem6d2NKlhHw5rh9CBi0yuK6SQP7csCkKh6qaUn+rhKrylMUfUsFb
vUytHYcAUW60ugiBNRaaw/AMbzXM60m7NE0q/oriqOdw2iu8ZouyZuzRmNyo
SdxWYiVxCuJtUL9rOWi/MqKvgSXvvLoagJE/rBpgXLcMk6IKuXeDulXYOKPV
DEZppasNYI011tPsgUklLpwAXNPWVWTj5tTtSaTeMgHF1CHb5HdhVdVx0xvI
MTMY93N378i0NL8lT756UCfwkA0JroLAfkDOauTMOFV3qSybF46j9Zpz258/
v7ywvuBAnuJojmYZ9tLzsh2iq3li/D9XHJNL8bA2rRMrFekyiCwN8PLWe9wV
miWA/xGNWKl2AC832pbpVhIM/fqrVD6QZF+0W7oe8eZuWhKFDt9mmrZO8zlX
E4Gef8yqxfYRxeSPnpITDuZEQh73JroFyF8zK2h0qehlMOcKA7kTeyIlD3jd
arm3ii3Eklt7IdhOdAJXV3lyxcHhmWS6SvjWUk95x0TEqsvnn0F1yXjEc8qY
vJvx2P6giVmiOcKHshknpWBzw4WOqSeYeaSzReIcSU+AR22T433qnEGi3HmC
WaTNIVTLB1wpJqRNNPpPo5IEN0N1XZuhwVLNlBUJgVhR8kfFIuVX62/UM2OS
qM+aiYJihKC8Xei1J8Sr4nMrXlEruPB1ChXZTvyhvAhOwljXmuAVKuDhePUL
Wb3IA4VBU4N6nDfddVpuiOwtNN0KW+it1wBIR60QVbgS22ETVkkgkMbHkGEd
NdeZiUZEzDmrDq7p1W1Qvw3KmDhJZPyIYIkhrK0aozgTTB2WqSeU9YpAHbr1
3E2qjgxbZ2ZUlpqzLsIpsFV5muFwSDFydoHM1AsSvkE5VYJ0rDfZNpfIljlx
nKHPSSLE1NEkjSd3AU4ar5bQKVE0sXLW03ieiWOENYe75wFBs1gzD2kia2re
mhTWnDP0vJCiqHSbZU3b0xLyyE4XFeemeloQZOaIZgMOUC0syXUxbWhkdpl9
2uROsc72ykMIRytniQiI8eJ7KUT4tCnFCLMcflA3r8DzI1TpXapCcGIeJ7GG
5mULOK3EadBIg4MNJrKg2TAGO+tlZCHfEjc3RNO09coxsmhEyRrmrJeSxAWP
3UyzNCrruiQdpJtEkhE3IWeFRCw66ZI2kT8DZjqlBBTcuN224cospVSb2iRX
7gwsx+k4Dm9apS7BiYag732vJ8+OWkiBiEpPjmeUvZpMt/tNZRMG6VY4Hn1M
aOwUTxvspRRoU7WRihMeXcLVzFxCanS4Q0rCrelZNMsbEnAzIXKikWuOcMLy
P45BUYRYHBKpE8nEL/PbNgmxE8wfZCPkyH0EGxDHTtco7HDqXchV8B5KXjQ6
MFhwa4Ol99B5aad3KlW68I3jUWEfWs8K+d18+PzXVcAzLUFb5TlGYFta8ufH
L7jKXRI+wLJTd1tKAwflrkddQOwTddL4fr3fAK4ZlEyg+sJEpGJXG1dnUmg8
zG6WKKT+vdYnSc8+Eh/IlYX/JAv3xnVS/jJC0AtNlnnJamhcML79yJkI9yqq
KtmbbHW7YUY8of8Bgn4saUb/zrPTGdocp+xZs3Pmp45yIvBDEL43mcOapvvQ
sQDffV93YHtdNcMeWJLlcL/53K33R5SH7dYo5mJbnaGiaIA7t1W5eSRsjJRf
jb2ziLZDiZUu/XtwiwrLFbRMuutfv2pI011Jp0SaLYrg9bJrLKKVXndYIJOd
tv3sTuipKUWiiHc4KO6j4y72XskDdZNj9pQ8PLDGNlZBpFfLo6dn58I/Qvt+
JSPQAfIGq/u0TzCDc8yOjJz7Y8tx07veofsIZN5IKow52nqr1jWYCF0+kQm5
aknzvmffa2ZO865ff4fwa+xncChE1zE2qhtYK7TOY4F0/H0iCS3wpOhD5yQ6
Ofzsp6yUkl6PKp0ODk34EBnp921n81dGdxlO00za4gubvtTkk5u/kGSUmz84
AaRBGfvIzo4RpnOIePbj44feq8EmUDaPMKxCrvmzUQVQzV8d81QxwSbPLDjB
dsjV6yh4jEhgEFbbRPcC9w9nCA8mXuh8pujIon80kID/9b/+V/C7dsM/vwve
W+pwIYc9DN9v/vqhPdrnP74sEJjv0asHD612QE/psem7qbt/DRtHkYEujVLm
Qlf7PrT/OH0f4Crv6/MNU3eabh413PXPe4eEqnsYj7pPU1VcPmMr9tYJ05z/
p/ylJAIJmdsluVPZNxYQ7+2oHsFwmm4e1TT1sNY4zRpEcIw1ziqd1m+zuN6W
Wzs+7Y8fFg2tX5giiWb7+YP3bmu7usJpvWVpDsj8SVVwZMMeboHa+z1ab373
u22ngfBgF3a+twuqHIjt7T70NLw3d9wB3HIpJwk42D0ewukbc/FiMBs6BO7b
LhKPR+f5znb37zc+/2C4IDUVTmlFOTy4XBYrxk10NmfcEgt/1zpKYCORtUnR
pvTEptSA798kyUosidw91sIghW5k/YskQylG7NRbJe+UdeIUp2RBwEidggvR
h1Q2k+omYQVU5Cm77V5fElBTQilYC8DazSDGHhClxpFQYFFCQYpdLe3KeTZs
Kggn9EaDILUCAHmmOaE35KA15Sy7EiSc4gNMG0kqcbhuddLsCERgr80SoZ6/
Fafrx2fPziR1WS65UZ/RBeZ0YqJM0MWC9QJe1oK28W82Ls/G7f784cMnVHqc
u7m+XQF7S5pPUvLgW8ecxj64omjSPGZhNM1W4pJA96hjZjvlVLbm1nn9LFqI
9rN+QVovt5raXRNxAnCdqiJckMWrwYW+Z5R9lgNTylqhG+0uTxbZW4kOp0Br
jgqibG0csk3JxjVhkpvXk9E85mK992gd6JxyL9Q/q4XvELHYkMmpxxKUhEpT
WtT91BhmUIIgnzjOD5gbywJNnJLoOMpnJ5TLpAPWaDKblYEUxnS4K0kwrQWp
GWZcP9emdrRh1DxLyuvTlKHaQMTZEDa2wOyNoyFbneJIUlHXxzdnbIlFApaY
L3SZoOgZ5bd2R9zML4xHaemm/1L3PcUkfwjSCVKtVEpzRvm/KsVeYHQ2eaGr
Hjn1eUESqVjEyEWMsWubnU3LgZJRp57eEgPwlHWgyD6Uou1GUUZDwQRynaoN
1bLEnD7g7PUwihjMxKwZ8REVm6pAHj+r5t5x/Rpv6Rhx4s2JJxVTAcrrxOvU
5uYwvmYDIeY20rvqA5lHN2JulVw/5CFnRAe6TrS6/YEM9AB25P7ROPwd9C/2
Us7CMnFAd2hZMqoMs6UPMZqapppx1MzCxl1i4rld3VkTrp2MJXriUdBqluxr
u0FXkOT1NFvr7hHXu3XM71OyCF67MT3NSgQkzyoMSe4nvoy5Q0uTlAxINXYs
+tlweG1m10gvUS9J2wyTsjt+akwEDkNPVJRXqtGRGtJO8lRavvAMlNcuN/l3
zFRyy25jbgFZ09LrueUcAMcIoZop3lXHa0TMK3RVViqcehMmJxKgRSzO0vEw
Euu34a/EzrE/nxVRnX++/Vee02E8AaDz6TIf2sa+fqot+qlgSy++7uv1j6LR
OgqX6bxFDf/lX+hDFVjlk2lLdIzymkh9Mn39CLNGFa0A41X9WcIyf4JzgP+C
7B2+Cl/JJxumwJ/vmO8DsvJs6IlfHn1LfAksIH79Mrq6SqZ7fHwJN9v+X0PX
nbv13dXPgw3gDY/g8wPaVIO/Tfun7e5v78iiiNGcJiZWlZK+N3Vuw1l1V1qb
O4KhPCwL7gfBhl5CgYS8EVgA0rlPO1UQ+SjG69Izo2qvtqP2+vZfabLVRYmg
+VoVGve39U/dixq0zWqyT9atmuk/WYfEfmzoDbVzgBur3b3EWXGTThv6AXqL
+RHbKgK1Wdoob++zULmVYGv9Jke9J3cWJmHCaEe8/NWGLbXopBObnUET2oqr
peetR5Jg7jRLTLXRqeNtaRJzSCiOMN5Z7nRQS/XHXpua0HEzpXUt6aoR75r6
wf58m20JTjgil5/O67VbJbiVUy/b+kQgXFcIHY5cJWdsGNeqkTbXJD1159/A
F1aSEquv1yKbclZgL2ihNuXa7EjGbJ4eh6u7PrQgVIYoVdbcOPHL3f6Z4a6d
E+eVReLWDHK8Qkrlai8MpyAOLLphJhK5co9jJdIrkG7m6rIaLbMlWXvchP2o
1mCmRxICo3DrJsDB+fh8Ax0JJ2OYN2VmyogZjbYuHGPr/AmTy1bDUJqj7zqa
VrHXKyQ8RY6JExiSiOC6BG2biUyd0yyKlqE0VkcgHsCTyBk0dMXzOSLvJ6re
PkMraoRSDp7qd9an49S/NtGkH1GGfLnC7HeTjHNJbbjCjAdxugJA0xiZ6/Kj
7vceFTTHa9P1uhNGXF/MEbiYZTbrRHG++XbelH6uqhqhoEoUQxUkxvMNlQCa
r5aKGaESSPLzbmIJFB3Z+dljZ+QVAMp/XqVBxlRiVFGad7xSMdvYmUSclwtW
loCHw4vRQI0FHRLjwVadSo1Hqk6taQcjVoOJeNEgE7hnxfV2F4ijmGRxykGn
TSB2JtXcUCn9Zl6pFdYZHdYTeM/TiiHQnmqjmJAja5PuThlRUfxHRaPRFjXU
oK7ETBRJrO+o4q/lceyK5xytd72GL2E90ZSr0DoQrmwAlXJGbJACxw3ToDg1
i0sUJlMWZFBFbxSuG+iySs4GnDOPRFliSE3seGppeidyWhONl1VF2VTQEgnP
cnrF2RzDgy1UNlSQUu5IfApMzWu9qIwcPHXWSVG3Gk/Ked9lWewkEZmMrRLG
WosPtuXI2fMXnSacgAduhp4QljfynAoG7hs3mpm0myAIDHd8QPpht8fRIdEs
NSEaK4aphWrUacwToRnbjhDFTnYtf4sk9kBcNw+rKSpIGzDLIwprlaBr3zn6
0NEDmM319ADmoL91LLUiXnWbxDAFdFv2B75bw6XgfCral/o/DaIfmxm58b9x
cwPI9jpPvcZfjQ77vYMS7XZNagEEcU2cKSpf7npvTKqvVX9HSobd4ziizVY5
cWM/tIv3t43E4cu7JMYdE73bCBXhcWffwY4vwm9tP8L0H+0USQ34NwCd8UZL
9u4r6Ib39+qWPFc+bZcYDrt/j8FGzHT7FKHcg+z9/ZoaSbzSOHALRCrR+LfK
9e45NjTrD53kD24XDmXdTSQ0a23jHG6dvrYpIU0/r61HRHVKXojodrrl7hMS
CdJOXGrVbNZ3COPytML8SgJOcRa0Nxpl33R2gW5LP7iaopxsJTHdLlF+S6pf
586hiRw6hlCZ2fYkXY+XTnLMFlucGgwLGu6mWbsw3py+tQqaOF6vblkxUayi
OFFZ0Zm81ISXcCoxHFT5FVvJxV02mQoIiGeYipGDNDj0W9drhGvzKZunUq3O
HaVX1yXWcr1B2yDDzyvig4b6nLJT31wnvHFLt9uJza9vPA7eJLduVcfG6ZQa
5uTK/QZViCFsUAgY64s7S8QrLOY4v7XGedHukBrKlpWyYqKrZ6qxAeRTYVRg
+pSsuK5CSz0C2EZUUcao81dXF2uLYGyqQXq4aTqFydTXOO0qV0KbDWc5K1kH
QuFKGIvMkXsAoLat58Bx6YD0pdT4Searwq3p5yIACoScFoFzdNq4JFnkvTzL
yntedeuI6rrZJKMXXqQ/ydpSV6haggKLsKh+ZVMWAOnPIkNVneNbuCU3cWWg
OdUgpnGwf81cUytt8bi0qe/RN0PPCBcd+uHlOTtHlNEC3X7Q75vC4CMNnK90
t3MXnV13mctEyiaqZFYTxfBoixezFMBwWfKaNbIlNjh01q7fcK3qjdXacgM5
Am3lPjn0+GNncT7xlZV6V2zqqnr9e/VWdZkcFU1eOLcOWnLsqejFJdJTlY8E
C9nqqoLGJCA+bLjyYT7NGREDr9jmlKsDrtPi2uyDc+8bw7YrWjXOSWMztzWs
ZfpmB6w3qDwlVCSHmITAWPgZg3cNLwmWCpOovpYMeGN/fgb4ShBdtRej7hPn
tOb8Eq6kZ5OX2APi5HyqII31CW3CmU2zks9u1A+jCi1Rn+rZqgDvsMbuOcgj
V7+bwN+ni6r+iWq90Apqh+V2TwBYFrARFB8HBm/Pt4Nl48QVQj7hs7xparSD
NZnBiQJviJG0QTlVKgici0R2q04Cj03j4ILHWnAvebdiWEgoq5rsmIlZcM3m
KyJHN6KtvlXnCpNaTKpYwZXhPHULSrhE3g0RiOaWkN8/3DDjwuV2Fai+roFL
5JHvVZkbxzlz1ZBvOOcNiDiQ1GGLOJFchYTOgLOYOs589sYUtxipJUzVqTlJ
rGa4yFD5c2P1R1bHXfgGAAUo9I/zI7cwKToi1Id2hDNt+TWna0fH0Vbsh16p
W1hZC7s2BYc0oRajkOY4R0DAAgpPX+fcY5IdkxOfNL2mMjFS5HLDR18bvXH9
9PlrNzczQbfx/pOrVMHo62LuDr5sInROOgKRLXOqLLBG17k/kN+yp9TYRlRh
Y+ttcMqIdMaHjpPBJMLClsARUwV0T+W+kFrHjLVWDiSXxXnyNhIEbqiW7ZUU
qleooQybZXSlsdrKEDdDsEoCdW13B662dKC7CR+50hD7LMrHaqtCOFeX1KIk
oVJnA715jbJbfCXrDTgDIKZr90Y5DKuLrK7faLjuDgDT1GiZpTgH0pLVan7r
7whTKxIdmyDFpc+Yrtu6slyb1dT3M88Pw9rsDVcfbqzO4/PfyBgIQ9r2+CkT
PrNKcu/Wzfdow+kyaBfmc99qZ5UdyjIDOHUJuiG0zR9AKfNkxYnoDKqYask7
aKWg2lKATyiGmekiTn0tx4ySQH1/9hTgtuILcn5rBRzTLdcxLtQimHLV5qmJ
ubZ7pwutYiQl9rvz+rGVLuHQqkQ9B161dIlfaarpt7LlqWrPWNheL+/ZCFBj
LcIKNqRusSy8NNCkXu5uV3twbbjWdFfr05m7C5vwufoHeDoAU+MHCblr1ays
wTNBEnDFHZSLelN2kbmTHa9oYsIpoFMFYSQ1RJma1EmHxp28znGSXvhDp7DB
j4vEnD1nZmfgzA2jOnwB2PiAmjPuln/ytR+OiXYfJr3R5OYbQGtjm2Alx/jm
vK+44RoGREDsq+E3KbwxwWn6znxsxRprCDYqaaMtqw9m4VSRMw3QzGZPrGZR
ry1TPKnuOsFK0KlR0qorc8LVzn2luGPRFW5FtoM8HC7Tq9eehhxdu6oRYV5V
UBkWz5lmxZok7hTcym+YLFSTvpTC8piwj2r6RBMMEdkIGE3sYu3jGi/D+ca9
a0XqL1NdbQxYMZ0oc2/5LlJFejPRjHcIGko65GU3y0nhTPYBTW+mZaP0PRxC
HLHwwN/yQjwAwCmwZyhS6dxa4SrDg801AaX2nRMgpcWxKfEy8INTzZFIDndE
UNUl77AZGwWbVTVedX9pwm5NPOchMDvloYxOatoKTgvrW/hReFUFS8aCGxkD
JD1bJjmTWCGgtIvyb3FmIc0IRzWnbpaOp4/RKcto3q3AY8Hg8+yW0dSpo6ap
MKqMNZfG0aeI31zKmqp4JV5diWuAU5TH1xq95JgeGuhpg2qEd2uj4sR1dxGG
RIHjZICPlr77k8VwMRhR9V1OlKNI6BUaqrRvCbfEeZ0oVi+XoDrmax3LzTzL
3oRCExRfUUpWNoEnDT8mkkhEezEKDdY4tAyvdMNZFzF35U10a7NquTzUkuY/
n7Gg3hB0Fe53qTTA3L1TmrbEu1wMJrhX7/Yro6Gtc05ZKykeH3q9uH5DXoUx
EEG9wmJPOZO+5nUgccHmdlAfNTfZvKPwQZhVohhT40csEZZa0oMn4BZ7Q1sN
SbzOOYHt8ykBheNphKF1N0KHcZwq5+gUr9eZV9kFL4DqycZdxPrWQvL0QNgQ
Pb+0mDWJmeR0DzFcHe2VIA5gNZhLom7vQ4xuDd97JQbbXBrG/TfoYsULNFu7
qQCOwj/MswmA9r1NFgZ/n6Hf86Db64U//AAPTBEbPQ5SddXoo0mllOWW1gS9
HaNpFrI9BuNMfFvG6jeP5fBY770acjSmw1QFA6y3ASi8abJOTab34Yvnl4//
bK1awbCpsfu3VGt6r39Ym5PMv0vAyrI5MC3wlxnWy33+XjM3NvnQevUhVZWT
YrLmEHOhAEs2i4prOjaXHFzfYVbGr6JA1TXEMdyyL+ZIHgbdvjdTEfBCcRTC
KTtl6ugDOd1aL1tSRbL5VN2InbIYon++YttRd8PGNOwsJkqj/BkUl0+nNOiO
90CMC792HuGG60lLB9VcA/bjBRWSnJGnH3toBt2TpvHe19KGwaOX2x1yNcmZ
uZOCXqe5b6fO345uWcXkdokUodwBHrwdESR0SyJdE1Yqk+w9zvJ7veaTUK09
yCD2s+oHPXOIKQaw0gUmLLJ1u6D90kShyomKzFu8y+H7oDfYQYJMCcU9aFAj
iXNOvum0WkENu17IMy11xFlsMc/2j9dBbwTfbKE9L9Big6aT95KDXH4KFWEd
QrDkHtKl8Z87MlvLpR3f12o84tycfA16I5mLKAjwtmkroOU8VO4pDrWohVdZ
pq4eFR9pNmVlDjX7N1UgcS7szHGiJVGEZyASh2iCVhmJNGwp5eo/NJjyx2us
3QGUemmYSavzr8fws22J4orUpYXZEi75i1DnVP6F5jQ1KUBNLmgWRsSVhxiM
qaTacFInoI4VV/jQMjwTk4cCOfrEDcPn1HdTkw05zR2ETxeSzXp+y6Xs2MdP
Afmar5HXdI0IB+9eLBYfzP64fMsVsuJL5nMd7kwd17T+kVsWxmejSMfvJmo3
ri1LykuCQER7B00G4MsYzfVqr7NMEnPwa6y1rqIcGwxNjfCqZGWshJGWGnJs
aXrjSfBfmntXn8zg0IeTW5WEy5BY3xe3Jo2xaNolORn3DQYsiBhQzDiWF8NU
8KhH8KqqRzWTbCs8e/LEFmixrkIcvlhiqhk/7IvkYCoFoDbvZswg1fuW9001
iHg2QCpjlTrdeemUXOeSJcdR2CogtsR7E+YCN/FauAmJa3Ls1jXgaCUWYe0E
V1+/zG9fk0cU1yeLqzwJ+STm1QLjtuxYNNHaQo5lHIHl8jqwFoZIWgqYivBy
HWMXhyHVD71JC/+1p12pzepwGzDInSmmHJMiWsCs5hkpHRpV74isBVeWIHHc
hIEQsm7Q1iuTVjhaATsfJwgJuY8gqHJSXgCCTb2AJIDrq6IiCCvqSVgD0T4b
j0TXLlfphrMOpH1ZzBBNt09DS8tME6l63hTxTS6YTUHfrYabrBEzHZZOVl9j
8nT5KOU2uaMZ3ow9QuulhD3Di1u3WO1B81up0GbSfCPMjP7N9UYSlfjmBVSU
NGVNIXFKmgb606obvB5qugZ527YzcpUN2vZM3xZVb3Bt7/AEGuT/WxDUZ2F7
wqQHm1+/vvolXX1E8wk0731Ee4Az6p0/oocn/zX4iNbzXxZRoMqaGmqzRCFY
Te+cJ96hbpQ0qthsyhYR3xe/adChJfNZK7xO3pHCmCuKkn5Ozro7/J2x1G3s
ISiLQw24KS2a0VJaNWNkc3MKrWh8hVlKyujuzb4DeenOjS7ms417XjDAttu2
0CReaXZYhbbToxuVJA/bpv6wq30Uwes1Cl739+pGCxJ/XC8kBIvhK9gUrEJv
79IfqQdFI7pfOyxVIxzSndpZjSzX+LWt92peiTHeBIHK9br/1JR4b+u8eoXs
CTA+g9s6dk79nuBAfz/oiIIJ92rASg+7C3fbPCyaCBKcIR97ztIUYv441BeF
RFsVEnfDV5KO2kYRcafG6iHpxg/aq0cCRF5TNvn9OsSiyJpIqDGCDsvHv6bS
8ZgIel9caKOX8Da0ZVPJD98/fo0ZXfc8FqyAgR4BXkeoRj1CfDu6AwKwWleq
r+LUoJN98XVWtlXiMS0DF3ngguSlEhHrjgyLJaKJ2Z9zqoqUFviIRIpvw59+
B2t6VU+9JBdvAxd+1Jh16TOxlrVIw+285X9b1nL+y8czhp+Kb2p9NOP0YXzT
h7BN+3BNm4KRzzbIz0YApBg5zlG4JbifdCYllsAuM6cio+9Zg4mLNRET/q3G
wpkmJPR0GBwySLIhZ1NorD6CCRM0JT8J5pgsQR+46cwxVQJbW/5knDkxOwI/
w7IDwDZi9gNU1wOx5AJAfsInZi9R8RORecrEPFqXnoYSpaIwTjmnM0UXeUmd
gwCpsF+8WMIJ/AKI5U0WvknxNXwqKlYGzbk1RNOwmvwHmiftNgrxM6t7KaWK
KWkYjBrJ1cgfIfSQxpcIXkfL63XuqL+Q9543LmKeXYkfpIHRlF06varNvyR5
ZnN+2dUwxFlg8r5xDHukr/7mGxnpm29cFyy3qOwWmSuo4b+SDWcucOZ/ono5
8uQV0whHryxfGIC9sl5rpOgouTZoQe5IVBBDXFwkd5scAUYY48nV4iDZxF8X
SuFlIvpMKj6vjjuMYvmp711RXR4mijzwr8gjX/d4P3zFs7+I3EoXmtGU1ZcU
KWtZupa3Y89SLY9tXVLJ0QFYECoXOZNiMpu6Q/Q7W9oc8FygDHAAegba5T32
qYnJW1Lecmoz1yV1h/OGsW9oqKvhk1sa04YUDICfE2Zf5dmatZlXFFFNGMnZ
d6myPLp1RTZrLOF+WTUea4SWluk21WnFYrSIJGBkSzeeY7iUkibEkz6jkDKn
U+I/erTUis7WoPkwLDlDnUJSqBjlTFs6eepslPMjcUBarXPcVw6sLo35kcZi
BTVSsKaxlNyhscn6OGZLDNpeSmVdgS2Vhp9FMRqwyDAgTuFeFR0LdA/xFKZk
/QApxpZcXSY3LgFrKNfCbvsceSReXK3QZrI3vjsROZAZjBUAW+wLH9yqNYYU
6lHB6Z3F3dOhx662X7TMaHvRYPaNxBvptoQiWoukh1JosdJibqSDdeoTW1ZB
xkbtsD0pTuJ8RhC8sCnz3i32v0pyLeEZaVVW4y3P3ujqOc6bTEn3JQP2rY3W
RdnUDArNAK9K79GM/drN7qKdzjAq7q7xmSC8XYonqbG/kQ+U4Txw/72rlBNh
E1djDJa/d+mG7EpJvsVFxQIs7r9ej5afsc4l50jyXG8TcYl67FUeCKreUPUa
k+9NJAo5MNXKTTrv+8b1hKRV99Wg6jKk3pXkK9TkGKTvyWdB/RLcYe0XQzPu
M8BkHdu+HzU6Idj3xzg5Rh9MFwx87i+wf+4XYwINy+nOc3ExEC8CC2vnk+o1
J4kHyEkZA3bJHMYXVLZU+yB5JT32zyq3KfR0OtVIa4kIXG6JWWg1WzX0Kg5U
zS6FYkwxJUXFlZiQm7I7Ct/kIKgbNu9e7o5Veubl5cANWazYiKyRJ+4UpbDw
imqQNE/TJkZ0H2qSTMk9woTRh78xLFbmhOYyynhBZHe9fLNEn2X/dG3pLghM
gRHbxq0S8kGlRbxGSBWBMJVRjnW3m2qMuE5qpOB2To8lHsRl55zCtrzOE5dP
anP5bUuaTlVZIA/q2utW9YuqYtpL/aAf1XR41Zy4DnUkjgU369F5SN5JlIUW
//rtN/ZUsuIEu1XMMRvhrUEDllAMxmo5dZLpOCqWaA11wIMRl2xQn8ZwY7WU
xfAFTQqEU7nUjZBX/wi2VU+cQHoReSwargsxK8GI9s61KUqqK+PbgpyjvcKY
LqPwGHMaYofYgz0adM59i3txuGszm/aybtDgNEpNaTx24sG2JBqI0pX2bG+g
TQsCqg54awXmOldMH2pgj+SIMlA2yZ+rzapxO1JRHXi0K4zIKN3uPIJJ4Tra
y9eFSzSZSeCtsT2b1q0KOW3eHWf12zKnbIQb0Mr9Yec67egRWTPXJSvYtR6v
joPIb5SN5h8DjgYad8RBa7vaDEb0lMZuH1w8ev79RYW+4MvanByLGEeFsKTm
ZCWZY3IQ6tgE91iuWFhKNxMvo7ENBakkdHdn6m7IZkudeag5gSmhzj4kuOW7
p1S8yVvGPcRkSiJxqXty3Gl3uvD/YadzSv8PazKZlZwrw6iWZImERaNBOEkx
KYLvG6Yz4axzWGp6+1bcATMqJiYTQrrhvc1XF/llWkgwUH8CwH/fh1anZi+0
yGbVeulT+ZR9AskXdYl+tAtgJ9pxgmkALEtRtKyEYwZLxW2dhBn0nbrGQHEp
1MQfpUb+RFGW32tWKL2PyFiFnbFf4orZGpirps1LS0dpfA+/vgf8WJnOvdmI
+zDGa8+A99HYJk0UYMXY2m5Wge6SC/FH3qfNXQgEGwsjI2kEAYYx4Kaq9FEp
QebsBd24SLY0N7HtRncX9QRUHS7CjZUSVzHVf3UwwWi50kJjIDFIwJgwCaKH
6mqdijbFnYlocurno7q+O8JH7KG146F2UnFm5esC8Vte0PGdSTV6KQ5Mcbh+
ch1OSzJLclEJabdcWMJ4HOvnVFOKyBuSykIC07hL0SvYiwsTNH8T/oE04fmh
/RPlpIuf19Ecn5k/nmBsiv+OHx3SzVEY1YjvvIeESRM2ac1FTq3F9kfRWJJ4
JinddHcpxZd6P9oWmBRhpWSVEmtoKUdHh1F1MjKMLlH4Cacto6Ji0xBmKJ0B
ji7bCS5PGAXkOsm5NK9VdUsreS7suY/NVFvhPQJW+Nefun99dc8wEmnBSadE
OnASD1mDAJWZRIQg3WdXhL7acFRt4F5153DAVgeGpBN4T/YOH3Y7diJp6U7D
IGb3sHP4Do4e4Bur0Fjjpskmuofdzq4w+g1mZz3GnlZ+00eon3dtxpWT1bZg
bqN++9Qkit1t88b4u6K1Z+fkc3uX3smiHrzax/hOEwmPvt1zKle8zZ+tY8b9
T9/9Z+p2Tmj9eXv/ABcKshf9SBX/OPI4ikuvZIs5aWnhKUOEZgEzkSwwo2ls
v8T6uTbb2PzWJ0ZIx7uHvcM+TAIPea/V/+urQ37YzmP7uN1130ySMrKvevZF
NF9dO2/6lTcD51VrgC833X477tIKaFkzWYO4KCz9WgybNEqh0SiZ2dgwIe9q
WqrWSu6PFkarFEAW1UYqlzOyrpS+hCMsNuj0bD5Oa1/wxDdSwFnJJnFrMIpf
kRXnD2B66JLFyXyq1S2cIOzfDpuBuAvyVrtW1E2B64oOqDljsr2LVDOhpkKr
EgIchcujSa/k2inZCrJRRVZoe/ohQUO44Sn6Hzx7/rJSxkPsKPgdxRBhEd1l
IupBY0JEeYAKFokGDZOLyH0M0JB8tXBYeVDsSGOmcwlodhWAbokOk1INVcTX
twVlfkLbjNb2oPg0NNp7DIX1uTYas2X4/JJucFd77co64QJTXQuDBd/YEHBT
XKqhA4vB5ntbPsztXtalEKKxOKEyR4CZGHAvJS2jw3TbFLThhmFxW8QLQiKQ
BEqndr+uJQOx5UEMrI3eBzhcsqxfYzbzp+c/kCk9/DF9lMoeiFcC+a94/aJq
ubpf3JkJ5EAvAzLu1Xpll/kZ5kaf5litF/1x0IRv1whEDnO/FI6LjNMBiMmG
+nB2Z4fcmaxTRsom032WFMuvS5NSphoGhaWmvd1EcUBMAbNsrTgNW8LuCCAA
T3XxyfwoTzh+Etf6/BLX46638s3g0I1LFRg72VmeX7bc5qxkd2k4EwRe55Rs
55I8BS++l2Q+B2nWVoIG5hRv45JDOlNNpw+Ip6sy0g/mBEkkpTypi+RDBjO/
JoIJ0tTZi8eHOnuU9SNm1jnEUqgBknlKOudlMWlJ/jmb6cX3AnOBJxXYZLmq
jkp5DFSsYCJvTKtiNrzlp3CkCDCTmh7uhzXJxBoESQT/q/AcWTzKyYkE7TT8
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
z1aMfXED/jES5OIdbBM6DbzAGAWMCnmWlDdZ/iaMWAlDFbYwHoQK6GhitEca
2yKO/5iCFlNhYOZZ/C/eBQ+j2+D4EP+Dv35MkjcbzFXW/8kNsSS2UBbhboCT
TNxxIKYc5PSxcVhm2smZvu/v2ZYiNe7YZikAu1srUvmpK7qmIJBk55UeDJa9
pj14zXugYaz7DkihMpoo/vc2cckdmqMzyBR2Vabp9CT7Dc0kZQon09A8KfvO
ETrHMW4QV/xBoHPt9HK9xEkE1T4tmPy0Ft9SSb7fm1QTm9u94N2X7/nXEwwd
3dxET4s20t+Xpakus+9GGmOrixqnpPFo1Z4rypxqyPKrzYPRBrFvU7hl4/0G
r5/PXuOOeu30WId3+Of3eyOFnQCMgeMjzbATaEABv5aK47m/Z8iKaXHaROEd
HN3qgtcKrd/Y/X37qHqrte7Yh+uNYuMsGndmlzl+r/HUMaLldd043i6vgr3G
q5s9/diV3RC2MnZr22wblPV7DdFgTWh94iFIOdaq9rYvDFDCqzXeuzXgV73x
3q2RptebNwMn/F2tSkj4m9bi+L/inPKF0fjCaHxhNL4wGjVGQ7zpknfoQ77i
Or7uE02gzpXaSnRSZI5jxT74YhAzsc7GRYJ0RPS947JkLW3sMTqRqHTmZzwn
jAl6wqCD6IQct9XpsZReNbkd3KTtZYaeHxKfrfEA+BFPYpFEnqsmiJnzaaUC
RQJTOJRM0zpf0dSIIo5Ue0Ypl3gfiorfjSV3EhBrBIrmCfE9MZq0LQQ29lFA
/QiWEpdAzcv1AhMM1pKOGwOvszkYgYia+eqmqVZT21BScgmNvUNzqRGOEYsS
9LzkOdpWEpuOzyl9OaVkqH+24Lhv/Gpoe5OIdi5QLj80GFai2HEaP5mI61cH
lewB94ORGTRtLmXf1KHGYTf0h/GkllXeE1gVI1ilnE6A8ah/w9xOolDlSf7H
5fNnbZ4nor/WdGAt101UNM3cdIkhorfRYu53SU8+tMtuh3aGE1J5Hmnv2SCd
OSY7m2rBFPCseGcA6QnPOJD0PMPyK3PqpaAAEPgIdV4rdEgvJCmVDzTS3nkp
t2mXC8+YtGa3zkdpLg2kAEuhGGcyt7MfECWdc30akBtiw0PJKzDl4ct8TZbM
N8mtptlBlaWmf6Hi4GV0pb6SGCUQhXmWOVZJJJxK6LyBlLLhfBr88tix06Ri
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
p9X4qdim9dOmVVkoNq752zD86RvaildB7Tu7Pm+ujuO809HWOTS0refa5YvP
nW+FztEeHFhq59YgqAYP6BPtRWqa3Q9fVbqXOl2WZafHbS4F1iLQHOEVeYSO
/fuXTvhSEmOPpl9KYtQ85P/7hKvsKWnfJSrFZWT+gQJPaFqfMsLkozr8vxlP
gmHp/1jRKPu2JpV6M9T+gWJU8KJtjKT5Es3yJZrFDWX4u4aKVLJG+/KyPKyz
PLgAKS33Gius3d+rmyr782G9ME/CnLQCsyZF0du79IduEWZb9mpnGZy7tasy
C7b1Xs0r9ohNEKjkYNl/apLbZWvn1RwwewKMci1t7dhJx7QnOFDvBR2Romuv
BhxDYHfhbpuHXFKUXxU6+T1nWePePwz1K4zxHfGVWWONfbtbY9V4uootm/BH
63U/RSFhvw6JOIpBrZHbtARwTxhLgWe+rYjvZdnuDtvECfy5nAbtsGWed2LV
rGxrHQvTMnC32FSOIFLTHdUS9ntQNHS9WUpxi6ijU/apUeT44srGGu2tPTun
sK279E6F2gOjb/l0teKvyIEh/2wdf64a95+pW0zj+fkmzb1vqjnfAD0y9twR
1mQI2hOAZBy6G1TIbrRvEzIl7QFHQm88nMxA1Uz3lPCs0W5/1Gi1b7xP6zo5
vZWN4cpTymlbYyutq461A8f2qg4IrhKx3hPa/Da/fn31S7r6iOYTaN77iPbT
ZDY34dUf1MP8l8FHtV5E28BH8KGzsQsIdBh2r5TOwfblEN7vmDNZQYMqz+Xj
nfBrdZSTFhuwTZptQbRaewPk6ht0nCqjO7f6Lnl35zYX89mG6fEk7CY2DWd3
r6lj2jR+bQLRAdT2wR+T20LZ2N/cL+kFzNkYraxx2QnL3dqgHgq99XMn+Hn7
PEzw8z7dccDzHh2SdLDts8Z45f0g5oQl79fACTresch6ILEmknM9/+SGbPZP
tLfhwnof9AP/Ud0dTe+4zX5meLE1+y+YGW32WLA3tNg15Rb2PQ/MLDaY84HY
NJngw3Hgm83Dk6BinA67ncAxLIddmTEZhUP1omFzbtg1LAKbaMPuIKjMKyWD
n2FVjCnRLLTRTOpyH77NE1dea6hmPh2nwawHw1Xm4EmHtRk21a90unDsWpTp
cFk28G41JU6dZaupaJp4NMegZHCsxpw56hHzUY0dq+lCHGzdYvuyPfZqXVZM
VlYfDB8Pqx9XBWr341FtRVXbkvPx8QZGs6qUpo/HjQV6KkYg/do6im2z9ujH
/erHpBuvzyLkw7HBWNP08TD4feXradb8MX49wjQxDx7W2iyiVXuWzku7h7bN
sbTZae6xTcY7Kh15/Z/sU4dF96jTXMGgEZC9bvVjyt284ePafiIp2/Rxvzkf
6Yavayv0KiL6H/drK6S8xM0995XUbDZHKC2pGx2UgDSZFpRu7DAgWNpRU/yH
w8YXotInP8At2njmg3eru3V1W5TZdqHNumoDy+pHWyjlFq2xQyk3KLAU72uz
8pRV+lVtWo5e3EzL3Kcb9dGhey43a5bdA9moIbZI3al95bo66le1/anpeZ2z
16DPbTp0W/W35urZrJ51r5HNelj3/qgrXL2J1cBqtageFahBv5ExaNQquIxH
k87AMB016dC2bZAATbONMozTfoPYIstzvnETNXnkyh3LJmnyvhnU+5GsTPab
Ya0fD9b0zcj5pjmXkuF+N0ojoWWFNwogoeWON8ocIfPLEhkWXnDYe1EN5pZw
+MKN2cbw7wWVRl1PkLxozR0phB3NJeeFG2B9GH7HyS1amGxjlZZc0rLFeVpM
PHlDKDfG1Wt5zUVWlDadtElZJCHoZq6UliO9wnwv60Kzf9g1XZw/vKTUPave
cJR3MfePpIxt4z8PLv7w+Fn44vvHfzp7eRH+8eIv9DR4+vgP351dXZw9ffD0
Dw9uf/7D5dPBCfz+w/m5/H1z8d2DP3RuopvHD87+8z+vzlb/9Ze//df5D394
8nTY+dOD8+D8b3+5LP/8u87J3/6wWN7+x4t89fDJy1+OrtM/P7/+/uzZ+dnZ
5cU8u8D05j//fPIf1396lybHz7LF259/fjL+vnwbvPjdJC1//DG+nr49y18W
sz++KYvzv1y8u/njszJ/9t2f05PnD/rPfnezPPuhLH5ZfN/rPx2Uf0x/5GVd
PHtYXxRt/8ta3N5qPZmnMSVFcjJK+UnaCwvwBuj98ODJ43MHeI/e3Fzc/OW7
P2b/9fiXv3XOz/7zL4/l74dn/xk/BHBdXP9H9OAPPw+e/Pzz28u//Cn+y3L9
S/Qf+ejn9OhiEkx+OVoM8j/Nl4//PLn5Y+f4u9vVk8nZ4sHT+Pxvk+iX77uD
ty+vpr/Miv+4efRk8nT4Zlr+8vzJZTa/+vZbZ/2VadHyKfOdLCWkMuISkywp
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

-->

</rfc>

