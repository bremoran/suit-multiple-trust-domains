<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-moran-suit-manifest-03" category="info">

  <front>
    <title abbrev="Firmware Manifest Format">SUIT CBOR manifest serialisation format</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>ARM Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>

    <date year="2018" month="October" day="19"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="Architecture"/>. This document is structured as follows: In <xref target="the-suit-manifest"/> we describe the main building blocks of the manifest and <xref target="manifest-structure"/> contains the description of the CBOR of the manifest.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Processor: A component that transforms one or more Resources into another resource or into a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
</list></t>

</section>
<section anchor="cose-digest-container" title="COSE digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest is identical to a COSE_Mac0 structure, so no new container is defined.</t>

<t><spanx style="verb">CDDL
COSE_Digest_Tagged = #6.19(COSE_Digest)   ; 19 is a placeholder. Value TBD
COSE_Digest = COSE_Mac0
</spanx></t>

<section anchor="how-to-compute-and-verify-a-digest" title="How to compute and verify a Digest">
<t>In order to get a consistent encoding of the data to be digested, the Digest_structure is used to have a canonical form. The Digest_structure is a CBOR array.  The fields of the Digest_structure in order are:</t>

<t><list style="numbers">
  <t>A text string that identifies the structure that is being encoded. This string is “Digest”.</t>
  <t>The protected attributes from the COSE_Digest structure. If there are no protected attributes, a zero-length bstr is used.</t>
  <t>The protected attributes from the application encoded as a bstr type.  If this field is not supplied, it defaults to a zero-length binary string.  (See RFC 8152 <xref target="RFC8152"/>, Section 4.3 for application UUIDance on constructing this field.)</t>
  <t>The payload to be digested encoded in a bstr type.  The payload is placed here independent of how it is transported.</t>
</list></t>

<t>The CDDL fragment that corresponds to the above text is:</t>

<t><spanx style="verb">CDDL
Digest_structure = [
    context : "Digest",
    protected : empty_or_serialized_map,
    external_aad : bstr,
    payload : bstr
]
</spanx></t>

<t>The steps to compute a Digest are:</t>

<t><list style="numbers">
  <t>Create a Digest_structure and populate it with the appropriate fields.</t>
  <t>Create the value ToBeDigested by encoding the Digest_structure to a byte stream, using the encoding described in RFC 8152 <xref target="RFC8152"/>, Section 14.</t>
  <t>Call the Digest creation algorithm passing in alg (the algorithm to Digest with), and ToBeDigested (the value to compute the digest on).</t>
  <t>Place the resulting Digest in the ‘tag’ field of the COSE_Digest structure.</t>
</list></t>

<t>The steps to verify a Digest are:</t>

<t><list style="numbers">
  <t>Create a Digest_structure object and populate it with the appropriate fields.</t>
  <t>Create the value ToBeDigested by encoding the Digest_structure to a byte stream, using the encoding described in RFC 8152 <xref target="RFC8152"/>, Section 14.</t>
  <t>Call the digest creation algorithm passing in alg (the algorithm to digest with), and ToBeDigested (the value to compute the Digest on).</t>
  <t>Compare the digest value to the ‘tag’ field of the COSE_Digest structure.</t>
</list></t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Value</ttcol>
      <c>SHA-224</c>
      <c>40</c>
      <c>SHA-256</c>
      <c>41</c>
      <c>SHA-384</c>
      <c>42</c>
      <c>SHA-512</c>
      <c>43</c>
      <c>SHA3-224</c>
      <c>44</c>
      <c>SHA3-256</c>
      <c>45</c>
      <c>SHA3-384</c>
      <c>46</c>
      <c>SHA3-512</c>
      <c>47</c>
</texttable>

<t>N.B. Values are provisional, pending review.</t>

</section>
</section>
<section anchor="distributing-firmware" title="Distributing Firmware">
<t>Distributing firmware in a multi-party environment is a difficult operation. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authority. This topic is covered in more depth in <xref target="Architecture"/></t>

</section>
<section anchor="workflow-of-a-device-applying-a-firmware-update" title="Workflow of a device applying a firmware update">
<t>The manifest is designed to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing a manifest is as follows:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest (verify PreConditions)</t>
  <t>Verify that all installation processors are available</t>
  <t>Verify that all dependencies are met</t>
  <t>Run PreInstalation Directives</t>
  <t>Load the descriptor for the next payload to be installed</t>
  <t>Load installation descriptor for the next payload to be installed</t>
  <t>Install the payload</t>
  <t>While there are more payloads to install, go to 5.</t>
  <t>Validate PostInstallation Conditions</t>
  <t>Run PostInstallation Directives</t>
</list></t>

<t>When multiple manifests are used for an update, the pull parser is not possible to orchestrate in the same manner.</t>

</section>
<section anchor="the-suit-manifest" title="The SUIT Manifest">
<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>To verify authenticity at boot time, only the smallest portion of the manifest is required. This core part of the manifest describes only the fully installed firmware and any of its dependencies.</t>

<section anchor="severable-elements" title="Severable Elements">
<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a COSE_Digest of the bstr in the manifest so that they can still be authenticated. The COSE_Digest typically consumes 10 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 10 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 10 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 10 SHOULD be severable.</t>

</section>
<section anchor="conventions" title="Conventions">
<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are lowerCamelCase and CDDL structures are UpperCamelCase so that these names can be directly transcribed into most common programming languages, whereas hyphens require translation and CDDL prefers hyphens to underscores.</t>

</section>
<section anchor="payloads" title="Payloads">
<t>Payloads can take many forms, for example, binary, hex, s-record, elf, binary diff, PEM certificate, CBOR Web Token, serialised configuration. These payloads fall into two broad categories: those that require installation-time processing and those that do not. Binary, PEM certificate, and CBOR Web Token do not require installation-time processing. Hex, s-record, elf, and serialised configuration require installation-time processing. Binary diff is a special case that can be handled either in a pre-processing step or in an installation-time step, depending on the architectural requirements of the application.</t>

<t>Some payloads cannot be directly converted to a writable binary stream. Hex, s-record, and elf may contain gaps and they have no guarantee of monotonic increase of address, which makes pre-processing them into a binary stream difficult on constrained platforms. Serialised configuration may be unpacked into a configuration database, which makes it impossible to preprocess into a binary stream, suitable for direct writing.</t>

<t>This presents two problems for the manifest: first, it must indicate that a specialised installer is needed and, second, it cannot provide a hash of the payload that is checkable after installation. These two problems are resolved in the payloadInstaller and payloadInfo sections, respectively.</t>

<t>Where a specialised installer is needed, a digest is not always calculable over an installed payload. For example, an elf, s-record or hex file may contain gaps that can contain any data, while not changing whether or not an installed payload is valid. Serialised configuration may update only some device data rather than all of it. This means that the digest cannot always be calculated over an installed payload when a specialised installer is used.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">
<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Pre-installation Information /  Reference</t>
          <t>Payloads</t>
          <t>Installation Information / Reference</t>
          <t>Post-installation Information / Reference</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Pre-installation Information</t>
      <t>Installation Information</t>
      <t>Post-installation Information</t>
      <t>Text</t>
    </list></t>
</list></t>

<section anchor="outer-wrapper" title="Outer wrapper">
<t>This container is just a holder for the other pieces of the manifest. The CDDL that describes the wrapper is below:</t>

<t>```CDDL
OuterWrapper = {
    authenticationWrapper: AuthenticationWrapper,
    manifest:              bstr .cbor Manifest,
    ? preInstallExt:       bstr .cbor PreInstallationInfo,
    ? installExt:          bstr .cbor InstallationInfo,
    ? postInstallExt:      bstr .cbor PostInstallationInfo,
    ? textInfoExt:         bstr .cbor Text,
    ? coswidExt:           bstr .cbor concise-software-identity
}
authenticationWrapper = 1
manifest = 2
preInstallExt = 3
installExt = 4
postInstallExt = 5
textExt = 6
coswidExt = 7</t>

<t>AuthenticationWrapper = COSE_Mac_Tagged / COSE_Sign_Tagged / COSE_Mac0_Tagged / COSE_Sign1_Tagged
```</t>

<t>The authenticationWrapper contains a cryptographic authentication wrapper for the core part of the manifest. This is implemented as a COSE_Mac_Tagged or COSE_Sign_Tagged block. The Manifest is authenticated by this block in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The AuthenticationWrapper MUST come first in the OuterWrapper, regardless of canonical encoding of CBOR. All validators MUST reject any OuterWrapper that begins with any element other than an AuthenticationWrapper.</t>

<t>Every other element must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>manifest contains a Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>PreInstallationInfo provides all the information that a device needs in order to decide whether and when to install an update</t>

<t>InstallationInfo provides all the information that a device needs in order to process one or more resources into one or more payloads.</t>

<t>PostInstallationInfo provides the information that a device needs to verify that a payload has been installed correctly, any instructions for what to do after the payload has been installed, for example migration tools.</t>

<t>Text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

</section>
<section anchor="manifest" title="Manifest">
<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of payloads</t>
  <t>a reference for each of the severable blocks.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<t>```CDDL
Manifest = {
    manifestVersion : 1,
    sequence        : SequenceNumber,
    ? preInstall    : PreInstallationInfo / COSE_Digest,
    ? dependencies  : [* DependencyInfo],
    ? payloads      : [* PayloadInfo],
    ? install       : InstallationInfo / COSE_Digest,
    ? postInstall   : PostInstallationInfo / COSE_Digest,
    ? text          : TextInfo / COSE_Digest,
    ? coswid        : concise-software-identity / COSE_Digest
}</t>

<t>manifestVersion = 1
sequence        = 2
preInstall      = 3
dependencies    = 4
payloads        = 5
install         = 6
postInstall     = 7
text            = 8
coswid          = 9</t>

<t>SequenceNumber = uint</t>

<t>```</t>

<t>Several fields in the Manifest can be either a CBOR structure or a COSE_Digest. In each of these cases, the COSE_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a COSE_Digest, but are not needed by recipient devices. Because COSE_Digest is a CBOR Array and each severable element is a CBOR Map, it is straight-forward for a recipient to determine whether an element has been severed.</t>

<t>The manifestVersion indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. manifestVersion is MANDATORY.</t>

<t>The sequence number is an anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. SequenceNumber is MANDATORY.</t>

<t>preInstall is a digest that uniquely identifies the content of the PreInstallationInfo that is packaged in the OuterWrapper. preInstall is OPTIONAL within a given Manifest. There MUST be one preInstall in at least one Manifest within an Update because PreInstallationInfo contains the conditions that define the applicability of the Update to specific hardware/firmware versions. preInstall MAY be severable.</t>

<t>dependencies is a list of DependencyInfo blocks that specify manifests that must be present before the current manifest can be processed. dependencies is OPTIONAL.</t>

<t>payloads is a list of PayloadInfo blocks that describe the payloads to be installed. payloads is OPTIONAL.</t>

<t>install is a digest that uniquely identifies the content of the InstallationInfo that is packaged in the OuterWrapper. install is OPTIONAL. install MAY</t>

<t>postInstall is a digest that uniquely identifies the content of the PostInstallationInfo that is packaged in the OuterWrapper. postInstall is OPTIONAL.</t>

<t>text is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="dependencyinfo" title="DependencyInfo">
<t>DependencyInfo specifies a manifest that describes one or more dependencies of the current manifest.</t>

<t>The following CDDL describes the DependencyInfo structure.</t>

<t>```CDDL
DependencyInfo = {
    depDigest  : COSE_Digest,         ; digest of the resource
    depScope   : ComponentIdentifier, ; where the dependency’s payloads will be
                                      ; applied
    ? depUris  : UriList              ; where to find the resource
}
depDigest = 1
depScope  = 2
depUris   = 3</t>

<t>UriList = [ + [priority: int, uri: tstr] ]
ComponentIdentifier = [* bstr]
```</t>

<t>The depDigest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing ‘body_protected’ and ‘body_signed’ elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The depUris element describes one or more indications of where to find the dependency. This element is OPTIONAL when the fetch location for a dependency is known implicitly.</t>

<t>The depScope element contains a ComponentIdentifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is MANDATORY.</t>

</section>
<section anchor="payloadinfo" title="PayloadInfo">
<t>Payload Info describes a payload that is ready for installation. When representing a payload that requires a specialised installer, the Update Authority can provide information to regenerate a digest.</t>

<t>The following CDDL describes the PayloadInfo structure.</t>

<t>```CDDL
PayloadInfo = {
    payloadComponent:       ComponentIdentifier,
    payloadSize:            uint / nil,
    payloadDigest:          COSE_Digest,
    ? regenInfo : {
        regenDigest:        COSE_Digest
        regenType:          int
        ? regenParameters:  bstr
    },
}
payloadComponent = 1
payloadSize      = 2
payloadDigest    = 3
regenInfo        = 4
regenDigest      = 5
regenType        = 6
regenParameters  = 7</t>

<t>RegenType = LocationLengthRegenType /
            FileListRegenType /
            KeyListRegenType /
            CustomRegenType</t>

<t>LocationLengthRegenType = 1
FileListRegenType       = 2
KeyListRegenType        = 3
CustomRegenType         = nint</t>

<t>RegenParameters = LocationLengthRegenParameters /
                  FileListRegenParameters /
                  KeyListRegenParameters /
                  CustomRegenParameters
LocationLengthRegenParameters = [ * [ location: uint, length: uint ] ]
FileListRegenParameters       = [ * file: tstr ]
KeyListRegenParameters        = [ * key: tstr ]
CustomRegenParameters         = bstr
```</t>

<t>The payloadComponent element contains a ComponentIdentifier. This specifies the module/component/location in which the payload should be installed. The meaning of ComponentIdentifier is application-specific. In general, the last bstr in the ComponentIdentifier defines where to store a payload within a given storage subsystem in a Heterogeneous Storage Architecture device, the remainder of the elements in the ComponentIdentifier define which storage subsystem to use to store the payload. payloadComponent is MANDATORY. When used on a single-image device payloadComponent MAY contain 0 elements. On multi-image devices, payloadComponent MUST contain at least one element.</t>

<t>payloadSize contains a positive integer that describes the size of the ready-to-install payload. Where the payload requires a specialised installer, this is the payload prior to installation. This element is MANDATORY.</t>

<t>payloadDigest contains a digest of the payload, prior to installation. For payloads that do not require a specialised installer, this is the also the post-installation digest. This element is MANDATORY.</t>

<t>regenInfo describes the mechanism for recreating a message digest of payload that requires a specialised installer. This element is OPTIONAL. This element is OPTIONAL TO IMPLEMENT.</t>

<t>regenDigest is a Digest that contains the message digest that an application should regenerate to verify the installed payload. This element is MANDATORY when regenInfo is present.</t>

<t>regenType is an int that identifies a particular mechanism for creating the regenDigest. This element is MANDATORY when regenInfo is present.</t>

<t>regenParameters is a bstr that provides any additional arguments needed by the specialised installer. This element is OPTIONAL.</t>

<t>When message digest regeneration is in place, regenType implies a regenParameters structure, as described in the following table:</t>

<texttable>
      <ttcol align='left'>regenType</ttcol>
      <ttcol align='left'>RegenParameters</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>-</c>
      <c>Reserved</c>
      <c>1</c>
      <c>[ * [ location: uint, length: uint] ]</c>
      <c>Lists a series of regions to include in the digest</c>
      <c>2</c>
      <c>[ * file: tstr ]</c>
      <c>Lists a series of files to digest</c>
      <c>3</c>
      <c>[ * key: tstr ]</c>
      <c>Lists a series of keys, whose values should be digested</c>
</texttable>

<t>Positive RegenType numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

</section>
<section anchor="preinstallationinfo" title="PreInstallationInfo">
<t>The recipient processes the PreInstallationInfo in order to determine whether the manifest is applicable to it. This check is only needed once, so the PreInstallationInfo is severable.</t>

<t>The following CDDL describes the PreInstallationInfo structure.</t>

<t><spanx style="verb">CDDL
PreInstallationInfo = {
    ? preConditions : [ * PreCondition ],
    ? preDirectives : [ * PreDirective ]
}
preConditions = 1
preDirectives = 2
</spanx></t>

<t>preConditions contains a list of 0 or more PreCondition structures.</t>

<t>preDirectives contains a list of 0 or more PreDirective structures.</t>

</section>
<section anchor="precondition" title="PreCondition">
<t>PreCondition structures describe conditions that must be true in order for a manifest to be installed. The target device MUST check these conditions before any installation is performed. The target device MAY check these conditions prior to fetching any dependency manifests.</t>

<t>All updates MUST contain either a device IdCondition or both a vendor IdCondition and a class IdCondition. This is to ensure that firmware is only ever delivered to compatible devices.</t>

<t>The following CDDL describes the PreCondition structure.</t>

<t>```CDDL
PreCondition    = IdCondition /
                  TimeCondition /
                  ImageCondition /
                  BatteryLevelCondition /
                  CustomCondition
IdCondition     = [ vendor : 1, id: Uuid ] /
                  [ class  : 2, id: Uuid ] /
                  [ device : 3, id: Uuid ]
Uuid = bstr .size 16</t>

<t>TimeCondition   = [useBy: 4,
                   time:       Timestamp]
ImageCondition  = [ currentContent :    6 ,<vspace />
                    digest: COSE_Digest / nil,
                    location: ComponentIdentifier ] /
                  [ notCurrentContent : 7 ,<vspace />
                    digest: COSE_Digest / nil,
                    location: ComponentIdentifier ]
BatteryLevelCondition = [ batteryLevel: 8,
                          level: uint ]
CustomCondition = [nint,
                   parameters: bstr]</t>

<t>Timestamp       = uint
```</t>

<t>All PreConditions are serialised as a list of one integer and one or more parameters. The type of the parameters is dictated by the value of the integer. An update that has contradictory preConditions MUST be rejected.</t>

<t>IdCondition describes three conditions: the vendor ID condition, the class ID condition, and the device ID condition. Each of these conditions present a RFC 4122 <xref target="RFC4122"/> UUID that MUST be matched by the installing device in order to consider the manifest valid.</t>

<t>A device MUST have at least one vendor ID and one class ID. A device MAY have one or more device IDs, more than one vendor ID, and/or more than one class ID.</t>

<t>TimeCondition describes one condition: the useBy condition, which can be used to specify the last time at which an update should be installed. The timestamp is encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size.</t>

<t>ImageCondition describes two conditions: the currentContent and the notCurrentContent conditions. Both of these conditions specify a storage identifier and a digest that the contents of that storage identifier should match.</t>

<t>BatteryLevelCondition provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, BatteryLevelDirective is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. BatteryLevelCondition is specified in mWh.</t>

<t>CustomCondition describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to system that evaluates the condition matching that integer.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives. When a negative number is used, the parameters MUST be wrapped in a bstr.</t>

</section>
<section anchor="identifiers" title="Identifiers">
<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">
<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="predirective" title="PreDirective">
<t>PreDirective structures describe operations that a device MUST execute prior to installing an update. For example, shut down monitored equipment, enter safe mode, sync cached files to disk, wait for another device to be updated, or wait until a specific time. Some PreDirectives may appear similar to PreConditions, however there is one difference: a PreCondition is evaluated at one time. A PreDirective can include a “wait” instruction, that means that the evaluation of the manifest does not immediately fail if the condition in the PreDirective is not met. Instead, the PreDirective remains active, waiting for its condition to be met.</t>

<t>For example, suppose two devices, A and B. Device B has an “other device firmware version” condition, requiring Device A to be at Rev 2. If both devices are updated from Rev 1 to Rev 2 simultaneously, then Device B may fail the PreCondition check if Device A has not finished its installation. If a PreDirective is used instead, then it can be a “wait for other device firmware version” directive. Then, Device B will postpone its update until Device A has finished updating.</t>

<t>The following CDDL describes the PreDirective structure.</t>

<t>```CDDL
PreDirective = WaitUntilDirective /
               DayOfWeekDirective /
               TimeOfDayDirective /
               BatteryLevelDirective /
               ExternalPowerDirective /
               CustomDirective</t>

<t>WaitUntilDirective     = [ 1,
                           timestamp: uint ]
DayOfWeekDirective     = [ 2, day: 0..6 ]
TimeOfDayDirective     = [ 3, hours: 0..23,
                              ? minutes: 0..59,
                              ? seconds: 0..59 ]
BatteryLevelDirective  = [ 4, level: uint]
ExternalPowerDirective = [ 5 ]
NetworkDisconnectDirective = [ 6 ]
CustomDirective        = [ nint,
                           ? parameters: bstr ]
```</t>

<t>WaitUntilDirective instructs the target device to wait until a specific time to install the update. The timestamp is encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size.</t>

<t>DayOfWeekDirective instructs the target device to wait until a specific day of the week to install the update. The day is encoded as days since Sunday, with Sunday being day 0 and Saturday being day 6.</t>

<t>TimeOfDayDirective instructs the target device to wait until a specific time each day to install the update. When combined with DayOfWeekDirective, this can specify a particular time on a particular day of the week to install an update. Leap seconds are not allowed in the TimeOfDayDirective.</t>

<t>BatteryLevelDirective defines a directive to wait until the battery is above the specified value. This is for use in rechargeable battery and energy harvesting devices because it instructs the device to wait for a minimum charge. BatteryLevelCondition should be used in discharge-only devices. BatteryLevelDirective is specified in mWh. Battery Levels MUST be evaluated in 16 bits or more. 32 bit evaluation MUST be used for high battery capacity devices (over 65535 mWh capacity)</t>

<t>ExternalPowerDirective defines a directive to the device to wait until it is connected to an external power source before installing the update.</t>

<t>NetworkDisconnectDirective defines a directive to the device to disconnect from the network before installing the update.</t>

<t>Positive Directive numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

</section>
<section anchor="installationinfo" title="InstallationInfo">
<t>InstallationInfo contains the information that a device needs in order to install a payload. As described in [Payloads], some payloads require specialised installers. Where a specialised installer is needed, the InstallationInfo block must represent this requirement.</t>

<t>InstallationInfo is described by the following CDDL.</t>

<t><spanx style="verb">CDDL
InstallationInfo = {
    payloadInstallationInfo : [ * PayloadInstallationInfo ],
}
payloadInstallationInfo = 1
</spanx></t>

<t>installationInfo contains a list of 0 or more PayloadInstallationInfo blocks. PayloadInstallationInfo is described by the following CDDL</t>

<t>```CDDL
PayloadInstallationInfo = {
    installComponent :          ComponentIdentifier
    payloadProcessors :         [ * Processor ],
    ? allowOverride :    bool,
    ? payloadInstaller:  {
        payloadInstallerID:           [ * int ],
        ? payloadInstallerParameters: bstr,
    }
}
installComponent = 1
payloadProcessors = 2
allowOverride = 3
payloadInstaller = 4
payloadInstallerID = 5
payloadInstallerParameters = 6</t>

<t>```</t>

<t>installComponent defines the component identifier of the component to update. This includes both the storage subsystem designator and the path within the storage subsystem as the final element of the component identifier. This element is MANDATORY.</t>

<t>payloadProcessors defines where to obtain a resource and how to transform it into a payload. This element is MANDATORY. Processors MUST be instantiated in a parent-last order.</t>

<t>The payloadInstaller contains a map of elements that are only needed when a specialised payload installer is used. This element is OPTIONAL TO IMPLEMENT.</t>

<t>payloadInstallerID contains an integer that defines which payload installer will be used. Positive integers are reserved for IANA registration. Negative integers are reserved for application-specific payload installers. Default payload installers are listed below. This element is MANDATORY when payloadInstaller is defined.</t>

<texttable>
      <ttcol align='left'>payloadInstallerID</ttcol>
      <ttcol align='left'>Definition</ttcol>
      <c>[ 0 ]</c>
      <c>Binary</c>
      <c>[ 5, 2 ]</c>
      <c>Intel Hex</c>
      <c>[ 5, 3 ]</c>
      <c>Motorola S-Record</c>
      <c>[ 6, 1 ]</c>
      <c>ELF</c>
      <c>[ 7, 1 ]</c>
      <c>CBOR-encoded data</c>
</texttable>

<t>Note that specialised installer 0 (binary) is typically not necessary and SHOULD ONLY be used when one of the other members of the payloadInstaller structure is required for a particular application.</t>

<t>These IDs are chosen to match those chosen for ProcessorIDs.</t>

<t>payloadInstallerParameters contains a bstr that provides any additional arguments needed by the specialised installer. This element is OPTIONAL.</t>

</section>
<section anchor="processor" title="Processor">
<t>Processors define one operation performed in order to modify a Resource in one step towards reconstructing the payload.</t>

<t>All Processors are OPTIONAL to implement.</t>

<t><spanx style="verb">CDDL
Processor       = {
    processorId:       ProcessorID
    parameters:        Digest / COSE_Encrypt / COSE_Encrypt0 / int / tstr / bstr / nil,
    inputs:            UriList / ComponentIdentifier / ProcessorDependencies
}
ProcessorID = [ * int ]
ProcessorDependencies = {int =&gt; int}
</spanx></t>

<t>The form of parameters and inputs depends on the processorId.</t>

<t>ProcessorDependencies is an interger-indexed map of integers. Each processor defines its inputs as integers–these are the indicies of the map. The inputs to the processor are other processors, identified by index in the Processors list. Processors that use the ProcessorDependencies input form MUST have an index in the Processors list greater than any index listed in ProcessorDependencies. The last processor listed in Processors is the processor that generates the payload to be installed in the ComponentIdentifier in PayloadInstallationInfo.</t>

<t>processorID contains a list of ints. This is conceptually similar to an OID, however, unlike an OID, this list is context-sensitive, encoded as a CBOR list, and supports negative numbers. The reasons for these distinctions are as follows. Contextual IDs are smaller because their use is correlated with their context. CBOR is already in use, so it reduces the number of CODECs required. Negative numbers allow for non-standard extension of IDs.</t>

<t>Devices are expected to compare processorIDs, bytewise, as binary blobs.</t>

<t>The first integer represents a broad classification of the processor, as defined in the following table.</t>

<texttable>
      <ttcol align='left'>ID[0]</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Do not use.</c>
      <c>1</c>
      <c>Resource</c>
      <c>Indicates that the processor sources data by reading a resource.</c>
      <c>2</c>
      <c>Cipher</c>
      <c>Encrypts or Decrypts data.</c>
      <c>3</c>
      <c>Compress</c>
      <c>Compresses or Decompresses data.</c>
      <c>4</c>
      <c>Relocate</c>
      <c>Reserved for Relocation.</c>
      <c>5</c>
      <c>BinText</c>
      <c>Packs or Unpacks Binary-to-text encoding formats.</c>
      <c>6</c>
      <c>Object</c>
      <c>Reserved for object formats, such as elf.</c>
</texttable>

<t>Each of these classifications has a subset</t>

<section anchor="resource" title="Resource">
<t>A resource can be either local or remote. Local resources fetch ComponentIdentifiers. Remote Resources fetch from URIs.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 1, 1 ]</c>
      <c>Remote</c>
      <c>Digest</c>
      <c>UriList</c>
      <c>Fetch a resource from a remote location</c>
      <c>[ 1, 2 ]</c>
      <c>Local</c>
      <c>Digest</c>
      <c>ComponentIdentifier</c>
      <c>Fetch a resource from a local location</c>
</texttable>

</section>
<section anchor="cipher" title="Cipher">
<t>A Cipher, such as one of the many AES modes. These are typically implemented using a cryptographic container such as a COSE_Encrypt structure. Ciphers are typically used in decrypt mode, so this is the default behaviour. If encrypt mode is needed, then this can be achieved by extending the ID as shown in the table below.</t>

<t>Only one input is used, specified using ProcessorDependencies[0], a positive integer index of the data to be processed in the tree.</t>

<t>Only two Cipher modes are defined, the COSE_Encrypt and COSE_Encrypt0 Cipher mode2.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 2, 1 ]</c>
      <c>COSE_Encrypt</c>
      <c>COSE_Encrypt</c>
      <c>{0 : dataIdx}</c>
      <c>Decrypt data enveloped by a COSE_Encrypt structure</c>
      <c>[ 2, 1, 2 ]</c>
      <c>COSE_Encrypt</c>
      <c>COSE_Encrypt</c>
      <c>{0 : dataIdx}</c>
      <c>Encrypt data enveloped by a COSE_Encrypt structure</c>
      <c>[ 2, 2 ]</c>
      <c>COSE_Encrypt0</c>
      <c>COSE_Encrypt0</c>
      <c>{0 : dataIdx}</c>
      <c>Decrypt data enveloped by a COSE_Encrypt0 structure</c>
      <c>[ 2, 2, 2 ]</c>
      <c>COSE_Encrypt0</c>
      <c>COSE_Encrypt0</c>
      <c>{0 : dataIdx}</c>
      <c>Encrypt data enveloped by a COSE_Encrypt0 structure</c>
</texttable>

<t>Mode 1 (decrypt) is implied when mode 2 (encrypt) is not specified.</t>

</section>
<section anchor="compress" title="Compress">
<t>A compression/decompression algorithm. Typically, this means that the input should contain a valid compression container.</t>

<t>Compression algorithms are typically used in decompress mode, so this is the default behaviour.</t>

<t>Only one input is used, specified using ProcessorDependencies[0], a positive integer index of the data to be processed in the tree.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 3, 1 ]</c>
      <c>gzip</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using gzip</c>
      <c>[ 3, 1, 2 ]</c>
      <c>gzip</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using gzip</c>
      <c>[ 3, 2 ]</c>
      <c>bzip2</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using bzip2</c>
      <c>[ 3, 2, 2 ]</c>
      <c>bzip2</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using bzip2</c>
      <c>[ 3, 4 ]</c>
      <c>lz4</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using lz4</c>
      <c>[ 3, 4, 2 ]</c>
      <c>lz4</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using lz4</c>
      <c>[ 3, 7 ]</c>
      <c>lzma</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using lzma</c>
      <c>[ 3, 7, 2 ]</c>
      <c>lzma</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using lzma</c>
</texttable>

<t>Mode 1 (decompress) is implied when mode 2 (compress) is not specified.</t>

</section>
<section anchor="relocate" title="Relocate">
<t>Relocation is reserved for future use.</t>

</section>
<section anchor="bintext" title="BinText">
<t>Packs or unpacks a binary-to-text format.</t>

<t>WARNING: Some binary-to-text formats can cause significant difficulty for a resource-constrained device. They also dramatically increase bandwidth over equivalent binary formats, with the worst being hex encoding at a 2:1 inflation. The best is base64 at a 4:3 inflation.</t>

<t>binary-to-text formats are typically used in decode mode, so this is the default behaviour.</t>

<t>Only one input is used, specified using ProcessorDependencies[0], a positive integer index of the data to be processed in the tree.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 5, 1 ]</c>
      <c>base64</c>
      <c>uint / tstr</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode base64 data in one of several encodings</c>
      <c>[ 5, 1, 2 ]</c>
      <c>base64</c>
      <c>uint / tstr</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode base64 data in one of several encodings</c>
      <c>[ 5, 2 ]</c>
      <c>hex</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode Intel Hex data</c>
      <c>[ 5, 2, 2 ]</c>
      <c>hex</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Encode Intel Hex data</c>
      <c>[ 5, 3 ]</c>
      <c>srecord</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode S-Record data</c>
      <c>[ 5, 3, 2 ]</c>
      <c>srecord</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Encode S-Record data</c>
</texttable>

<t>Mode 1 (decode) is implied when mode 2 (encode) is not specified.</t>

<t>When base64 is specified, several choices of parameter are available:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>uint</c>
      <c>1</c>
      <c>RFC 4648 standard base64</c>
      <c>uint</c>
      <c>2</c>
      <c>base64url</c>
      <c>tstr</c>
      <c>base64 characterset</c>
      <c>Arbitrary base64, as specified by the character set.</c>
</texttable>

</section>
<section anchor="object" title="Object">
<t>Object packing and unpacking is reserved for future use.</t>

</section>
</section>
<section anchor="postinstallationinfo" title="PostInstallationInfo">
<t>PostInstallationInfo contains information that the recipient needs in order to determine whether an installation has completed successfully and whether anything needs to be done after completion. These checks and instructions are only needed once, so PostInstallationInfo is severable.</t>

<t>The following CDDL describes the PostInstallationInfo structure.</t>

<t>```CDDL
PostInstallationInfo = {
    ? postConditions : [ * PostCondition ],
    ? postDirectives : [ * PostDirective ]
}
postConditions = 1
postDirectives = 2</t>

<t>PostCondition   = ImageCondition / CustomCondition
PostDirective   = CustomDirective
```</t>

<t>postConditions contains a list of 0 or more PostCondition structures. postConditions is OPTIONAL and OPTIONAL to implement.</t>

<t>postDirectives contains a list of 0 or more PostDirective structures. postDirectives is OPTIONAL and OPTIONAL to implement.</t>

<t>PostConditions are used to specify conditions that must be true after an update has completed. The ImageCondition specifies a digest of an image that must match after application of an update.</t>

<t>PostDirectives can be used to specify an action taken by the recipient after application of an update is complete, such as:</t>

<t><list style="symbols">
  <t>Reboot after application</t>
  <t>Restart designated component when installation is complete</t>
</list></t>

</section>
</section>
<section anchor="complete-cddl" title="Complete CDDL">

<t>A small portion of RFC 8152 <xref target="RFC8152"/> is reproduced in this CDDL so that COSE_Digest can be fully defined.</t>

<t>```CDDL
OuterWrapper = {
    authenticationWrapper: AuthenticationWrapper,
    manifest:              bstr .cbor Manifest,
    ? preInstallExt:       bstr .cbor PreInstallationInfo,
    ? installExt:          bstr .cbor InstallationInfo,
    ? postInstallExt:      bstr .cbor PostInstallationInfo,
    ? textInfoExt:         bstr .cbor Text,
    ? coswidExt:           bstr .cbor concise-software-identity
}
authenticationWrapper = 1
manifest = 2
preInstallExt = 3
installExt = 4
postInstallExt = 5
textExt = 6
coswidExt = 7</t>

<t>AuthenticationWrapper = COSE_Mac_Tagged / COSE_Sign_Tagged / COSE_Mac0_Tagged / COSE_Sign1_Tagged</t>

<t>concise-software-identity = any
AuthenticationWrapper = COSE_Mac_Tagged / COSE_Sign_Tagged / COSE_Mac0_Tagged / COSE_Sign1_Tagged</t>

<t>COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt = any
COSE_Encrypt0 = any</t>

<t>COSE_Mac0 = [
      Headers,
      payload : bstr / nil,
      tag : bstr,
   ]</t>

<t>Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)</t>

<t>header_map = {
    Generic_Headers,
    * label =&gt; values
}</t>

<t>empty_or_serialized_map = bstr .cbor header_map / bstr .size 0</t>

<t>Generic_Headers = (
   ? 1 =&gt; int / tstr,  ; algorithm identifier
   ? 2 =&gt; [+label],    ; criticality
   ? 3 =&gt; tstr / int,  ; content type
   ? 4 =&gt; bstr,        ; key identifier
   ? 5 =&gt; bstr,        ; IV
   ? 6 =&gt; bstr,        ; Partial IV
   ? 7 =&gt; COSE_Signature / [+COSE_Signature] ; Counter signature
)
COSE_Digest = COSE_Mac0</t>

<t>Manifest = {
    manifestVersion : 1,
    sequence        : SequenceNumber,
    ? preInstall    : PreInstallationInfo / COSE_Digest,
    ? dependencies  : [* DependencyInfo],
    ? payloads      : [* PayloadInfo],
    ? install       : InstallationInfo / COSE_Digest,
    ? postInstall   : PostInstallationInfo / COSE_Digest,
    ? text          : TextInfo / COSE_Digest,
    ? coswid        : concise-software-identity / COSE_Digest
}</t>

<t>manifestVersion = 1
sequence        = 2
preInstall      = 3
dependencies    = 4
payloads        = 5
install         = 6
postInstall     = 7
text            = 8
coswid          = 9</t>

<t>SequenceNumber = uint</t>

<t>DependencyInfo = {
    depDigest  : COSE_Digest,         ; digest of the resource
    depScope   : ComponentIdentifier, ; where the dependency’s payloads will be
                                      ; applied
    ? depUris  : UriList              ; where to find the resource
                                     ; applied
}
depDigest = 1
depScope  = 2
depUris   = 3</t>

<t>UriList = [ + [priority: int, uri: tstr] ]
ComponentIdentifier = [* bstr]</t>

<t>PayloadInfo = {
    payloadComponent:       ComponentIdentifier,
    payloadSize:            uint / nil,
    payloadDigest:          COSE_Digest,
    ? regenInfo : {
        regenDigest:        COSE_Digest
        regenType:          int
        ? regenParameters:  bstr
    },
}
payloadComponent = 1
payloadSize      = 2
payloadDigest    = 3
regenInfo        = 4
regenDigest      = 5
regenType        = 6
regenParameters  = 7</t>

<t>RegenType = LocationLengthRegenType /
            FileListRegenType /
            KeyListRegenType /
            CustomRegenType</t>

<t>LocationLengthRegenType = 1
FileListRegenType       = 2
KeyListRegenType        = 3
CustomRegenType         = nint</t>

<t>RegenParameters = LocationLengthRegenParameters /
                  FileListRegenParameters /
                  KeyListRegenParameters /
                  CustomRegenParameters
LocationLengthRegenParameters = [ * [ location: uint, length: uint ] ]
FileListRegenParameters       = [ * file: tstr ]
KeyListRegenParameters        = [ * key: tstr ]
CustomRegenParameters         = bstr</t>

<t>PreInstallationInfo = {
    ? preConditions : [ * PreCondition ],
    ? preDirectives : [ * PreDirective ]
}
preConditions = 1
preDirectives = 2</t>

<t>PreCondition    = IdCondition /
                  TimeCondition /
                  ImageCondition /
                  BatteryLevelCondition /
                  CustomCondition</t>

<t>IdCondition     = [ vendor : 1, id: Uuid ] /
                  [ class  : 2, id: Uuid ] /
                  [ device : 3, id: Uuid ]
Uuid = bstr .size 16</t>

<t>TimeCondition   = [useBy: 4,
                   time:       Timestamp]
ImageCondition  = [ currentContent : 6 ,<vspace />
                   digest: COSE_Digest / nil,
                   location: ComponentIdentifier ] /
                  [ notCurrentContent : 7 ,<vspace />
                   digest: COSE_Digest / nil,
                   location: ComponentIdentifier ]
BatteryLevelCondition = [ batteryLevel: 8,
                          level: uint ]
CustomCondition = [nint,
                   parameters: bstr]</t>

<t>Timestamp       = uint</t>

<t>PreDirective = WaitUntilDirective /
               DayOfWeekDirective /
               TimeOfDayDirective /
               BatteryLevelDirective /
               ExternalPowerDirective /
               CustomDirective</t>

<t>WaitUntilDirective     = [ 1,
                           timestamp: uint ]
DayOfWeekDirective     = [ 2, day: 0..6 ]
TimeOfDayDirective     = [ 3, hours: 0..23,
                              ? minutes: 0..59,
                              ? seconds: 0..59 ]
BatteryLevelDirective  = [ 4, level: uint]
ExternalPowerDirective = [ 5 ]
NetworkDisconnectDirective = [ 6 ]
CustomDirective        = [ nint,
                           ? parameters: bstr ]</t>

<t>InstallationInfo = {
   payloadInstallationInfo : [ * PayloadInstallationInfo ],
}
payloadInstallationInfo = 1</t>

<t>PayloadInstallationInfo = {
   installComponent :          ComponentIdentifier
   payloadProcessors :         [ * Processor ],
   ? allowOverride :    bool,
   ? payloadInstaller:  {
       payloadInstallerID:           [ * int ],
       ? payloadInstallerParameters: bstr,
   }
}
installComponent = 1
payloadProcessors = 2
allowOverride = 3
payloadInstaller = 4
payloadInstallerID = 5
payloadInstallerParameters = 6</t>

<t>Processor       = {
    processorId:       ProcessorID
    parameters:        COSE_Digest / COSE_Encrypt / COSE_Encrypt0 / int / tstr / bstr / nil,
    inputs:            UriList / ComponentIdentifier / {int =&gt; int}
}
ProcessorID = [ * int ]</t>

<t>PostInstallationInfo = {
    ? postConditions : [ * PostCondition ],
    ? postDirectives : [ * PostDirective ]
}
postConditions = 1
postDirectives = 2</t>

<t>PostCondition   = ImageCondition / CustomCondition
PostDirective   = CustomDirective</t>

<t>Text = {
    * int =&gt; tstr
}
```</t>

<t>NOTE: COSE structures are specified as “any” to enable CDDL tooling to process this CDDL without including all of the COSE specification. The same consideration applies to concise-software-identifier.</t>

</section>
<section anchor="examples" title="Examples">
<t>## Unsigned manifest with one payload</t>

<t><spanx style="verb">
OuterWrapper = {
    / authenticationWrapper / 1 : F6 / null /,
    / manifest / 2: h'a3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67' / {
        \ manifestVersion \  1 : 1,
        \ sequence \ 2: 1,
        \ payloads \ 5: [
            {
                \ payloadComponent \ 1: [h'30'],
                \ payloadSize \ 2: 37,
                \ payloadDigest \ 3: [
                    \ protected \ "a1011829" \ {
                        \ alg \ 1 : 41 \ sha-256 \
                    } \ ,
                    \ unprotected \ {},
                    \ payload \ F6 \ null,
                    \ tag \ h'8caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67'
                ]
            }
        ]
    } /
}
</spanx></t>

<t>Raw OuterWrapper:
62 bytes
a102583aa3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67</t>

<section anchor="ecdsa-secp256r1-signed-manifest-with-one-payload" title="ECDSA secp256r1-signed manifest with one payload">

<t>A manifest with payload description only, authenticated by an ECDSA signature. Signing key identified by Subject Key Identifier.</t>

<t><spanx style="verb">
OuterWrapper = {
    / authenticationWrapper / 1: #98([
        / protected / h'A103182A' / {
            \ content type \ 3 : 42 \ application octet-stream \
            } / ,
        / unprotected / {},
        / payload / null,
        / signatures / [
            [
                / protected / h'A10126' / {
                    \ alg \ 1 : -7 \ ECDSA 256 \
                },
                / unprotected / {
                    / kid / 4 : h'537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d'
                } / ,
                / signature / h'304502201d65938ec454354a6e866b468e9808db4ef36e97de09f98fda92e9c0e3302fc8022100aff871fe581d3f6b831d74e46f9acd7a015e5548770b2a437970be9272a7fbaa'
            ]
        ]
    ])
    / manifest / 2: h'a3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67' / {
        \ manifestVersion \  1 : 1,
        \ sequence \ 2: 1,
        \ payloads \ 5: [
            {
                \ payloadComponent \ 1: [h'30'],
                \ payloadSize \ 2: 37,
                \ payloadDigest \ 3: [
                    \ protected \ "a1011829" \ {
                        \ alg \ 1 : 41 \ sha-256 \
                    } \ ,
                    \ unprotected \ {},
                    \ payload \ F6 \ null,
                    \ tag \ h'8caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67'
                ]
            }
        ]
    } /
}
</spanx></t>

<t>Raw OuterWrapper:
188 bytes
a201d8628444a103182aa0f6818343a10126a1045820537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d5847304502201d65938ec454354a6e866b468e9808db4ef36e97de09f98fda92e9c0e3302fc8022100aff871fe581d3f6b831d74e46f9acd7a015e5548770b2a437970be9272a7fbaa02583aa3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67</t>

</section>
<section anchor="a-ecdsa-signed-raw-binary-payload-with-conditions-text-and-installationinfo" title="A ECDSA-signed raw binary payload with conditions, text, and installationInfo">

<t><spanx style="verb">
OuterWrapper = {
    / authenticationWrapper / 1: #98([
        / protected / h'A103182A' / {
            \ content type \ 3 : 42 \ application octet-stream \
            } / ,
        / unprotected / {},
        / payload / null,
        / signatures / [
            [
                / protected / h'A10126' / {
                    \ alg \ 1 : -7 \ ECDSA 256 \
                },
                / unprotected / {
                    / kid / 4 : h'537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d'
                } / ,
                / signature /"3045022100830cf142cc4adf563392dc7e0430000158bf3720b28b7cea388b0f1a5f8918a802201def2df34d6abd3b17c3425573ff2b7cacae3dd085e11dfc23bf0c60be51b7da"
            ]
        ]
    ])
    / manifest / 2: h'a60101020203a10182820150fa6b4a53d5ad5fdfbe9de663e4d41ffe8202506e04d3c2488759e4a597b5e7cd4976530581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d6706a10181a2018141300281a20182010103820076687474703a2f2f666f6f2e6261722f62617a2e62696e088444a1011829a0f658204e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf' / {
        \ manifestVersion \  1 : 1,
        \ sequence \ 2 : 2,
        \ preInstall \ 3 : {
            \ preConditions 1 : [
                [ \ vendorId \ 1, h'fa6b4a53d5ad5fdfbe9de663e4d41ffe'],
                [ \ classId \ 2, h'6e04d3c2488759e4a597b5e7cd497653']
            ]
        },
        \ payloads \ 5: [
            {
                \ payloadComponent \ 1: [h'30'],
                \ payloadSize \ 2: 37,
                \ payloadDigest \ 3: [
                    \ protected \ "a1011829" \ {
                        \ alg \ 1 : 41 \ sha-256 \
                    } \ ,
                    \ unprotected \ {},
                    \ payload \ F6 \ null,
                    \ tag \ h'8caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67'
                ]
            }
        ],
        \ install \ 6 : {
            \ payloadInstallationInfo \ 1 : [
                {
                    \ installComponent \ 1 : [h'30'],
                    \ payloadProcessors \ 2 : [
                        {
                            \ processorId \ 1 : [1,1] \ remote resource \ ,
                            \ inputs \ 3 : [
                                0, "http://foo.bar/baz.bin"
                            ]
                        }
                    ]
                }
            ]
        },
        \ textInfo \ 8 : [
            \ protected \ "a1011829" \ {
                \ alg \ 1 : 41 \ sha-256 \
            } \ ,
            \ unprotected \ {},
            \ payload \ F6 \ null,
            \ tag \ "4e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf"
        ]
    }
    / textInfoExt / 6 : h'a10178c84c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742e204e756e63207365642074696e636964756e7420616e74652c206120736f64616c6573206c6967756c612e2050686173656c6c757320756c6c616d636f72706572206f64696f20636f6d6d6f646f20697073756d20656765737461732c207669746165206c6163696e6961206c656f206f726e6172652e2053757370656e646973736520706f7375657265207365642e' / {
        \ updateDescription \ 1 : "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc sed tincidunt ante, a sodales ligula. Phasellus ullamcorper odio commodo ipsum egestas, vitae lacinia leo ornare. Suspendisse posuere sed."
    } /
}
</spanx></t>

<t>Raw OuterWrapper:
522 bytes
a301d8628444a103182aa0f6818343a10126a1045820537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d58473045022100830cf142cc4adf563392dc7e0430000158bf3720b28b7cea388b0f1a5f8918a802201def2df34d6abd3b17c3425573ff2b7cacae3dd085e11dfc23bf0c60be51b7da0658cca10178c84c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742e204e756e63207365642074696e636964756e7420616e74652c206120736f64616c6573206c6967756c612e2050686173656c6c757320756c6c616d636f72706572206f64696f20636f6d6d6f646f20697073756d20656765737461732c207669746165206c6163696e6961206c656f206f726e6172652e2053757370656e646973736520706f7375657265207365642e0258b9a60101020203a10182820150fa6b4a53d5ad5fdfbe9de663e4d41ffe8202506e04d3c2488759e4a597b5e7cd4976530581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d6706a10181a2018141300281a20182010103820076687474703a2f2f666f6f2e6261722f62617a2e62696e088444a1011829a0f658204e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf</t>

<t>Text severed (textInfoExt deleted from OuterWrapper):
315 bytes
a201d8628444a103182aa0f6818343a10126a1045820537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d58473045022100830cf142cc4adf563392dc7e0430000158bf3720b28b7cea388b0f1a5f8918a802201def2df34d6abd3b17c3425573ff2b7cacae3dd085e11dfc23bf0c60be51b7da0258b9a60101020203a10182820150fa6b4a53d5ad5fdfbe9de663e4d41ffe8202506e04d3c2488759e4a597b5e7cd4976530581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d6706a10181a2018141300281a20182010103820076687474703a2f2f666f6f2e6261722f62617a2e62696e088444a1011829a0f658204e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Conditions</t>
  <t>standard Directives</t>
  <t>standard Processors</t>
  <t>standard text values</t>
</list></t>

<t>Editor’s Note: A few registries would be good to allow easier allocation of new features.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="Architecture"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Carsten Bormann</t>
  <t>Henk Birkholz</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC7049" target='https://www.rfc-editor.org/info/rfc7049'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='2013' month='October' />
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.  These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t></abstract>
</front>
<seriesInfo name='RFC' value='7049'/>
<seriesInfo name='DOI' value='10.17487/RFC7049'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="Architecture" >
  <front>
    <title>A Firmware Update Architecture for Internet of Things Devices</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2018" month="July"/>
  </front>
</reference>
<reference anchor="Information" >
  <front>
    <title>Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2018" month="July"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
gUuIk2N0lIR1OifXLfxO/up6ebCSSjPp1q7LwAhz+xmypY3Ws2RLOXOmJB8O
l6ECHSzEV0G+EPHG8/ZweSpcSfsOZNePUdgcnc6CanjsIOE1LOhtnsaS07Oa
ogAcFy7HJkSv7dsacZAGjTDl2B6iPd05E1LdNmdMXFDUy+rHGqiayqUmKVcY
cGo0LVqeItrRrgyuI202M65gdm9HTq4KVEnsaROFvPYmrThCqjMOZtu1qY8R
SejOaXJXB3Kf9dTQHV4mDnnQ/CwnfSJI3gkyAu8jeYuJGIT80n8fBLv6WluX
LEmvK1L22gyuJn8VJvlYWan1juuoZb7DBeQK0BnMH0fbCfRlulY3l7hE2frm
Ig9lBfxn9xjzJN9cko+MjoJ98MwhU88A+niBnHEqXm3TBHaAtuZ+0LMChQd3
KKwn/lQM/cIR/fO1dncnWb4/gdkIMEOgwbHlIWxJo06bFQf9DYy26KXxPXgT
1dBHI9TGr3NtzqNaE9ERotU6lGh1le8o4+nE6n9uL2872e1DDUjx53Wojn8h
kKJ2+kFMzbwvp2La3rzuhMuw+iOqERo2htqg1gY2nhaPTVeRnUBdRDuG0X6A
DCbIU8Vx5C4oTPp8HQ+Z5uiIjCR02TUda4a42yh3FvPF3CSNK+fAbxLh6aK6
+S7eQqLDz4gPoTMTMj+0hMSUQj3cyoyPCDu7k7OTvx593lMonyGfan8l5pQX
7gurHDSnDN5Layph3ut91M5Bzi3OZ/zsiiEpmgBvveFoAvz18SMlN+WhmqGs
ZUXBDLPgIOTdPuFLTWQQSOrCEgf54eUe/mbHzkq+5sAN30yrGTemx/U2Naoa
2sM1DkB69U2DXpuEsCNTwX63PdTZU2i4shjkiSK25U8G63X8hDfWG2fn9FkU
AW0NRdbNfb82zfO4KsOkuM+fXV3+s/vesfYR65dFjuH9k+PeYa8P/xW93in9
t+t4qU8YZr5NyAMdmCYjMUursh77YSBhB01g70jnIVf2SP06bxB6jV0bUm6y
TFexKx6iONFG0wbP0irWPLcNFjX8o7/n96GdJ9CDqVlTzwotABhgO0t1J2Tv
pI4ZBijNmSbMe6Vhu8xTjUTnZwd0jn0mFFD3kJb2Mg48CBfpGk5Fh7HCQAl3
Mio7nr+E6SyUltIS4AP5UIcBcyHW/5pUG/y9E4gfTnJOddIXL5mq8XFNnQe6
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
fJ8m4iEUyqL/D/Cqted67QAA

-->

</rfc>

