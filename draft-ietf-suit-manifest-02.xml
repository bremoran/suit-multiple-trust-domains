<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-02" category="info">

  <front>
    <title abbrev="Firmware Manifest Format">SUIT CBOR manifest serialisation format</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="November" day="01"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="Architecture"/>.</t>

<t>The SUIT manifest is heavily optimised for consumption by constrained devices. This means that it is not constructed as a conventional descriptive document. Instead, of describing what an update IS, it describes what a recipient should DO.</t>

<t>While the SUIT manifest is informed by and optimised for firmware update use cases, there is nothing in the <xref target="Information"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a device’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
</list></t>

<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

</section>
<section anchor="how-to-use-this-document" title="How to use this document">

<t>For information about firmware update in general and the background of the suit manifest, see <xref target="background"/>.
To implement an updatable device, see <xref target="interpreter-behaviour"/> and <xref target="manifest-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="manifest-structure"/>.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="Architecture"/>.</t>

<section anchor="landscape" title="Landscape">

<t>The various constraints on IoT devices creates a broad set of use-case requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple processors may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>mesh networks may require multicast distribution.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="update-workflow-model" title="Update Workflow Model">

<t>There are several fundamental assumptions that inform the model of the firmware update workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependency manifests should be present before any payload is fetched</t>
  <t>In some applications, payloads must be fetched and validated prior to installation</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the secure boot workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependencies and payloads must be validated prior to loading</t>
  <t>All loaded images must be validated prior to execution</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest</t>
  <t>Resolve dependencies</t>
  <t>Fetch payload(s)</t>
  <t>Install payload(s)</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further 3 steps:</t>

<t><list style="numbers">
  <t>Verify image(s)</t>
  <t>Load image(s)</t>
  <t>Run image(s)</t>
</list></t>

<t>If verification and running is implemented in bootloader, then the</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="suit-manifest-goals" title="SUIT Manifest goals">

<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="numbers">
  <t>Meet the requirements defined in <xref target="Information"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-summary" title="SUIT manifest design summary">
<t>In order to provide flexible behaviour to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behaviour of a Recipient device. Behaviour is encoded as a specialised byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialised byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies behaviours in a linearised form, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behaviour by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that only manifests authenticated by the appropriate identity have access to operate on a component.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

</section>
</section>
<section anchor="interpreter-behaviour" title="Interpreter Behaviour">

<t>This section describes the behaviour of the manifest interpreter. This section focuses primarily on interpreting commands in the manifest. However, there are several other important behaviours of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid manifest, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version AND it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and MAY include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID)</t>
  <t>Unsupported command encountered</t>
  <t>Unsupported parameter encountered</t>
  <t>Unsupported component ID encountered</t>
  <t>Payload not available (update interpreter)</t>
  <t>Dependency not available (update interpreter)</t>
  <t>Application crashed when executed (bootloader interpreter)</t>
  <t>Watchdog timeout occurred (bootloader interpreter)</t>
  <t>Dependency or Payload verification failed (bootloader interpreter)</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported <xref target="interpreter-parameters">parameters</xref>. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter fundamental properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple devices MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="abstract-machine-description" title="Abstract Machine Description">

<t>The byte code that forms the bulk of the manifest is processed by an interpreter. This interpreter can be modelled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands. Certain commands also affect the machine’s behaviour.</t>

<t>Every command that modifies system state targets a specific component. Components are units of code or data that can be targeted by an update. They are identified by Component identifiers, arrays of binary-strings–effectively a binary path. Each component has a corresponding set of configuration, Parameters. Parameters are used as the inputs to commands.</t>

<section anchor="interpreter-parameters" title="Parameters">

<t>Some parameters are REQUIRED to implement. These parameters allow a device to perform core functions.</t>

<t><list style="symbols">
  <t>Vendor ID</t>
  <t>Class ID</t>
  <t>Image Digest</t>
</list></t>

<t>Some parameters are RECOMMENDED to implement. These parameters are needed for most use-cases.</t>

<t><list style="symbols">
  <t>Image Size</t>
  <t>URI</t>
</list></t>

<t>Other parameters are OPTIONAL to implement. These parameters allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Strict Order</t>
  <t>Soft Failure</t>
  <t>Device ID</t>
  <t>Encryption Info</t>
  <t>Unpack Info</t>
  <t>Source Component</t>
  <t>URI List</t>
  <t>Custom Parameters</t>
</list></t>

</section>
<section anchor="commands" title="Commands">

<t>Commands define the behaviour of a device. The commands are divided into two groups: those that modify state (directives) and those that perform tests (conditions). There are also several Control Flow operations.</t>

<t>Some commands are REQUIRED to implement. These commands allow a device to perform core functions</t>

<t><list style="symbols">
  <t>Check Vendor Identifier (cvid)</t>
  <t>Check Class Identifier (ccid)</t>
  <t>Verify Image (cimg)</t>
  <t>Set Current Component (setc)</t>
  <t>Override Parameters (ovrp)</t>
</list></t>

<t>NOTE: on systems that support only a single component, Set Current Component has no effect.</t>

<t>Some commands are RECOMMENDED to implement. These commands are needed for most use-cases</t>

<t><list style="symbols">
  <t>Set Current Dependency (setd)</t>
  <t>Set Parameters (setp)</t>
  <t>Process Dependency (pdep)</t>
  <t>Run (run)</t>
  <t>Fetch (getc)</t>
</list></t>

<t>Other commands are OPTIONAL to implement. These commands allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Use Before (ubf)</t>
  <t>Check Component Offset  (cco)</t>
  <t>Check Device Identifier (cdid)</t>
  <t>Check Image Not Match (nimg)</t>
  <t>Check Minimum Battery (minb)</t>
  <t>Check Update Authorised (auth)</t>
  <t>Check Version (cver)</t>
  <t>Abort (abrt)</t>
  <t>Try Each (try)</t>
  <t>Copy (copy)</t>
  <t>Swap (swap)</t>
  <t>Wait For Event (wfe)</t>
  <t>Run Sequence (srun) mandatory component set</t>
  <t>Run with Arguments (arun)</t>
</list></t>

</section>
<section anchor="command-behaviour" title="Command Behaviour">

<t>The following table describes the behaviour of each command. “params”
represents the parameters for the current component or dependency.</t>

<texttable>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <c>cvid</c>
      <c>binary-match(component, params[vendor-id])</c>
      <c>ccid</c>
      <c>binary-match(component, params[class-id])</c>
      <c>cimg</c>
      <c>binary-match(digest(component), params[digest])</c>
      <c>setc</c>
      <c>component := components[arg]</c>
      <c>ovrp</c>
      <c>params[k] := v for k,v in arg</c>
      <c>setd</c>
      <c>dependency := dependencies[arg]</c>
      <c>setp</c>
      <c>params[k] := v if not k in params for k,v in arg</c>
      <c>pdep</c>
      <c>exec(dependency[common]); exec(dependency[current-segment])</c>
      <c>run</c>
      <c>run(component)</c>
      <c>getc</c>
      <c>store(component, fetch(params[uri]))</c>
      <c>ubf</c>
      <c>assert(now() &lt; arg)</c>
      <c>cco</c>
      <c>assert(offsetof(component) == arg)</c>
      <c>cdid</c>
      <c>binary-match(component, params[device-id])</c>
      <c>nimg</c>
      <c>not binary-match(digest(component), params[digest])</c>
      <c>minb</c>
      <c>assert(battery &gt;= arg)</c>
      <c>auth</c>
      <c>assert(isAuthorised())</c>
      <c>cver</c>
      <c>assert(version_check(component, arg))</c>
      <c>abrt</c>
      <c>assert(0)</c>
      <c>try</c>
      <c>break if exec(seq) is not error for seq in arg</c>
      <c>copy</c>
      <c>store(component, params[src-component])</c>
      <c>swap</c>
      <c>swap(component, params[src-component])</c>
      <c>wfe</c>
      <c>until event(arg), wait</c>
      <c>srun</c>
      <c>exec(arg)</c>
      <c>arun</c>
      <c>run(component, arg)</c>
</texttable>

</section>
</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

</section>
<section anchor="parallel-processing-interpreter" title="Parallel Processing Interpreter">

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters</t>
  <t>Override Parameters</t>
  <t>Set Strict Order = True</t>
  <t>Set Dependency Index</t>
  <t>Set Component Index</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence must declare a single target component. Set Component Index is not permitted inside this sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Depdendency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures is covered in <xref target="RFC8152"/> and the calculation of cryptographic values is beyond the scope of this document.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways, however several templates are provided here to cover common use-cases. Many of these templates can be aggregated to produce more complex behaviour.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: Digest should always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</t>

<section anchor="manifest-source-material" title="Manifest Source Material">

<t>When a manifest is constructed from a descriptive document, the descriptive document SHOULD be included in the severable text section. This section MAY be pruned from the manifest prior to distribution to a device. The inclusion of text source material enables several use-cases on unconstrained intermediate systems, where small manifest size, low parser complexity, and pull parsing are not required.</t>

<t>An unconstrained system that makes decisions based on the manifest can use the source material instead so that it does not need to execute the manifest.</t>

<t>An unconstrained system that presents data to a user can do so according to typical usage patterns without first executing the manifest, and can trust that information with the same level of confidence as the manifest itself.</t>

<t>A verifier can be constructed to emulate execution the manifest and compare the results of that execution to the source material, providing a check that the manifest performs its stated objectives and that the manifest does not exceed the capabilities of the target device.</t>

</section>
<section anchor="required-template-compatibility-check" title="Required Template: Compatibility Check">

<t>The compatibility check ensures that devices only install compatible images.</t>

<t>Common:
Set Current Component
Check Vendor Identifier
Check Class Identifier</t>

<t>All manifests MUST contain the compatibility check template, except as outlined below.</t>

<t>If a device class has a unique trust anchor, and every element in its trust chain is unique–different from every element in any other device class, then it MAY include the compatibility check.</t>

<t>If a manifest includes a dependency that performs a compatibility check, then the dependent manifest MAY include the compatibility check.</t>

<t>The compatibility check template contains a data dependency: Vendor Identifier and Class Identifier MUST be set prior to executing the template. One examples of the full template is included below, however Parameters may be set within a Try-Each block as well. They may also be inherited from a dependent manifest.</t>

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Vendor ID</t>
          <t>Class ID</t>
        </list></t>
      <t>Check Vendor Identifier</t>
      <t>Check Class Identifier</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-xip-secure-boot" title="Use Case Template: XIP Secure Boot">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Run:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Check Image Match</t>
      <t>Directive Run</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-firmware-download" title="Use Case Template: Firmware Download">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Install:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-from-external-storage" title="Use Case Template: Load from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-decompress-from-external-storage" title="Use Case Template Load &amp; Decompress from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
          <t>Compression Info</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-dependency" title="Use Case Template: Dependency">

<t><list style="symbols">
  <t>Dependency Resolution:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
  <t>Validate:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
</list></t>

<t>For any other section that the dependency has, the dependent MUST invoke Process Dependency.</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">

<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Information shared by all command sequences
          <list style="numbers">
              <t>List of dependencies</t>
              <t>List of payloads</t>
              <t>List of payloads in dependencies</t>
              <t>Common list of conditions, directives</t>
            </list></t>
          <t>Dependency resolution Reference or list of conditions, directives</t>
          <t>Payload fetch Reference or list of conditions, directives</t>
          <t>Installation Reference or list of conditions, directives</t>
          <t>Verification conditions/directives</t>
          <t>Load conditions/directives</t>
          <t>Run conditions/directives</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Dependency resolution conditions/directives</t>
      <t>Payload fetch conditions/directives</t>
      <t>Installation conditions/directives</t>
      <t>Text</t>
      <t>COSWID / Reference</t>
      <t>Intermediate Certificate(s) / CWTs</t>
      <t>Inline Payload(s)</t>
    </list></t>
</list></t>

<section anchor="severable-elements" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences</t>

</section>
<section anchor="outer-wrapper" title="Outer wrapper">

<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the outer wrapper are contained in bstr objects. Wherever the manifest references an object in the outer wrapper, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the wrapper is below</t>

<figure><artwork><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper   => bstr .cbor
                                     SUIT_Authentication_Wrapper / nil,
    $SUIT_Manifest_Wrapped,
    ? suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => bstr .cbor SUIT_Command_Sequence,
    ? suit-text-external          => bstr .cbor SUIT_Text_Info,
    ? suit-coswid-external        => bstr .cbor COSWID
}

SUIT_Authentication_Wrapper = [ + (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                  COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)
]]></artwork></figure>

<t>All elements of the outer wrapper must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. The Manifest is authenticated by these blocks in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come first in the SUIT_Outer_Wrapper, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Outer_Wrapper that begins with any element other than a suit-authentication-wrapper.</t>

<t>A manifest that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The outer wrapper MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the outer wrapper contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text-info              => Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => Digest / bstr .cbor COSWID
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor [ + SUIT_Dependency ],
    ? suit-components             => bstr .cbor [ + SUIT_Component_Identifier ],
    ? suit-dependency-components  => bstr .cbor [ + SUIT_Component_Reference ],
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by recipient devices. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Outer_Wrapper so that a recipient can easily identify the correct data in the outer wrapper.</t>

<t>The suit-manifest-version indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text-info is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behaviour of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Parameter Code</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Default</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>boolean</c>
      <c>True</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>2</c>
      <c>boolean</c>
      <c>False</c>
      <c>Command Segment</c>
      <c>Coerce Condition Failure</c>
      <c>Coerces the success code of a command segment to success even when aborted due to a condition failure.</c>
      <c>3</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>4</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>5</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>6</c>
      <c>tstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>7</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>8</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>The information required to decompress the image</c>
      <c>9</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>The information required to unpack the image</c>
      <c>10</c>
      <c>uint</c>
      <c>nil</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>11</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>12</c>
      <c>uint</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>24</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI List</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>25</c>
      <c>boolean</c>
      <c>False</c>
      <c>Component/Dependency</c>
      <c>URI List Append</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>nint</c>
      <c>int/bstr</c>
      <c>nil</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelise their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametercoerceconditionfailure" title="SUIT_Parameter_Coerce_Condition_Failure">

<t>When executing a command sequence inside SUIT_Run_Sequence and a condition failure occurs, the manifest processor aborts the sequence. If Coerce Condition Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Coerce_Condition_Failure is scoped to the enclosing SUIT_Directive_Run_Sequence. Its value is discarded when SUIT_Directive_Run_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr</t>

</section>
<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-coerce-condition-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf
]]></artwork></figure>

</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition and directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block</t>
</list></t>

<t>Argument blocks are defined for each type of command.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behaviour.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditons of any directive or series of directives, depending on where they are placed in the list. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Argument Type</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>nil</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>nil</c>
      <c>3</c>
      <c>Image Match</c>
      <c>nil</c>
      <c>4</c>
      <c>Use Before</c>
      <c>Unsigned Integer timestamp</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>Unsigned Integer</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>nil</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>nil</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>Unsigned Integer</c>
      <c>27</c>
      <c>Update Authorised</c>
      <c>Integer</c>
      <c>28</c>
      <c>Version</c>
      <c>List of Integers</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>bstr</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Components list. If no digest is specified and the component is not present in the Components list, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. One argument is required, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorised" title="suit-condition-update-authorised">

<t>Request Authorisation from the application and fail if not authorised. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorised is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater</t>
  <t>Greater or Equal</t>
  <t>Equal</t>
  <t>Lesser or Equal</t>
  <t>Lesser</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occured. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3]</t>
  <t>1.2-rc3 = [1,2,-1,3]</t>
  <t>1.2-beta = [1,2,-2]</t>
  <t>1.2-alpha = [1,2,-3]</t>
  <t>1.2-alpha4 = [1,2,-3,4]</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to the system that evaluates the condition matching that integer.
SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behaviour of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>31</c>
      <c>Run with Arguments</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Coerce on Condition Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several suit-directive-run-sequence one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure is initialised to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behaviour of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behaviour of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behaviour of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimisation: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behaviour. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behaviour of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behaviour of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorisation</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating conditional sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    suit-install                => bstr .cbor SUIT_Command_Sequence,
    suit-text                   => bstr .cbor SUIT_Text_Map,
    suit-coswid                 => bstr .cbor concise-software-identity
}

SUIT_Authentication_Wrapper = [ + (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)
]

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bytes,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    ? suit-common                 => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => SUIT_Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text                   => SUIT_Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => SUIT_Digest / bstr .cbor concise-software-identity
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components  => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}


SUIT_Command_Sequence = [ + (SUIT_Condition // SUIT_Directive // SUIT_Command_Custom) ]

SUIT_Command_Custom = (nint, bstr)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive //= (suit-directive-set-component-index,      uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index,     uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,             bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,                 SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-for-each-component,       SUIT_Directive_For_Each_Component_Argument)
SUIT_Directive //= (suit-directive-process-dependency,       nil)
SUIT_Directive //= (suit-directive-set-parameters,           {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,      {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                    nil)
SUIT_Directive //= (suit-directive-copy,                     nil)
SUIT_Directive //= (suit-directive-swap,                     nil)
SUIT_Directive //= (suit-directive-run,                      nil)
SUIT_Directive //= (suit-directive-wait,                     { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,       bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-coerce-condition-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]
SUIT_Priority_Parameter_List = [ + [priority: int, parameters: { + SUIT_Parameters }] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}

suit-authentication-wrapper = 1
suit-manifest = 2

suit-manifest-encryption-info = 3
suit-manifest-encrypted       = 4

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5
suit-condition-custom = 6

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorised        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
suit-directive-do-each                  = 16 ; TBD
suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-run-with-arguments       = 31
suit-directive-swap                     = 32

suit-wait-event-argument-authorisation = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7
suit-wait-event-authorisation = 8

suit-parameter-strict-order = 1
suit-parameter-coerce-condition-failure = 2
suit-parameter-vendor-id = 3
suit-parameter-class-id = 4
suit-parameter-device-id = 5
suit-parameter-uri = 6
suit-parameter-encryption-info = 7
suit-parameter-compression-info = 8
suit-parameter-unpack-info = 9
suit-parameter-source-component = 10
suit-parameter-image-digest = 11
suit-parameter-image-size = 12

suit-parameter-uri-list = 24
suit-parameter-uri-list-append = 25
suit-parameter-prioritised-parameters = 26

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-vendor-domain         = 3
suit-text-vendor-name           = 4
suit-text-model-name            = 5
suit-text-model-info            = 6
suit-text-component-description = 7
suit-text-manifest-json-source  = 8
suit-text-manifest-yaml-source  = 9
]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>None of these examples include authentication. This is provided via RFC 8152 <xref target="RFC8152"/>, and is omitted for clarity.</t>

<section anchor="example-0" title="Example 0:">

<t>Secure boot only.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 1,
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658405e5f'
                        h'b84f9e9729a4d74096ad485921e842b4e320cc3fa177'
                        h'8c2807377e1969e42449b3261109d273df4b3ceb9a61'
                        h'06a46f0a7938de9a8441ab515b82463b39ee',
    / manifest / 2 : h'a40101020103583ea2024c818245466c6173684300340104'
                     h'582c8213a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00c47'
                     h'860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 1,
        / common / 3 : h'a2024c818245466c6173684300340104582c8213a20b82'
                       h'02582000112233445566778899aabbccddeeff01234567'
                       h'89abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b820258200011223344556677'
                                    h'8899aabbccddeeff0123456789abcdef'
                                    h'fedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 85</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602584fa40101020103583ea2024c818245466c6173684300340104582c8213a20b
8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0c1987d00c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 170</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658405e5fb84f9e9729a4d74096ad
485921e842b4e320cc3fa1778c2807377e1969e42449b3261109d273df4b3ceb9a6106a4
6f0a7938de9a8441ab515b82463b39ee02584fa40101020103583ea2024c818245466c61
73684300340104582c8213a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d00c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-1" title="Example 1:">

<t>Simultaneous download and installation of payload.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 2,
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658403d4e'
                        h'9ff1ca8803a81ae1e2b13df28c527a4d6975e860035e'
                        h'e9a88576b5e6f2bf12f33017e88157bcff58d712e7f8'
                        h'010821ae0f82f78eb681b61697345e655cf4',
    / manifest / 2 : h'a40101020203583ea2024c818245466c6173684300340104'
                     h'582c8213a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00958'
                     h'25860c0013a106781b687474703a2f2f6578616d706c652e'
                     h'636f6d2f66696c652e62696e15f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 2,
        / common / 3 : h'a2024c818245466c6173684300340104582c8213a20b82'
                       h'02582000112233445566778899aabbccddeeff01234567'
                       h'89abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b820258200011223344556677'
                                    h'8899aabbccddeeff0123456789abcdef'
                                    h'fedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 116</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602586ea40101020203583ea2024c818245466c6173684300340104582c8213a20b
8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0c1987d0095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f6669
6c652e62696e15f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 201</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658403d4e9ff1ca8803a81ae1e2b1
3df28c527a4d6975e860035ee9a88576b5e6f2bf12f33017e88157bcff58d712e7f80108
21ae0f82f78eb681b61697345e655cf402586ea40101020203583ea2024c818245466c61
73684300340104582c8213a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d0095825860c0013a106781b687474703a2f2f65
78616d706c652e636f6d2f66696c652e62696e15f6
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2:">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 3,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45",
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840e637'
                        h'5a57596cb4a35a90a30b4099bccf7e2352a9829bf7bb'
                        h'1b56cfc0e713955be4fd360e366c94e32dfc344695b1'
                        h'20b2c59732b2e3f079fc2693c5a459d9ce44',
    / manifest / 2 : h'a501010203035866a2024c818245466c6173684300340104'
                     h'58548613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04'
                     h'501492af1425695e48bf429b2d51f2ab450b820258200011'
                     h'2233445566778899aabbccddeeff0123456789abcdeffedc'
                     h'ba98765432100c1987d001f602f6095825860c0013a10678'
                     h'1b687474703a2f2f6578616d706c652e636f6d2f66696c65'
                     h'2e62696e15f60c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 3,
        / common / 3 : h'a2024c818245466c617368430034010458548613a40350'
                       h'fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425'
                       h'695e48bf429b2d51f2ab450b8202582000112233445566'
                       h'778899aabbccddeeff0123456789abcdeffedcba987654'
                       h'32100c1987d001f602f6' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8613a40350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450b8202582000112233'
                                    h'445566778899aabbccddeeff01234567'
                                    h'89abcdeffedcba98765432100c1987d0'
                                    h'01f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 165</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602589fa501010203035866a2024c818245466c617368430034010458548613a403
50fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab450b
8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 250</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840e6375a57596cb4a35a90a30b
4099bccf7e2352a9829bf7bb1b56cfc0e713955be4fd360e366c94e32dfc344695b120b2
c59732b2e3f079fc2693c5a459d9ce4402589fa501010203035866a2024c818245466c61
7368430034010458548613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af14
25695e48bf429b2d51f2ab450b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d001f602f6095825860c0013a106781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-3" title="Example 3:">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 4,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840ef4b'
                        h'399c55131a51bebafb46da6e6b79c59417fdefea7b87'
                        h'e4234bf8f978094e3092c8506d8a912fbacaec5ba365'
                        h'24ae0e4bb1aa14197e4d0afe10ba47e29e5a',
    / manifest / 2 : h'a50101020403589fa20254828245466c6173684300340182'
                     h'4352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00c01'
                     h'13a20b8202582000112233445566778899aabbccddeeff01'
                     h'23456789abcdeffedcba98765432100c1987d001f602f609'
                     h'5825860c0013a106781b687474703a2f2f6578616d706c65'
                     h'2e636f6d2f66696c652e62696e15f60c518e0c0003f60c01'
                     h'13a10a0015f603f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 4,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b8202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d00c0113a20b'
                       h'8202582000112233445566778899aabbccddeeff012345'
                       h'6789abcdeffedcba98765432100c1987d001f602f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820001122'
                                    h'33445566778899aabbccddeeff012345'
                                    h'6789abcdeffedcba98765432100c1987'
                                    h'd001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'8e0c0003f60c0113a10a0015f603f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 232</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258e2a50101020403589fa20254828245466c61736843003401824352414d4200
040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100c1987d00c0113a20b8202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100c1987d001f602f6095825860c0013
a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c518e
0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 317</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840ef4b399c55131a51bebafb46
da6e6b79c59417fdefea7b87e4234bf8f978094e3092c8506d8a912fbacaec5ba36524ae
0e4bb1aa14197e4d0afe10ba47e29e5a0258e2a50101020403589fa20254828245466c61
736843003401824352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b8202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b8202
582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c19
87d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

</section>
<section anchor="example-4" title="Example 4:">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 5,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0,
                "compression-info": {
                    "algorithm": "gzip"
                }
            }
        },
        { "directive-copy": null }
    ],
    "run-image": [
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840e90d'
                        h'ab6e502bad8132adf86b4d78defaebac64fa6c6b2882'
                        h'd12b36f492b14ce75819ed3524de4d66ddfd5e1d80a5'
                        h'984004c1ac9b003b2da32589583a93c541dd',
    / manifest / 2 : h'a60101020503589fa20254828245466c6173684300340182'
                     h'4352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00c01'
                     h'13a20b820258200123456789abcdeffedcba987654321000'
                     h'112233445566778899aabbccddeeff0c1987d001f602f609'
                     h'5825860c0013a106781b687474703a2f2f6578616d706c65'
                     h'2e636f6d2f66696c652e62696e15f60b528a0c0003f60c01'
                     h'13a20843a101010a0016f60c458403f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 5,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b8202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d00c0113a20b'
                       h'820258200123456789abcdeffedcba9876543210001122'
                       h'33445566778899aabbccddeeff0c1987d001f602f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820012345'
                                    h'6789abcdeffedcba9876543210001122'
                                    h'33445566778899aabbccddeeff0c1987'
                                    h'd001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ]
                    / size / 12 : 34768
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'0123456789abcdeffedcba9876543210001122334455'
                        h'66778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8a0c0003f60c0113a20843a101010a0016f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / compression-info / 8 : h'a10101',
                / source-component / 10 : 0,
            },
            / copy / 22, None,
        ],
        / run-image / 12 : h'8403f617f6' \ [
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 240</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258eaa60101020503589fa20254828245466c61736843003401824352414d4200
040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100c1987d00c0113a20b820258200123456789abcdeffedcba
987654321000112233445566778899aabbccddeeff0c1987d001f602f6095825860c0013
a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60b528a
0c0003f60c0113a20843a101010a0016f60c458403f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 325</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840e90dab6e502bad8132adf86b
4d78defaebac64fa6c6b2882d12b36f492b14ce75819ed3524de4d66ddfd5e1d80a59840
04c1ac9b003b2da32589583a93c541dd0258eaa60101020503589fa20254828245466c61
736843003401824352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b8202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b8202
58200123456789abcdeffedcba987654321000112233445566778899aabbccddeeff0c19
87d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f60b528a0c0003f60c0113a20843a101010a0016f60c458403f617
f6
]]></artwork></figure>

</section>
<section anchor="example-5" title="Example 5:">

<t>Compatibility test, download, installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 6,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "ext-Flash",
                78848
            ],
            [
                "Flash",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 1 },
        { "condition-not-image": null },
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 1 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658402282'
                        h'c1e7770b1806afb0cf78e74003af39166b9db14b0a7c'
                        h'172d18598c8be16e3cec48770fb8471675a5b3bab05a'
                        h'22e370a03320a7346f252f9629c3417ed153',
    / manifest / 2 : h'a6010102060358a2a202578282467b1b4595ab2143003401'
                     h'8245466c6173684200040458858e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b8202582000112233445566778899aa'
                     h'bbccddeeff0123456789abcdeffedcba98765432100c1987'
                     h'd00c0113a20b820258200123456789abcdeffedcba987654'
                     h'321000112233445566778899aabbccddeeff0c1987d001f6'
                     h'02f6095825860c0013a106781b687474703a2f2f6578616d'
                     h'706c652e636f6d2f66696c652e62696e15f60b528e0c0118'
                     h'19f60c0003f60c0113a10a0015f60c47860c0103f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 6,
        / common / 3 : h'a202578282467b1b4595ab21430034018245466c617368'
                       h'4200040458858e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b8202582000112233445566778899aabbccddee'
                       h'ff0123456789abcdeffedcba98765432100c1987d00c01'
                       h'13a20b820258200123456789abcdeffedcba9876543210'
                       h'00112233445566778899aabbccddeeff0c1987d001f602'
                       h'f6' \ {
            / components / 2 : h'8282467b1b4595ab21430034018245466c6173'
                               h'68420004' \
            [
                [h'7b1b4595ab21', h'003401'],
                [h'466c617368', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820012345'
                                    h'6789abcdeffedcba9876543210001122'
                                    h'33445566778899aabbccddeeff0c1987'
                                    h'd001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'0123456789abcdeffedcba9876543210001122334455'
                        h'66778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8e0c011819f60c0003f60c0113a10a0015f6' \ [
            / set-component-index / 12, 1,
            / condition-not-image / 25, None,
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0103f617f6' \ [
            / set-component-index / 12, 1,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 245</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258efa6010102060358a2a202578282467b1b4595ab21430034018245466c6173
684200040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af142569
5e48bf429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d00c0113a20b820258200123456789abcdef
fedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f609582586
0c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f6
0b528e0c011819f60c0003f60c0113a10a0015f60c47860c0103f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 330</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658402282c1e7770b1806afb0cf78
e74003af39166b9db14b0a7c172d18598c8be16e3cec48770fb8471675a5b3bab05a22e3
70a03320a7346f252f9629c3417ed1530258efa6010102060358a2a202578282467b1b45
95ab21430034018245466c6173684200040458858e13a20350fa6b4a53d5ad5fdfbe9de6
63e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b8202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a2
0b820258200123456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e63
6f6d2f66696c652e62696e15f60b528e0c011819f60c0003f60c0113a10a0015f60c4786
0c0103f617f6
]]></artwork></figure>

</section>
<section anchor="example-6" title="Example 6:">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 7,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 76834
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "Flash",
                132096
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file1.bin"
            }
        },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file2.bin"
            }
        },
        { "directive-set-component": true },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": true },
        { "condition-image": null },
        { "directive-set-component": 0 },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840d00c'
                        h'd62be643247904621f2956b11b97fcbcd22f87701dd9'
                        h'008e949f8c801f55d7095b545d6db0060bd47c5f78ee'
                        h'5cb1fea17c875a36a599aec4e8b876cfdae7',
    / manifest / 2 : h'a5010102070358a4a20257828245466c6173684300340182'
                     h'45466c617368430004020458878e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b8202582000112233445566778899aa'
                     h'bbccddeeff0123456789abcdeffedcba98765432100c1987'
                     h'd00c0113a20b820258200123456789abcdeffedcba987654'
                     h'321000112233445566778899aabbccddeeff0c1a00012c22'
                     h'01f602f609584b8c0c0013a106781c687474703a2f2f6578'
                     h'616d706c652e636f6d2f66696c65312e62696e0c0113a106'
                     h'781c687474703a2f2f6578616d706c652e636f6d2f66696c'
                     h'65322e62696e0cf515f60c49880cf503f60c0017f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 7,
        / common / 3 : h'a20257828245466c617368430034018245466c61736843'
                       h'0004020458878e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b8202582000112233445566778899aabbccddee'
                       h'ff0123456789abcdeffedcba98765432100c1987d00c01'
                       h'13a20b820258200123456789abcdeffedcba9876543210'
                       h'00112233445566778899aabbccddeeff0c1a00012c2201'
                       h'f602f6' \ {
            / components / 2 : h'828245466c617368430034018245466c617368'
                               h'43000402' \
            [
                [h'466c617368', h'003401'],
                [h'466c617368', h'000402'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820012345'
                                    h'6789abcdeffedcba9876543210001122'
                                    h'33445566778899aabbccddeeff0c1a00'
                                    h'012c2201f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'0123456789abcdeffedcba9876543210001122334455'
                        h'66778899aabbccddeeff' ],
                    / size / 12 : 76834,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'8c0c0013a106781c687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c65312e62696e0c0113a1'
                            h'06781c687474703a2f2f6578616d706c652e636f'
                            h'6d2f66696c65322e62696e0cf515f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file1.bin
            },
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file2.bin
            },
            / set-component-index / 12, True,
            / fetch / 21, None,
        ],
        / run-image / 12 : h'880cf503f60c0017f6' \ [
            / set-component-index / 12, True,
            / condition-image / 3, None,
            / set-component-index / 12, 0,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 268</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602590105a5010102070358a4a20257828245466c617368430034018245466c6173
68430004020458878e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425
695e48bf429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff
0123456789abcdeffedcba98765432100c1987d00c0113a20b820258200123456789abcd
effedcba987654321000112233445566778899aabbccddeeff0c1a00012c2201f602f609
584b8c0c0013a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62
696e0c0113a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e6269
6e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 353</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840d00cd62be643247904621f29
56b11b97fcbcd22f87701dd9008e949f8c801f55d7095b545d6db0060bd47c5f78ee5cb1
fea17c875a36a599aec4e8b876cfdae702590105a5010102070358a4a20257828245466c
617368430034018245466c617368430004020458878e13a20350fa6b4a53d5ad5fdfbe9d
e663e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b82025820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113
a20b820258200123456789abcdeffedcba987654321000112233445566778899aabbccdd
eeff0c1a00012c2201f602f609584b8c0c0013a106781c687474703a2f2f6578616d706c
652e636f6d2f66696c65312e62696e0c0113a106781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Commands</t>
  <t>standard Parameters</t>
  <t>standard Algorithm identifiers</t>
  <t>standard text values</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="Architecture"/> and in <xref target="Information"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="Architecture" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02">
  <front>
    <title>A Firmware Update Architecture for Internet of Things Devices</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02"/>
</reference>
<reference anchor="Information" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02">
  <front>
    <title>Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
6aHZp54ge9su9Pjvzo3+zo3+zo3+zo3+Z3Wjr1wIFpro66PPuY05EznpcQwX
saNlSHmILd5KpQPfqxctfCslUsfBRfDer5WWufdrtskTbFB2brCfpQntIV1B
rjNytHZczdrRcYmUHae1Uyt5Trf+OCGG4dE09enUmrUURnVW05XSm336Ijl6
rznApvepkOxWPel3r56+w7iUjvsnKiq63IhhP0SkOnTrqVX7Fk3ZHxXNPfNJ
vwUTPCOcfKt0nS/lAytBy5b2hoU8MzyOtYCPb/0Gmy+leWk0+B42mnsbcbKu
gVRYrU1PjgpStdWGwqKqIFftLbujssraGtN6R1YF94bX7y5+TNaf0XwOzUef
0X754+SzWq+CbYun1dnF5luXYFeXb/ooihdLNDdZheVblmMXkm+bM/lHe1XC
4yKNEKw6vkiLZlSRVluwpNZcw7j6BjiOZRns3eqb+Ie92zxZLlqmx5Mwe9g0
nNm8po5pz/i1spUhpBOm2UhfPooaqM15SCl+VsY0PPLcR/UbUWlz2p0qAE8q
n1xp3q4yYt2cbBRLYpWT4ZrNwohvDQZedMZ3TLRf+aeea1+FqRx5xlgKP2Vq
aPWEXzINsl7CT63CIgMkPFBrdOyElipNG770ipqteZZ2zLXQGTA2GKXUOA1G
KL2Fzfah2gyb6jRZXaD4qa8/Hw00DbrFihmmSaVYNbj4TTpEyz6ikammPDTm
DN/CuB2afp/UhI0qfQr3qL6qGXnMWKPaYBXbjNFAwMe1QSsWFefjWW2tVROK
9fFxi4q0rgiBj08a085Xc0LK18b/ZZsGU308rn5Mbp1NChk6Ni1Kx6aPp9WP
o6z5W/x4htLZw8fVJqtg3V8ky9LsoGly3NykoWSAbnKyI3u/0/9pl8TiaoeO
mjPyNoJxNKx+TJkIWz6u7WaLYwd9PG7OrtXydW2FTlke9+NxbYV1LZv5uLZC
SsnXPI2xole2/ku6rCrCFGWqq7sUOWpSaikqtEN1ZShRTeWkqE+zMolo0BY9
kLno2lV8vjrjbToCtfQumgAFjEZ5X0GjSapXAGiU3RUQKhK6WvsWOdzc8+0i
tbr0W4RjxQJsk3U1U9Am0mo2oVlORdLZsESRR/XVUX/ZR5Ysjawbw3wj4h+S
f4cBxvuiBpXGm7pRTLM5gSYpTHMBNY7dtG1gy3UzZJ0Mo8chyGtx5lPt6Ru5
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
fz1BWrOBbx4GYRgvl4n3/wOB+pfcMBcCAA==

-->

</rfc>

