<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-02" category="info">

  <front>
    <title abbrev="Firmware Manifest Format">SUIT CBOR manifest serialisation format</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="November" day="04"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="Architecture"/>.</t>

<t>The SUIT manifest is heavily optimised for consumption by constrained devices. This means that it is not constructed as a conventional descriptive document. Instead, of describing what an update IS, it describes what a recipient should DO.</t>

<t>While the SUIT manifest is informed by and optimised for firmware update use cases, there is nothing in the <xref target="Information"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a device’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
</list></t>

<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

</section>
<section anchor="how-to-use-this-document" title="How to use this document">

<t>For information about firmware update in general and the background of the suit manifest, see <xref target="background"/>.
To implement an updatable device, see <xref target="interpreter-behaviour"/> and <xref target="manifest-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="manifest-structure"/>.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="Architecture"/>.</t>

<section anchor="landscape" title="Landscape">

<t>The various constraints on IoT devices creates a broad set of use-case requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple processors may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>mesh networks may require multicast distribution.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="update-workflow-model" title="Update Workflow Model">

<t>There are several fundamental assumptions that inform the model of the firmware update workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependency manifests should be present before any payload is fetched</t>
  <t>In some applications, payloads must be fetched and validated prior to installation</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the secure boot workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed</t>
  <t>All dependencies and payloads must be validated prior to loading</t>
  <t>All loaded images must be validated prior to execution</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest</t>
  <t>Resolve dependencies</t>
  <t>Fetch payload(s)</t>
  <t>Install payload(s)</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further 3 steps:</t>

<t><list style="numbers">
  <t>Verify image(s)</t>
  <t>Load image(s)</t>
  <t>Run image(s)</t>
</list></t>

<t>If verification and running is implemented in bootloader, then the</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="suit-manifest-goals" title="SUIT Manifest goals">

<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="numbers">
  <t>Meet the requirements defined in <xref target="Information"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-summary" title="SUIT manifest design summary">
<t>In order to provide flexible behaviour to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behaviour of a Recipient device. Behaviour is encoded as a specialised byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialised byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies behaviours in a linearised form, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behaviour by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that only manifests authenticated by the appropriate identity have access to operate on a component.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

</section>
</section>
<section anchor="interpreter-behaviour" title="Interpreter Behaviour">

<t>This section describes the behaviour of the manifest interpreter. This section focuses primarily on interpreting commands in the manifest. However, there are several other important behaviours of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid manifest, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version AND it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and MAY include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID)</t>
  <t>Unsupported command encountered</t>
  <t>Unsupported parameter encountered</t>
  <t>Unsupported component ID encountered</t>
  <t>Payload not available (update interpreter)</t>
  <t>Dependency not available (update interpreter)</t>
  <t>Application crashed when executed (bootloader interpreter)</t>
  <t>Watchdog timeout occurred (bootloader interpreter)</t>
  <t>Dependency or Payload verification failed (bootloader interpreter)</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported <xref target="interpreter-parameters">parameters</xref>. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter fundamental properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple devices MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="abstract-machine-description" title="Abstract Machine Description">

<t>The byte code that forms the bulk of the manifest is processed by an interpreter. This interpreter can be modelled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands. Certain commands also affect the machine’s behaviour.</t>

<t>Every command that modifies system state targets a specific component. Components are units of code or data that can be targeted by an update. They are identified by Component identifiers, arrays of binary-strings–effectively a binary path. Each component has a corresponding set of configuration, Parameters. Parameters are used as the inputs to commands.</t>

<section anchor="interpreter-parameters" title="Parameters">

<t>Some parameters are REQUIRED to implement. These parameters allow a device to perform core functions.</t>

<t><list style="symbols">
  <t>Vendor ID</t>
  <t>Class ID</t>
  <t>Image Digest</t>
</list></t>

<t>Some parameters are RECOMMENDED to implement. These parameters are needed for most use-cases.</t>

<t><list style="symbols">
  <t>Image Size</t>
  <t>URI</t>
</list></t>

<t>Other parameters are OPTIONAL to implement. These parameters allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Strict Order</t>
  <t>Soft Failure</t>
  <t>Device ID</t>
  <t>Encryption Info</t>
  <t>Unpack Info</t>
  <t>Source Component</t>
  <t>URI List</t>
  <t>Custom Parameters</t>
</list></t>

</section>
<section anchor="commands" title="Commands">

<t>Commands define the behaviour of a device. The commands are divided into two groups: those that modify state (directives) and those that perform tests (conditions). There are also several Control Flow operations.</t>

<t>Some commands are REQUIRED to implement. These commands allow a device to perform core functions</t>

<t><list style="symbols">
  <t>Check Vendor Identifier (cvid)</t>
  <t>Check Class Identifier (ccid)</t>
  <t>Verify Image (cimg)</t>
  <t>Set Current Component (setc)</t>
  <t>Override Parameters (ovrp)</t>
</list></t>

<t>NOTE: on systems that support only a single component, Set Current Component has no effect.</t>

<t>Some commands are RECOMMENDED to implement. These commands are needed for most use-cases</t>

<t><list style="symbols">
  <t>Set Current Dependency (setd)</t>
  <t>Set Parameters (setp)</t>
  <t>Process Dependency (pdep)</t>
  <t>Run (run)</t>
  <t>Fetch (getc)</t>
</list></t>

<t>Other commands are OPTIONAL to implement. These commands allow a device to implement specific use-cases.</t>

<t><list style="symbols">
  <t>Use Before (ubf)</t>
  <t>Check Component Offset  (cco)</t>
  <t>Check Device Identifier (cdid)</t>
  <t>Check Image Not Match (nimg)</t>
  <t>Check Minimum Battery (minb)</t>
  <t>Check Update Authorised (auth)</t>
  <t>Check Version (cver)</t>
  <t>Abort (abrt)</t>
  <t>Try Each (try)</t>
  <t>Copy (copy)</t>
  <t>Swap (swap)</t>
  <t>Wait For Event (wfe)</t>
  <t>Run Sequence (srun) mandatory component set</t>
  <t>Run with Arguments (arun)</t>
</list></t>

</section>
<section anchor="command-behaviour" title="Command Behaviour">

<t>The following table describes the behaviour of each command. “params”
represents the parameters for the current component or dependency.</t>

<texttable>
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <c>cvid</c>
      <c>binary-match(component, params[vendor-id])</c>
      <c>ccid</c>
      <c>binary-match(component, params[class-id])</c>
      <c>cimg</c>
      <c>binary-match(digest(component), params[digest])</c>
      <c>setc</c>
      <c>component := components[arg]</c>
      <c>ovrp</c>
      <c>params[k] := v for k,v in arg</c>
      <c>setd</c>
      <c>dependency := dependencies[arg]</c>
      <c>setp</c>
      <c>params[k] := v if not k in params for k,v in arg</c>
      <c>pdep</c>
      <c>exec(dependency[common]); exec(dependency[current-segment])</c>
      <c>run</c>
      <c>run(component)</c>
      <c>getc</c>
      <c>store(component, fetch(params[uri]))</c>
      <c>ubf</c>
      <c>assert(now() &lt; arg)</c>
      <c>cco</c>
      <c>assert(offsetof(component) == arg)</c>
      <c>cdid</c>
      <c>binary-match(component, params[device-id])</c>
      <c>nimg</c>
      <c>not binary-match(digest(component), params[digest])</c>
      <c>minb</c>
      <c>assert(battery &gt;= arg)</c>
      <c>auth</c>
      <c>assert(isAuthorised())</c>
      <c>cver</c>
      <c>assert(version_check(component, arg))</c>
      <c>abrt</c>
      <c>assert(0)</c>
      <c>try</c>
      <c>break if exec(seq) is not error for seq in arg</c>
      <c>copy</c>
      <c>store(component, params[src-component])</c>
      <c>swap</c>
      <c>swap(component, params[src-component])</c>
      <c>wfe</c>
      <c>until event(arg), wait</c>
      <c>srun</c>
      <c>exec(arg)</c>
      <c>arun</c>
      <c>run(component, arg)</c>
</texttable>

</section>
</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

</section>
<section anchor="parallel-processing-interpreter" title="Parallel Processing Interpreter">

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters</t>
  <t>Override Parameters</t>
  <t>Set Strict Order = True</t>
  <t>Set Dependency Index</t>
  <t>Set Component Index</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence must declare a single target component. Set Component Index is not permitted inside this sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Depdendency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures is covered in <xref target="RFC8152"/> and the calculation of cryptographic values is beyond the scope of this document.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways, however several templates are provided here to cover common use-cases. Many of these templates can be aggregated to produce more complex behaviour.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: Digest should always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</t>

<section anchor="manifest-source-material" title="Manifest Source Material">

<t>When a manifest is constructed from a descriptive document, the descriptive document SHOULD be included in the severable text section. This section MAY be pruned from the manifest prior to distribution to a device. The inclusion of text source material enables several use-cases on unconstrained intermediate systems, where small manifest size, low parser complexity, and pull parsing are not required.</t>

<t>An unconstrained system that makes decisions based on the manifest can use the source material instead so that it does not need to execute the manifest.</t>

<t>An unconstrained system that presents data to a user can do so according to typical usage patterns without first executing the manifest, and can trust that information with the same level of confidence as the manifest itself.</t>

<t>A verifier can be constructed to emulate execution the manifest and compare the results of that execution to the source material, providing a check that the manifest performs its stated objectives and that the manifest does not exceed the capabilities of the target device.</t>

</section>
<section anchor="required-template-compatibility-check" title="Required Template: Compatibility Check">

<t>The compatibility check ensures that devices only install compatible images.</t>

<t>Common:
Set Current Component
Check Vendor Identifier
Check Class Identifier</t>

<t>All manifests MUST contain the compatibility check template, except as outlined below.</t>

<t>If a device class has a unique trust anchor, and every element in its trust chain is unique–different from every element in any other device class, then it MAY include the compatibility check.</t>

<t>If a manifest includes a dependency that performs a compatibility check, then the dependent manifest MAY include the compatibility check.</t>

<t>The compatibility check template contains a data dependency: Vendor Identifier and Class Identifier MUST be set prior to executing the template. One examples of the full template is included below, however Parameters may be set within a Try-Each block as well. They may also be inherited from a dependent manifest.</t>

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Vendor ID</t>
          <t>Class ID</t>
        </list></t>
      <t>Check Vendor Identifier</t>
      <t>Check Class Identifier</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-xip-secure-boot" title="Use Case Template: XIP Secure Boot">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Run:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Check Image Match</t>
      <t>Directive Run</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-firmware-download" title="Use Case Template: Firmware Download">

<t><list style="symbols">
  <t>Common:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Override Parameters:
      <list style="symbols">
          <t>Digest</t>
          <t>Size</t>
        </list></t>
    </list></t>
  <t>Install:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-from-external-storage" title="Use Case Template: Load from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-load-decompress-from-external-storage" title="Use Case Template Load &amp; Decompress from External Storage">

<t><list style="symbols">
  <t>Load:
  <list style="symbols">
      <t>Set Current Component</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>Source Index</t>
          <t>Compression Info</t>
        </list></t>
      <t>Copy</t>
    </list></t>
</list></t>

</section>
<section anchor="use-case-template-dependency" title="Use Case Template: Dependency">

<t><list style="symbols">
  <t>Dependency Resolution:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Set Parameters:
      <list style="symbols">
          <t>URI</t>
        </list></t>
      <t>Fetch</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
  <t>Validate:
  <list style="symbols">
      <t>Set Current Dependency</t>
      <t>Check Image Match</t>
      <t>Process Dependency</t>
    </list></t>
</list></t>

<t>For any other section that the dependency has, the dependent MUST invoke Process Dependency.</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">

<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Information shared by all command sequences
          <list style="numbers">
              <t>List of dependencies</t>
              <t>List of payloads</t>
              <t>List of payloads in dependencies</t>
              <t>Common list of conditions, directives</t>
            </list></t>
          <t>Dependency resolution Reference or list of conditions, directives</t>
          <t>Payload fetch Reference or list of conditions, directives</t>
          <t>Installation Reference or list of conditions, directives</t>
          <t>Verification conditions/directives</t>
          <t>Load conditions/directives</t>
          <t>Run conditions/directives</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Dependency resolution conditions/directives</t>
      <t>Payload fetch conditions/directives</t>
      <t>Installation conditions/directives</t>
      <t>Text</t>
      <t>COSWID / Reference</t>
      <t>Intermediate Certificate(s) / CWTs</t>
      <t>Inline Payload(s)</t>
    </list></t>
</list></t>

<section anchor="severable-elements" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences</t>

</section>
<section anchor="outer-wrapper" title="Outer wrapper">

<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the outer wrapper are contained in bstr objects. Wherever the manifest references an object in the outer wrapper, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the wrapper is below</t>

<figure><artwork><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper   => bstr .cbor
                                     SUIT_Authentication_Wrapper / nil,
    $SUIT_Manifest_Wrapped,
    ? suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => bstr .cbor SUIT_Command_Sequence,
    ? suit-text-external          => bstr .cbor SUIT_Text_Info,
    ? suit-coswid-external        => bstr .cbor COSWID
}

SUIT_Authentication_Wrapper = [ + (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                  COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)
]]></artwork></figure>

<t>All elements of the outer wrapper must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. The Manifest is authenticated by these blocks in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come first in the SUIT_Outer_Wrapper, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Outer_Wrapper that begins with any element other than a suit-authentication-wrapper.</t>

<t>A manifest that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The outer wrapper MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the outer wrapper contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text-info              => Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => Digest / bstr .cbor COSWID
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor [ + SUIT_Dependency ],
    ? suit-components             => bstr .cbor [ + SUIT_Component_Identifier ],
    ? suit-dependency-components  => bstr .cbor [ + SUIT_Component_Reference ],
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by recipient devices. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Outer_Wrapper so that a recipient can easily identify the correct data in the outer wrapper.</t>

<t>The suit-manifest-version indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text-info is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behaviour of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Parameter Code</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Default</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>boolean</c>
      <c>True</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>2</c>
      <c>boolean</c>
      <c>False</c>
      <c>Command Segment</c>
      <c>Coerce Condition Failure</c>
      <c>Coerces the success code of a command segment to success even when aborted due to a condition failure.</c>
      <c>3</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>4</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>5</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>6</c>
      <c>tstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>7</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>8</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>The information required to decompress the image</c>
      <c>9</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>The information required to unpack the image</c>
      <c>10</c>
      <c>uint</c>
      <c>nil</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>11</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>12</c>
      <c>uint</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>24</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI List</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>25</c>
      <c>boolean</c>
      <c>False</c>
      <c>Component/Dependency</c>
      <c>URI List Append</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>nint</c>
      <c>int/bstr</c>
      <c>nil</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularisation and division of responsibility within a pull parser. The same consideration does not apply to Conditions and Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelise their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametercoerceconditionfailure" title="SUIT_Parameter_Coerce_Condition_Failure">

<t>When executing a command sequence inside SUIT_Run_Sequence and a condition failure occurs, the manifest processor aborts the sequence. If Coerce Condition Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Coerce_Condition_Failure is scoped to the enclosing SUIT_Directive_Run_Sequence. Its value is discarded when SUIT_Directive_Run_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr</t>

</section>
<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-coerce-condition-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf
]]></artwork></figure>

</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition and directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block</t>
</list></t>

<t>Argument blocks are defined for each type of command.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behaviour.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditons of any directive or series of directives, depending on where they are placed in the list. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Argument Type</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>nil</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>nil</c>
      <c>3</c>
      <c>Image Match</c>
      <c>nil</c>
      <c>4</c>
      <c>Use Before</c>
      <c>Unsigned Integer timestamp</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>Unsigned Integer</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>nil</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>nil</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>Unsigned Integer</c>
      <c>27</c>
      <c>Update Authorised</c>
      <c>Integer</c>
      <c>28</c>
      <c>Version</c>
      <c>List of Integers</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>bstr</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Components list. If no digest is specified and the component is not present in the Components list, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. One argument is required, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorised" title="suit-condition-update-authorised">

<t>Request Authorisation from the application and fail if not authorised. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorised is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater</t>
  <t>Greater or Equal</t>
  <t>Equal</t>
  <t>Lesser or Equal</t>
  <t>Lesser</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occured. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3]</t>
  <t>1.2-rc3 = [1,2,-1,3]</t>
  <t>1.2-beta = [1,2,-2]</t>
  <t>1.2-alpha = [1,2,-3]</t>
  <t>1.2-alpha4 = [1,2,-3,4]</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to the system that evaluates the condition matching that integer.
SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behaviour of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>31</c>
      <c>Run with Arguments</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Coerce on Condition Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several suit-directive-run-sequence one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure is initialised to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behaviour of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behaviour of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behaviour of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimisation: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behaviour. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behaviour of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behaviour of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorisation</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating conditional sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    suit-install                => bstr .cbor SUIT_Command_Sequence,
    suit-text                   => bstr .cbor SUIT_Text_Map,
    suit-coswid                 => bstr .cbor concise-software-identity
}

SUIT_Authentication_Wrapper = [ + (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)
]

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bytes,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    ? suit-common                 => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => SUIT_Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text                   => SUIT_Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => SUIT_Digest / bstr .cbor concise-software-identity
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components  => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}


SUIT_Command_Sequence = [ + (SUIT_Condition // SUIT_Directive // SUIT_Command_Custom) ]

SUIT_Command_Custom = (nint, bstr)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive //= (suit-directive-set-component-index,      uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index,     uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,             bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,                 SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-for-each-component,       SUIT_Directive_For_Each_Component_Argument)
SUIT_Directive //= (suit-directive-process-dependency,       nil)
SUIT_Directive //= (suit-directive-set-parameters,           {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,      {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                    nil)
SUIT_Directive //= (suit-directive-copy,                     nil)
SUIT_Directive //= (suit-directive-swap,                     nil)
SUIT_Directive //= (suit-directive-run,                      nil)
SUIT_Directive //= (suit-directive-wait,                     { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,       bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-coerce-condition-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]
SUIT_Priority_Parameter_List = [ + [priority: int, parameters: { + SUIT_Parameters }] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}

suit-authentication-wrapper = 1
suit-manifest = 2

suit-manifest-encryption-info = 3
suit-manifest-encrypted       = 4

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5
suit-condition-custom = 6

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorised        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
suit-directive-do-each                  = 16 ; TBD
suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-run-with-arguments       = 31
suit-directive-swap                     = 32

suit-wait-event-argument-authorisation = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7
suit-wait-event-authorisation = 8

suit-parameter-strict-order = 1
suit-parameter-coerce-condition-failure = 2
suit-parameter-vendor-id = 3
suit-parameter-class-id = 4
suit-parameter-device-id = 5
suit-parameter-uri = 6
suit-parameter-encryption-info = 7
suit-parameter-compression-info = 8
suit-parameter-unpack-info = 9
suit-parameter-source-component = 10
suit-parameter-image-digest = 11
suit-parameter-image-size = 12

suit-parameter-uri-list = 24
suit-parameter-uri-list-append = 25
suit-parameter-prioritised-parameters = 26

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-vendor-domain         = 3
suit-text-vendor-name           = 4
suit-text-model-name            = 5
suit-text-model-info            = 6
suit-text-component-description = 7
suit-text-manifest-json-source  = 8
suit-text-manifest-yaml-source  = 9
]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<section anchor="example-0" title="Example 0:">

<t>Secure boot only.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 1,
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840ebec'
                        h'b66cbecb19dcedacf8459c1a22a1453781ba98d8ffb9'
                        h'd4e2912f29d23bac5ae3d51f1ff0c1b1df05e207ca17'
                        h'483a57ede914cf826b73599137881c8364c8',
    / manifest / 2 : h'a401010201035840a2024c818245466c6173684300340104'
                     h'582e8213a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 1,
        / common / 3 : h'a2024c818245466c6173684300340104582e8213a20b58'
                       h'248202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b582482025820001122334455'
                                    h'66778899aabbccddeeff0123456789ab'
                                    h'cdeffedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 87</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f6025851a401010201035840a2024c818245466c6173684300340104582e8213a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d00c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 172</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840ebecb66cbecb19dcedacf845
9c1a22a1453781ba98d8ffb9d4e2912f29d23bac5ae3d51f1ff0c1b1df05e207ca17483a
57ede914cf826b73599137881c8364c8025851a401010201035840a2024c818245466c61
73684300340104582e8213a20b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d00c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-1" title="Example 1:">

<t>Simultaneous download and installation of payload.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 2,
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840b531'
                        h'42132ebddbf0c523378d16fc904badc56553e41c6713'
                        h'b758dbd39f47effec5e7a583c418129f456d0aaaa3c4'
                        h'3fe06dd30d664b709edf0ad05b70dad38bc2',
    / manifest / 2 : h'a401010202035840a2024c818245466c6173684300340104'
                     h'582e8213a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'095825860c0013a106781b687474703a2f2f6578616d706c'
                     h'652e636f6d2f66696c652e62696e15f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 2,
        / common / 3 : h'a2024c818245466c6173684300340104582e8213a20b58'
                       h'248202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b582482025820001122334455'
                                    h'66778899aabbccddeeff0123456789ab'
                                    h'cdeffedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 118</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f6025870a401010202035840a2024c818245466c6173684300340104582e8213a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d0095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 203</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840b53142132ebddbf0c523378d
16fc904badc56553e41c6713b758dbd39f47effec5e7a583c418129f456d0aaaa3c43fe0
6dd30d664b709edf0ad05b70dad38bc2025870a401010202035840a2024c818245466c61
73684300340104582e8213a20b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d0095825860c0013a106781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e15f6
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2:">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 3,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45",
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658400014'
                        h'750c013f7e1cdbec6f14b99b49195e081d1030508a6b'
                        h'8d271bd99dfb382a7767dc45f20c9943ed22a1eaac9d'
                        h'07a041ec1acfc10ad7e45e6424629ff3e3e5',
    / manifest / 2 : h'a501010203035868a2024c818245466c6173684300340104'
                     h'58568613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04'
                     h'501492af1425695e48bf429b2d51f2ab450b582482025820'
                     h'00112233445566778899aabbccddeeff0123456789abcdef'
                     h'fedcba98765432100c1987d001f602f6095825860c0013a1'
                     h'06781b687474703a2f2f6578616d706c652e636f6d2f6669'
                     h'6c652e62696e15f60c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 3,
        / common / 3 : h'a2024c818245466c617368430034010458568613a40350'
                       h'fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425'
                       h'695e48bf429b2d51f2ab450b5824820258200011223344'
                       h'5566778899aabbccddeeff0123456789abcdeffedcba98'
                       h'765432100c1987d001f602f6' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8613a40350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450b5824820258200011'
                                    h'2233445566778899aabbccddeeff0123'
                                    h'456789abcdeffedcba98765432100c19'
                                    h'87d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 167</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258a1a501010203035868a2024c818245466c617368430034010458568613a403
50fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab450b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 252</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658400014750c013f7e1cdbec6f14
b99b49195e081d1030508a6b8d271bd99dfb382a7767dc45f20c9943ed22a1eaac9d07a0
41ec1acfc10ad7e45e6424629ff3e3e50258a1a501010203035868a2024c818245466c61
7368430034010458568613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af14
25695e48bf429b2d51f2ab450b58248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d001f602f6095825860c0013a106781b6874
74703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-3" title="Example 3:">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 4,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f6584070eb'
                        h'70f2552533fc954e934f50f42bdd9b6f7d4fd7e11463'
                        h'6b9cdbef2a065f9640243a7857f66c4389aea906c4f3'
                        h'b45150c8e55461e9bfda945904033fc70a84',
    / manifest / 2 : h'a5010102040358a3a20254828245466c6173684300340182'
                     h'4352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c0113a20b58248202582000112233445566778899aabbcc'
                     h'ddeeff0123456789abcdeffedcba98765432100c1987d001'
                     h'f602f6095825860c0013a106781b687474703a2f2f657861'
                     h'6d706c652e636f6d2f66696c652e62696e15f60c518e0c00'
                     h'03f60c0113a10a0015f603f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 4,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b58248202582000112233445566778899aabbccddeeff'
                       h'0123456789abcdeffedcba98765432100c1987d00c0113'
                       h'a20b58248202582000112233445566778899aabbccddee'
                       h'ff0123456789abcdeffedcba98765432100c1987d001f6'
                       h'02f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'2000112233445566778899aabbccddee'
                                    h'ff0123456789abcdeffedcba98765432'
                                    h'100c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'8e0c0003f60c0113a10a0015f603f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 236</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258e6a5010102040358a3a20254828245466c61736843003401824352414d4200
040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100c1987d00c0113a20b58248202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d001f602f6095825
860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 321</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f6584070eb70f2552533fc954e934f
50f42bdd9b6f7d4fd7e114636b9cdbef2a065f9640243a7857f66c4389aea906c4f3b451
50c8e55461e9bfda945904033fc70a840258e6a5010102040358a3a20254828245466c61
736843003401824352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b
58248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654
32100c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

</section>
<section anchor="example-4" title="Example 4:">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 5,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0,
                "compression-info": {
                    "algorithm": "gzip"
                }
            }
        },
        { "directive-copy": null }
    ],
    "run-image": [
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658403491'
                        h'5619c1ef02b4a7ffbbb69083e8b3fb82febd9ecd6feb'
                        h'f666d700fb981b208ec6d3df8735f36fd4a0a84e0189'
                        h'43ef80e25f57fc130a43e57c6634f337b7fa',
    / manifest / 2 : h'a6010102050358a3a20254828245466c6173684300340182'
                     h'4352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b58248202582000112233445566778899aabb'
                     h'ccddeeff0123456789abcdeffedcba98765432100c1987d0'
                     h'0c0113a20b5824820258200123456789abcdeffedcba9876'
                     h'54321000112233445566778899aabbccddeeff0c1987d001'
                     h'f602f6095825860c0013a106781b687474703a2f2f657861'
                     h'6d706c652e636f6d2f66696c652e62696e15f60b528a0c00'
                     h'03f60c0113a20843a101010a0016f60c458403f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 5,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b58248202582000112233445566778899aabbccddeeff'
                       h'0123456789abcdeffedcba98765432100c1987d00c0113'
                       h'a20b5824820258200123456789abcdeffedcba98765432'
                       h'1000112233445566778899aabbccddeeff0c1987d001f6'
                       h'02f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8a0c0003f60c0113a20843a101010a0016f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / compression-info / 8 : h'a10101',
                / source-component / 10 : 0,
            },
            / copy / 22, None,
        ],
        / run-image / 12 : h'8403f617f6' \ [
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 244</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258eea6010102050358a3a20254828245466c61736843003401824352414d4200
040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100c1987d00c0113a20b5824820258200123456789abcd
effedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f6095825
860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15
f60b528a0c0003f60c0113a20843a101010a0016f60c458403f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 329</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f6584034915619c1ef02b4a7ffbbb6
9083e8b3fb82febd9ecd6febf666d700fb981b208ec6d3df8735f36fd4a0a84e018943ef
80e25f57fc130a43e57c6634f337b7fa0258eea6010102050358a3a20254828245466c61
736843003401824352414d4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b
5824820258200123456789abcdeffedcba987654321000112233445566778899aabbccdd
eeff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f60b528a0c0003f60c0113a20843a101010a0016f60c45
8403f617f6
]]></artwork></figure>

</section>
<section anchor="example-5" title="Example 5:">

<t>Compatibility test, download, installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 6,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "ext-Flash",
                78848
            ],
            [
                "Flash",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 1 },
        { "condition-not-image": null },
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 1 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840a516'
                        h'466c62602aa017422f23d1469339e40c5cf06f9090da'
                        h'09bd9939ecfc4c1ffe3e6ce50e0620fe9948f76552da'
                        h'703a4c0bf2532d073be2d1f215ec83483f46',
    / manifest / 2 : h'a6010102060358a6a202578282467b1b4595ab2143003401'
                     h'8245466c6173684200040458898e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582482025820001122334455667788'
                     h'99aabbccddeeff0123456789abcdeffedcba98765432100c'
                     h'1987d00c0113a20b5824820258200123456789abcdeffedc'
                     h'ba987654321000112233445566778899aabbccddeeff0c19'
                     h'87d001f602f6095825860c0013a106781b687474703a2f2f'
                     h'6578616d706c652e636f6d2f66696c652e62696e15f60b52'
                     h'8e0c011819f60c0003f60c0113a10a0015f60c47860c0103'
                     h'f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 6,
        / common / 3 : h'a202578282467b1b4595ab21430034018245466c617368'
                       h'4200040458898e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b58248202582000112233445566778899aabbcc'
                       h'ddeeff0123456789abcdeffedcba98765432100c1987d0'
                       h'0c0113a20b5824820258200123456789abcdeffedcba98'
                       h'7654321000112233445566778899aabbccddeeff0c1987'
                       h'd001f602f6' \ {
            / components / 2 : h'8282467b1b4595ab21430034018245466c6173'
                               h'68420004' \
            [
                [h'7b1b4595ab21', h'003401'],
                [h'466c617368', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8e0c011819f60c0003f60c0113a10a0015f6' \ [
            / set-component-index / 12, 1,
            / condition-not-image / 25, None,
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0103f617f6' \ [
            / set-component-index / 12, 1,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 249</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258f3a6010102060358a6a202578282467b1b4595ab21430034018245466c6173
684200040458898e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af142569
5e48bf429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100c1987d00c0113a20b58248202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f6
095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62
696e15f60b528e0c011819f60c0003f60c0113a10a0015f60c47860c0103f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 334</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840a516466c62602aa017422f23
d1469339e40c5cf06f9090da09bd9939ecfc4c1ffe3e6ce50e0620fe9948f76552da703a
4c0bf2532d073be2d1f215ec83483f460258f3a6010102060358a6a202578282467b1b45
95ab21430034018245466c6173684200040458898e13a20350fa6b4a53d5ad5fdfbe9de6
63e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b5824820258200011
2233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c01
13a20b5824820258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e15f60b528e0c011819f60c0003f60c0113a10a0015
f60c47860c0103f617f6
]]></artwork></figure>

</section>
<section anchor="example-6" title="Example 6:">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 7,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 76834
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "Flash",
                132096
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file1.bin"
            }
        },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file2.bin"
            }
        },
        { "directive-set-component": true },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": true },
        { "condition-image": null },
        { "directive-set-component": 0 },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658400d44'
                        h'c766566a88c5bbe61b544edd14effa7d53c9a6d43221'
                        h'99c6285490460b910c8e96c6a1065cc1be9cfa438f7b'
                        h'eeaffa9922e2ae440d6c8d0b9cb26bed2ffe',
    / manifest / 2 : h'a5010102070358a8a20257828245466c6173684300340182'
                     h'45466c6173684300040204588b8e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582482025820001122334455667788'
                     h'99aabbccddeeff0123456789abcdeffedcba98765432100c'
                     h'1987d00c0113a20b5824820258200123456789abcdeffedc'
                     h'ba987654321000112233445566778899aabbccddeeff0c1a'
                     h'00012c2201f602f609584b8c0c0013a106781c687474703a'
                     h'2f2f6578616d706c652e636f6d2f66696c65312e62696e0c'
                     h'0113a106781c687474703a2f2f6578616d706c652e636f6d'
                     h'2f66696c65322e62696e0cf515f60c49880cf503f60c0017'
                     h'f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 7,
        / common / 3 : h'a20257828245466c617368430034018245466c61736843'
                       h'00040204588b8e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b58248202582000112233445566778899aabbcc'
                       h'ddeeff0123456789abcdeffedcba98765432100c1987d0'
                       h'0c0113a20b5824820258200123456789abcdeffedcba98'
                       h'7654321000112233445566778899aabbccddeeff0c1a00'
                       h'012c2201f602f6' \ {
            / components / 2 : h'828245466c617368430034018245466c617368'
                               h'43000402' \
            [
                [h'466c617368', h'003401'],
                [h'466c617368', h'000402'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b58248202'
                                    h'582000112233445566778899aabbccdd'
                                    h'eeff0123456789abcdeffedcba987654'
                                    h'32100c1987d00c0113a20b5824820258'
                                    h'200123456789abcdeffedcba98765432'
                                    h'1000112233445566778899aabbccddee'
                                    h'ff0c1a00012c2201f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : h'8202582000112233445566778899aabb'
                                    h'ccddeeff0123456789abcdeffedcba98'
                                    h'76543210' \
                        [ 2, h'00112233445566778899aabbccddeeff01234567'
                             h'89abcdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : h'820258200123456789abcdeffedcba98'
                                    h'7654321000112233445566778899aabb'
                                    h'ccddeeff' \
                        [ 2, h'0123456789abcdeffedcba987654321000112233'
                             h'445566778899aabbccddeeff' ],
                    / size / 12 : 76834,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'8c0c0013a106781c687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c65312e62696e0c0113a1'
                            h'06781c687474703a2f2f6578616d706c652e636f'
                            h'6d2f66696c65322e62696e0cf515f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file1.bin,
            },
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file2.bin,
            },
            / set-component-index / 12, True,
            / fetch / 21, None,
        ],
        / run-image / 12 : h'880cf503f60c0017f6' \ [
            / set-component-index / 12, True,
            / condition-image / 3, None,
            / set-component-index / 12, 0,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 272</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602590109a5010102070358a8a20257828245466c617368430034018245466c6173
684300040204588b8e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425
695e48bf429b2d51f2ab450c0013a20b58248202582000112233445566778899aabbccdd
eeff0123456789abcdeffedcba98765432100c1987d00c0113a20b582482025820012345
6789abcdeffedcba987654321000112233445566778899aabbccddeeff0c1a00012c2201
f602f609584b8c0c0013a106781c687474703a2f2f6578616d706c652e636f6d2f66696c
65312e62696e0c0113a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65
322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 357</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658400d44c766566a88c5bbe61b54
4edd14effa7d53c9a6d4322199c6285490460b910c8e96c6a1065cc1be9cfa438f7beeaf
fa9922e2ae440d6c8d0b9cb26bed2ffe02590109a5010102070358a8a20257828245466c
617368430034018245466c6173684300040204588b8e13a20350fa6b4a53d5ad5fdfbe9d
e663e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b58248202582000
112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c
0113a20b5824820258200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0c1a00012c2201f602f609584b8c0c0013a106781c687474703a2f2f6578
616d706c652e636f6d2f66696c65312e62696e0c0113a106781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Commands</t>
  <t>standard Parameters</t>
  <t>standard Algorithm identifiers</t>
  <t>standard text values</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="Architecture"/> and in <xref target="Information"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="Architecture" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02">
  <front>
    <title>A Firmware Update Architecture for Internet of Things Devices</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02"/>
</reference>
<reference anchor="Information" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02">
  <front>
    <title>Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
FDlqUmopKrRBdWUoUU3lpKhPszKJaNAaPZC56NpVfL464206ArX0bTQBChiN
8r6CRpNUrwDQKLsrIFQkdLX2NXK4uefbRWp16bcIx4oFWCfraqagTaTVbEKz
nIqks2GJIo/qq6P+sossWRpZN4b5RsQ/JP8OA4z3RQ0qjTd1o5hmcwJNUpjm
Amocu2nbwJbrZsg6GUaPQ5CX4syn2tM3csk5X1jsAX0j2BdlC0wfbR39+jcp
TMUhDyN7PhhXX/3EIKb1DSGN883E+sZmn8y0NZq6a/8erZWSvNSgqfvNTbCY
W98cq5gG/4wDNotqGKIEchZ2tCEGLi6ohNZqikyPyssuxRWDuURr26GB+/7X
HJbdwTDxZVJy6aMOZxjQkZANQYgYEarKMC2yojQJB3WyDQme1HOlgHKuq7oq
VNy6WdPZ/QcvKOnEcjCe5H3MWiEpyLr4797ZV+dP/GfPz/98+vLM/9PZX+mp
9/j8q69PL85OH997/NW9mx++evF4dAy/v7p/X/6+Pvv63le96+D6/N7pf/zH
xenyP//6/X/ef/XVo8fj3p/v3ffuf//XF+Vfftc7/v6rRXrzx2f58sGjl+8O
LpO/PL18fvrk/unpi7N5doZXyg8/HP/x8s9vk/jwSba4+uGHR0fPyyvv2e+m
SfnNN+FldHWavyxmf3pTFvf/evb2+k9PyvzJ139Jjp/eGz753XV6+qos3i2e
D4aPR+Wfkm94WWdPHtQXRdv/shZxslxN50lI6TysXChuGs/CALwBeq/uPTq/
bwHv4Zvrs+u/fv2n7D/P333fu3/6H389l78fnP5H+ADAdXb5x+DeVz+MHv3w
w9WLv/45/Gu6ehf8MZ/8kBycTb3pu4PFKP/zPD3/y/T6T73Dr2+Wj6ani3uP
w/vfT4N3z/ujq5cX0btZ8cfrh4+mj8dvovLd00cvsvnFl19a669Mi5aPpd8F
/f3eCRYLDqkAEmZCwcwrzaG5xaVKh4oZCjgPSrUcvJVHBUNwKO61PfC1Pe7V
vEFehm6CPSdkrhqJpekGfNazI5t+9PcqAsWeiovqNHcHI+pPOBLKjcC1A75q
obQfFEnbGkgrAY8n/l6v1+8PBsPhaDQeTyaHh0dHx8dBMJ2GYRTF8Wy2PgoS
uur1B8PReHJ4dBxMwwgLikXhNDg+OpyMR8NBv7fXHAqnY3lHh5OjeixvW8Sj
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
tEfxGBjHfnw8nUXB8Wh83ANGEaZ42AuORluo9JGtPArQwj0YA0/YLOIcDVq1
zKPheDDqw2WPnOQI+dWj46OYTOaN/GprR7vKSO0zGgvn+etxagSxYxcngtaO
dptPr93IsKsQ2G5k2JKDH/ePYhymHUZD/IzgBAIUzAeb/Tx2itEGO8W6c+Ci
+xpl/uaTsJU2FdWnW+kLBOXXzWgnsW9dR9viH23nmo52c6tZB6MdzsSs3foA
S9vB3LIVjmzUDyOmfDoLjXzL48t30P8H23E2oO/f2Y5TI/Pb9rMJ2bbtZxM1
3raf+qlxj8bW9qkPPUKVfjadp237abZl/jNaqRqtJlur0HeC0a0prD7mL2gK
a9/U/u2m/lY39da++Y9m34yVPWGN0PGL2Dy3phdbQbWWbg8+7cGKex8MyR2X
88uZcAfDSZsJN57sqt+weXZvGz3GNuoKbxO/uq1p19te3Frfvbeb6bjdvOd9
WKxKndR4tnZg3Xn8JOZkWNAnMSejsrBJIei1aQR30fqhZs/bpNrbFs29dfqL
XdDc29p1YQOae7u7MDSj+W/OQ2J7NLdM26NPYdrGx1GsspD+hizd41tL962l
2273m7N0b1rnRkBtgvStpbs+Rktft5buzZZuKvHxD2fqru/6XjW5eftp1lm5
cRewLNBGEr1xA7CWwI6eBv8ANvbh6Hhtmp7xpH8c9uNZbwC37eFsNp1OJ8e9
o2F8NB3OpkeDWTyNjuMwmszW2+qR/wKmrDebHgPPNugdxeEkGkazo8PheAYs
WjQKkIeOgSNem1x1NIxnR714MJ4Bnx72h70AnowPQ7j1gU8fHk4PZ8EaG/tE
mPPxrY29raOf28be2m17aCGPt0mc+PXZ2KfjwVGwrY0dzgQf2B5LIBNys6Uz
+rPY3Me3Nvdfqc39wwx9ZNvb+ozc2txvbe7/wDb3T2Ur/1S2+1ubO/27tbnr
fv7BzbO/sM39E23Gp0KObTZ1E/sgU9m4qa2sy63NfS3o/uls7kaNZB2goGL9
aJBCfptm91qhvAP/iGUbWlzD5fThpnoqQwnwr2H2Rp+H0Trfhl+jhX80arXw
x7tqV/5xLfwObffaifs2ctrPZOHXuoldVBCfyOJ//Eks/qi6bFJPem36yV10
kKhn9DYpGrdF+38ai/+WPE0T2nvteP8pLf47oL1XxXvLBWDc4gKgrP6dX3/O
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
b+4FYRjP54n3/wMUHI9PAiMCAA==

-->

</rfc>

