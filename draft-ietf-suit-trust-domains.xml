<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.27 (Ruby 2.7.0) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-02" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="May" day="02"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
enables delegation of different rights to mutually distrusting entities
for use for different purposes or components in the context of firmware
or software update.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying software updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term trust anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software components from multiple software signing authorities.</t>
  <t>a mechanism to remove an unneeded component</t>
  <t>single-object dependencies</t>
  <t>a partly encrypted manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Software for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about one or more Components for a device, where to
find them, and the devices to which they apply.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically Firmware/Software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All dependency manifests must be present before any payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All dependencies must be validated prior to loading.</t>
</list></t>

<t>Two steps are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t><strong>Verify delegation chains</strong></t>
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t><strong>Resolve dependencies.</strong></t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>In addition, when multiple manifests are used for an update, each manifest's steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the envelope and manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation chains and Integrated Dependencies
The Common metadata section in the Manifest also gains a list of dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| CoSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation"><name>Delegation Chains</name>

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Sectino 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info"><name>Delegation Chains</name>

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A dependency is another SUIT_Envelope that describes additional components.</t>

<t>Dependency manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios, for example:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors may have separate firmware with separate signing authorities. Dependencies allow the firmware for the primary processor to reference a manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of update payloads. The network operator overrides the URI of a payload by providing a dependent manifest that references the original manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new firmware version before releasing it. The configuration is delivered as a binary in the same way as a firmware image. The device operator references the firmware manifest from the firmware author in their own manifest which also defines the configuration.</t>
</list></t>

<t>By using dependencies, components such as Software, configuration, models, and other resources authenticated by different trust anchors can be delivered to devices.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling dependencies. By default, any signature of a dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different components/commands/parameters), it MAY choose to skip signature verification of dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all components specified in a dependency, then that dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Components that should be treated as dependency manifests are identified in the suit-common metadata. See section <xref target="structure-change"/> for details.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the root manifest should be stored; this is particularly complex when a system has multiple, independent root manifests. The manifest component ID resolves this contention. The manifest-component-id is intended to be used by the root manifest. When a dependency manifest also declares a component ID, the dependency manifest's component ID is overridden by the component ID declared by the dependent.</t>

<t>The following CDDL describes the manifest component ID:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of component indices that indicate a dependency manifest. The key of the map are the component indices and the values of the map are any extra metadata needed to describe those dependency manifests.</t>

<t>Because some operations treat dependency manifests differently from other components, it is necessary to identify them. SUIT_Dependencies identifies which components from suit-components (See Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as dependency manifest envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a component prefix or other metadata may be delivered with the component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The components specified by SUIT_Dependency will contain a Manifest Envelope that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of dependencies, some changes are necessary to the abstract machine, outside the typical scope of added commands. These changes alter the behaviour of an existing command and way that the parser processes manifests:</t>

<t><list style="symbols">
  <t>Three new commands are introduced.  <list style="symbols">
      <t>Process dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
    </list></t>
  <t>Dependency manifests are also Components. All commands may target dependency manifests as well as Components, with one exception: process dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lock-step with the Root Manifest. This means that every dependency's current command sequence must be executed before a dependent's later command sequence may be executed. For example, every dependency's Dependency Resolution step MUST be executed before any dependent's payload fetch step.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies' sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the dependency has been the target of a dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified component as a dependency manifest envelope.</t>
  <t>Authenticates the dependency manifest.</t>
  <t>Executes the common-sequence section of the dependency manifest.</t>
  <t>Executes the section of the dependency manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple trust domains, each domain might require independent verification of authenticity or security policies. Trust domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Trust domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more trust domains, a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across trust domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the commands needed to acquire and process the dependencies of the current manifest. Ideally, all dependency manifests should be fetched before any payload is fetched to ensure that all manifests are available and authenticated before any of the (larger) payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All commands are modified in that they can also target dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similarly to suit-directive-override-parameters, suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. Set Parameters is for use when dependencies are used because it allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This allows dependent manifests to change the behavior of a manifest, a dependency that wishes to enforce a specific value of a parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is "fetch payload," this will execute "common" in the current dependency, then "fetch payload" in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current component index does not have an entry in the suit-dependencies map, then this command MUST Abort.</t>

<t>If the current component index has not been the target of a suit-condition-dependency-integrity, then this command MUST Abort.</t>

<t>If the current component is True, then this directive applies to all dependencies. If the current section is "common," then the command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether or not the current component index is present in the dependency list. If the current component is in the dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all dependencies or on all non-dependency components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a dependency manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers">
  <t>Evaluate any delegation chains</t>
  <t>Verify the signature of the manifest hash</t>
  <t>Compare the manifest hash to the provided hash</t>
  <t>Verify the manifest against the manifest hash</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current manifest. The Manifest Processor MUST NOT use cached results from any other manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>suit-directive-unlink applies to manifests. When the components defined by a manifest are no longer needed, the manifest processor unlinks the manifest to inform the manifest processor that they are no longer needed. The unlink command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given manifest more than once, and the manifest processor must enforce this. The manifest processor MAY choose to ignore a Unlink directive depending on device policy.</t>

<t>When the reference counter reaches zero, the suit-uninstall command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in manifest processors.</t>

</section>
</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional components, it may be that there is a need to uninstall the components that have been installed by a manifest. Where this is expected, the uninstall command sequence can provide the sequence needed to cleanly remove the components defined by the manifest and its dependencies. In general, suit uninstall will contain primarily unlink directives.</t>

<t>WARNING: This can cause faults where there are loose dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a component can be removed while it is depended upon by another component. To avoid dependency faults, a manifest author MAY use explicit dependencies where possible, or a manifest processor MAY track references to loose dependencies via reference counting in the same way as explicit dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The Uninstall command sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any dependency is declared, the dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests"><name>Composite Manifests</name>

<t>An implementer MAY choose to place a dependency's envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST be a text string. The URI for the dependency MUST match the text string key of the dependent's envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a dependency manifest that is removed from the envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-manifest. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all dependency manifests, the following commands are added to the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The image fetch sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some components are "installed" or "loaded" it is more productive to use lists of component indices rather than Component Index = True. For example, to install several components, the following commands should be placed in the image install sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument containing list of destination component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index directive, with argument containing list dependency component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-command-sequences"><name>SUIT Command Sequences</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Delegation</c>
      <c><xref target="ovr-delegation"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering software updates to devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='RFC8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference anchor='RFC8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='L. Seitz' initials='L.' surname='Seitz'><organization/></author>
<author fullname='G. Selander' initials='G.' surname='Selander'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='March' year='2020'/>
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor='RFC9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>



<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='27' month='April' year='2023'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-02'/>
   
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='13' month='April' year='2023'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   agreement is provided by ephemeral-static (ES) Diffie-Hellman (DH)
   and AES Key Wrap (AES-KW).  ES-DH uses public key cryptography while
   AES-KW uses a pre-shared key-encryption key.  Encryption of the
   plaintext is accomplished with conventional symmetric key
   cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-12'/>
   
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-19'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionalities in this document.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-delegation"><name>Example 0: Delegation</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>key delegation</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / delegation / 1: << [
    [
      / NOTE: signed by trust anchor /
      << 18([
        / protected: / << {
          / alg / 1: -7 / ES256 /
        } >>,
        / unprotected / {
        },
        / payload: / << {
          / cnf / 8: {
            / NOTE: public key of delegated authority /
            / COSE_Key / 1: {
              / cty / 1: 2 / EC2 /,
              / crv / -1: 1 / P-256 /,
              / x / -2:
                h'0E908AA8F066DB1F084E0C3652C63952
                  BD99F2A5BDB22F9E01367AAD03ABA68B',
              / y / -3:
                h'77DA1BD8AC4F0CB490BA210648BF79AB
                  164D49AD3551D71D314B2749EE42D29A'
            }
          }
        } >>,
        / signature: /
          h'FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925C155E724
            5A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE4C4B5315'
      ]) >>
    ]
  ] >>,
  / NOTE: signed by delegated authority /
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'99F949043701D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA9135
          76DEF136B74EA89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF274'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / components / 2: [
        [
          '00'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'dependent.suit'
    ],
    / invoke / 9: << [
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00'
      },
      / directive-invoke / 23, 15
    ] >>,
    / install / 17: << [
      / directive-override-parameters / 20, {
        / parameter-content / 18: 'hello world'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  352</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158
200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03
ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D
314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715C
C10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B82D
06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB19
B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD284
43A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A4900
DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41C1
53CA51548C73FF71A2BAF27440035842A6010102000347A1028181423030
05814E646570656E64656E742E73756974094D8414A11746636174203030
170F11528414A1124B68656C6C6F20776F726C64120F
]]></artwork></figure>

</section>
<section anchor="example-1-process-dependency"><name>Example 1: Process Dependency</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'4874ADC80A9128A2B2057F5FE59C45F8ED10A9BF9C5308FCF951B8BBAF434B95'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'C257E23A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD2209886889
          1DF42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B916'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  374</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58204874ADC80A9128A2B2057F5FE59C45F8ED
10A9BF9C5308FCF951B8BBAF434B95584AD28443A10126A0F65840C257E2
3A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD22098868891D
F42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B9
160358FAA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5858880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160157821687474703A2F2F6578616D706C652E636F6D2F
646570656E64656E742E737569741502030F1158538E0C0114A103582482
2F58206EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA3
88B13E2F51070F0B000C0014A112581A20696E206D756C7469706C652074
7275737420646F6D61696E73120F
]]></artwork></figure>

</section>
<section anchor="example-2-integrated-dependency"><name>Example 2: Integrated Dependency</name>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
  <t>integrated dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'318EAD5F671A6D2593D7ADB7B6CCADC49F72704507004F297A25AF16A48A2111'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'287D5AAB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C99
          50D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627DC3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  / NOTE: Example 0 /
  "#dependent.suit":
    h'D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158200E
      908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03ABA68B22
      582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D314B2749EE42
      D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925
      C155E7245A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE
      4C4B5315025874835824822F58206EA128D7BB19B86F77C4227F2A29F22026A4
      1958ACC45CC0A35BA388B13E2F51584AD28443A10126A0F6584099F949043701
      D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA913576DEF136B74E
      A89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF27440035842A601
      0102000347A102818142303005814E646570656E64656E742E73756974094D84
      14A11746636174203030170F11528414A1124B68656C6C6F20776F726C64120F'
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  683</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F5820318EAD5F671A6D2593D7ADB7B6CCADC49F
72704507004F297A25AF16A48A2111584AD28443A10126A0F65840287D5A
AB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C9950
D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627D
C30358BCA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5845880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160156F23646570656E64656E742E737569741502030F11
58288A0C010B000C0014A112581A20696E206D756C7469706C6520747275
737420646F6D61696E73120F6F23646570656E64656E742E737569745901
60D86BA301589E8181589AD28443A10126A0584FA108A101A40102200121
58200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD
03ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D7
1D314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F79871
5CC10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B8
2D06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB
19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD2
8443A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A49
00DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41
C153CA51548C73FF71A2BAF27440035842A6010102000347A10281814230
3005814E646570656E64656E742E73756974094D8414A117466361742030
30170F11528414A1124B68656C6C6F20776F726C64120F
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
Ws47Dxf0ZQnv/DwRTwL3/wOpkhfTxMQAAA==

-->

</rfc>

