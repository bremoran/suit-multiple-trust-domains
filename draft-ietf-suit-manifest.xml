<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-11" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2020" month="December" day="08"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads or Dependencies.</t>
  <t>Delegation Chains (see <xref target="ovr-delegation"/>) allow a Recipient to work from one of its Trust Anchors to an authority of the Authentication Block.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, including lists of dependencies and affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated dependencies (see <xref target="ovr-integrated"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependencies            |      +-> +-----------------------+
| Components IDs          |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads or dependencies. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (<xref target="ovr-auth"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains a bstr-wrapped <xref target="SUIT_Digest"></xref> and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of three parts: a list of dependencies, a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/>, and <xref target="SUIT_Dependency"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Dependency Resolution, Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. A Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command.</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, Concise Software Identifiers (<xref target="I-D.ietf-sacm-coswid">CoSWID</xref>), or Text data. Integrated Dependencies and Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text and CoSWID sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Dependencies and Payloads">

<t>In some cases, it is beneficial to include a dependency or a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest requires encryption, it must be referenced as a dependency, so a trivial manifest may be used to enclose the encrypted manifest. The encrypted manifest may be contained in the dependent manifest’s envelope.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="composite-manifests"/>, <xref target="encrypted-manifests"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Manifest Processor Behavior">

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Manifest Processor Setup">

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
  <t>Missing component from a set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="I-D.ietf-suit-architecture"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="I-D.ietf-suit-information-model"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity. Where a device supports only one level of access, it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device supports more than one trusted party, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index or Set Dependency Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again in its entirety after authenticity validation.</t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>Alternatively, a Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor–a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component or dependency. A dependency is another SUIT_Envelope that describes additional components. Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object “current” is used. It represents the component identified by the Component Index or the dependency identified by the Dependency Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
    if component-index is not false
    else dependencies\[dependency-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg]. The actual operation performed for Set Component Index is described by the following pseudocode, however, because of the definition of current (above), these are semantically equivalent.</t>

<figure><artwork><![CDATA[
component-index := arg
dependency-index := false
]]></artwork></figure>

<t>Similarly, Set Dependency Index is semantically equivalent to current := dependencies[arg]</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency. Most commands operate on either a component or a dependency. Setting the Component Index clears the Dependency Index. Setting the Dependency Index clears the Component Index.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Offset</c>
      <c>assert(offsetof(current) == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Check Image Not Match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(current, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true" title="Special Cases of Component Index and Dependency Index">

<t>Component Index and Dependency Index can each take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index and Set Dependency Index. Arrays of integers MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 3 or more components or 3 or more dependencies, respectively. True MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 2 or more components or 2 or more dependencies, respectively. Each of these operates on the list of components or list of dependencies declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) or a list of dependencies (Set Dependency Index) to which each subsequent command applies. The value True replaces the list of component indices or dependency indices with the full list of components or the full list of dependencies, respectively, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component or dependency identified by the component index or dependency index if that index is an integer, or 2. it operates on each component or dependency identified by an array of indicies, or 3. it operates on every component or every dependency if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else if component-index is integer:
    current-list = [ components[component-index] ]
else if dependency-index is true:
    current-list = dependencies
else if dependency-index is array:
    current-list = [ dependencies[idx] for idx in dependency-index ]
else:
    current-list = [ dependencies[dependency-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component or Dependency. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True or Dependency Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index or Dependency Index to each index in turn.</t>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component or dependency index of True, it does not ignore any commands. It applies them to the current component or dependency on each iteration.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index or Set Dependency Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index or Set Dependency Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The Manifest Processor MUST also support a Dependency Index of True, which applies to every dependency, as described in <xref target="index-true"/></t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in <xref target="command-behavior"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True or Dependency Index = True, this means that the parameters consumed by each command MUST have been set for each Component or Dependency, respectively.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component and no dependencies, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</spanx></t>

<section anchor="template-compatibility-check" title="Compatibility Check Template">

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot" title="Trusted Invocation Template">

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template" title="Component Download Template">

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

<t>Optionally, the Set Parameters directive in the install sequence MAY also contain Encryption Info (see <xref target="suit-parameter-encryption-info"/>), Compression Info (see <xref target="suit-parameter-compression-info"/>), or Unpack Info (see <xref target="suit-parameter-unpack-info"/>) to perform simultaneous download and decryption, decompression, or unpacking, respectively.</t>

</section>
<section anchor="template-install" title="Install Template">

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-install-transform" title="Install and Transform Template">

<t>The goal of the Install and Transform template is to use an image already stored in an identified component to decompress, decrypt, or unpack at time of installation.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: all Component Download operations are moved from the common sequence and the install sequence to the fetch sequence. The Component Download template targets a download component identifier, while the Install and Transform template uses an install component identifier. In-place unpacking, decompression, and decryption is complex and vulnerable to power failure. Therefore, these identifiers SHOULD be different; in-place installation SHOULD NOT be used without establishing guarantees of robustness to power failure.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for:  <list style="symbols">
      <t>Source Component for download component identifier (see <xref target="suit-parameter-source-component"/>)</t>
      <t>Encryption Info (see <xref target="suit-parameter-encryption-info"/>)</t>
      <t>Compression Info (see <xref target="suit-parameter-compression-info"/>)</t>
      <t>Unpack Info (see <xref target="suit-parameter-unpack-info"/>)</t>
    </list></t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload" title="Integrated Payload Template">

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>) except that it places an added restriction on the URI passed to the Set Parameters directive.</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MAY be a positive or negative integer. The payload envelope key MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the manifest. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the payload. For example, an envelope that contains a payload a key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
<section anchor="template-load-ext" title="Load from Nonvolatile Storage Template">

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-load-decompress" title="Load &amp; Decompress from Nonvolatile Storage Template">

<t>The goal of the Load &amp; Decompress from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, decompressing on-the-fly, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This template is similar to <xref target="template-load-ext"/> but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

<t>This template can be modified for decryption or unpacking by adding Decryption Info or Unpack Info to the Set Parameters directive.</t>

</section>
<section anchor="template-dependency" title="Dependency Template">

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementer MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see <xref target="secparameters"/>)</t>
      <t>Encryption Info (see <xref target="secparameters"/>)</t>
    </list></t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template.</t>

<t>NOTE: Any test can be used to select between images, Check Offset Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Delegation Chains, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see <xref target="authentication-info"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list containing a <xref target="SUIT_Digest"></xref> and one or more cryptographic authentication wrappers for the Manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the Manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>To use an encrypted manifest, it must be a dependency of a plaintext manifest. This allows fine-grained control of what information is accessible to intermediate systems for the purposes of management, while still preserving the confidentiality of the manifest contents. This also means that a Recipient can process an encrypted manifest in the same way as an encrypted payload, allowing code reuse.</t>

<t>A template for using an encrypted manifest is covered in Encrypted Manifest Template (<xref target="template-encrypted-manifest"/>).</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a Concise Software Identifier (CoSWID) found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>The CoSWID, Text section, or any Command Sequence of the Update Procedure (Dependency Resolution, Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps Recipients to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>) or the suit-common of a dependency.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
      <c>suit-text-version-required</c>
      <c>A free text expression of the required version number</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="text-version-required" title="text-version-required">

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author SHOULD populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a free text expression that is representative of the version constraints placed on the dependency. This text SHOULD be expressive enough that a device operator can be expected to understand the dependency. This is a free text field and there are no specific formatting rules.</t>

<t>By way of example only, to express a dependency on a component “[‘x’, ‘y’]”, where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<figure><artwork><![CDATA[
[h'78',h'79'] : {
    7 : ">=1.2.5,<2"
}
]]></artwork></figure>

<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid contains a Concise Software Identifier (CoSWID) as defined in <xref target="I-D.ietf-sacm-coswid"/>. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid typically requires no processing by the Recipient. However all Recipients MUST NOT fail if a suit-coswid is present.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of <xref target="SUIT_Dependency"></xref> blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement; at least one manifest in a dependency tree MUST contain a suit-components block.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or commamd in suit-common-sequence results in a smaller encoding.</t>

<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see <xref target="suit-component-identifier"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. A dependency MAY declare a prefix to the components defined in the dependency manifest. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution: suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the invocable manifest or the “process dependencies” directive for any dependents of the invocable manifest. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the Component Identifier tables defined at the beginning of the manifest. For the purpose of setting the index, the two Component Identifier tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>To facilitate construction of Reports that describe the success, or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a Manifest Processor MAY forward information about the command to a Reporting Engine, which is responsible for reporting boot or update status to a third party. The Reporting Engine is entirely implementation-defined, the reporting policy simply facilitates the Reporting Engine’s interface to the SUIT Manifest Processor.</t>

<t>The information elements provided to the Reporting Engine are:</t>

<t><list style="symbols">
  <t>The reporting policy</t>
  <t>The result of the command</t>
  <t>The values of parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>Together, these elements are called a Record. A group of Records is a Report.</t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array. If the dependency index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Dependency, in the order expressed in the Dependencies list or the component index array, respectively.</t>

<t>This specification does not define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Procedure, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-parameter-component-offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="cbor-pen-uuid-namespace-identifier" title="CBOR PEN UUID Namespace Identifier">

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 DE                # tag(111)
   45                # bytes(5)
      2B 06 01 04 01 # X.690 Clause 8.19
#    1.3  6  1  4  1  show component encoding
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 08cfcc43-47d9-5696-85b1-9c738465760e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers" title="Constructing UUIDs">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expiry date for the use of the manifest encoded as the positive integer number of seconds since 1970-01-01. Implementations that use this parameter MUST use a 64-bit internal representation of the integer.</t>

</section>
<section anchor="suit-parameter-component-offset" title="suit-parameter-component-offset">

<t>This parameter sets the offset in a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its offset into the component’s storage area. This offset MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>SUIT_Compression_Info defines any information that is required for a Recipient to perform decompression operations. SUIT_Compression_Info is a map containing this data. The only element defined for the map in this specification is the suit-compression-algorithm. This document defines the following suit-compression-algorithm’s: ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="I-D.kucherawy-rfc8478bis"/>.</t>

<t>Additional suit-compression-algorithm’s can be registered through the IANA-maintained registry. If such a format requires more data than an algorithm identifier, one or more new elements MUST be introduced by specifying an element for SUIT_Compression_Info-extensions.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a Recipient to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with suit-condition-minimum-battery (<xref target="suit-condition-minimum-battery"/>).</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with suit-condition-update-authorized (<xref target="suit-condition-update-authorized"/>) to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when suit-condition-version (<xref target="suit-condition-version"/>) is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>suit-directive-wait (<xref target="suit-directive-wait"/>) directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as suit-parameter-update-priority</c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (seconds since 1970-01-01)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-time-of-day-utc</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00 UTC</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
      <c>suit-wait-event-day-of-week-utc</c>
      <c>uint</c>
      <c>Wait until days since Sunday UTC</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>Indicates a list of URIs from which to fetch a resource. The URI list is encoded as a list of text string, in priority order. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context. The Recipient should attempt to fetch the resource from each URI in turn, ruling out each, in order, if the resource is inaccessible or it is otherwise undesirable to fetch from that URI. suit-parameter-uri-list is consumed by suit-directive-fetch-uri-list (<xref target="suit-directive-fetch-uri-list"/>).</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. SUIT_Process_Dependency must preserve and restore the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-condition-component-offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>). If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter (<xref target="suit-parameter-use-before"/>), which must have already been set as a parameter, encoded as seconds after 1970-01-01 00:00:00 UTC. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-offset" title="suit-condition-component-offset">

<t>Verify that the offset of the current component matches the offset set in suit-parameter-component-offset (<xref target="suit-parameter-component-offset"/>). This condition allows a manifest to select between several images to match a target offset.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient’s battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes suit-parameter-minimum-battery (<xref target="suit-parameter-minimum-battery"/>).</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. suit-parameter-update-priority (<xref target="suit-parameter-update-priority"/>) provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component’s version against the version info specified in suit-parameter-version (<xref target="suit-parameter-version"/>)</t>

</section>
<section anchor="suit-condition-abort" title="suit-condition-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom" title="suit-condition-custom">

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Fetch URI list</c>
      <c>suit-directive-fetch-uri-list</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value “True” is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If the following commands apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies, or an array of unsigned integer indices into the list of dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>If dependency index is set to True when a command is invoked, then the command applies to all dependencies, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the dependency index is set to True, the Manifest Processor MUST execute the command once for each possible dependency index, ensuring that the command receives the parameters corresponding to that dependency index. If the dependency index is set to an array of unsigned integers, then the Manifest Processor MUST execute the command once for each listed dependency index, ensuring that the command receives the parameters corresponding to that dependency index.</t>

<t>See <xref target="index-true"/> for more details.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” then the command sequence MUST be terminated with an error.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and dependency-index, respectively. If component-index or dependency-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

</section>
<section anchor="suit-directive-fetch-uri-list" title="suit-directive-fetch-uri-list">

<t>suit-directive-fetch-uri-list uses the same semantics as suit-directive-fetch (<xref target="suit-directive-fetch"/>), except that it iterates over the URI List (<xref target="suit-parameter-uri-list"/>) to select a URI to fetch from.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the CoSWID, Text section, or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The SUIT digest is a CBOR List containing two elements: a suit-digest-algorithm-id and a bstr containing the bytes of the digest.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 48 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 480 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>&#160;</c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>&#160;</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>&#160;</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>&#160;</c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>&#160;</c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>&#160;</c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>&#160;</c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>&#160;</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>&#160;</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>&#160;</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>&#160;</c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>&#160;</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>&#160;</c>
      <c>30</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>&#160;</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>&#160;</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>5</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>19</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>20</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>27</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>28</c>
      <c>Version</c>
      <c>{{suit-parameter-version}</c>
      <c>29</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>30</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values" title=" SUIT Component Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<section anchor="suit-digest-algorithm-identifiers" title="SUIT Digest Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>SHA224</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>2</c>
      <c>SHA256</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>3</c>
      <c>SHA384</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>4</c>
      <c>SHA512</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>5</c>
      <c>SHA3-224</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>6</c>
      <c>SHA3-256</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>7</c>
      <c>SHA3-384</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>8</c>
      <c>SHA3-512</c>
      <c><xref target="SUIT_Digest"/></c>
</texttable>

</section>
<section anchor="suit-compression-algorithm-identifiers" title="SUIT Compression Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>zlib</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>2</c>
      <c>Brotli</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>3</c>
      <c>zstd</c>
      <c><xref target="suit-parameter-compression-info"/></c>
</texttable>

</section>
<section anchor="unpack-algorithms" title="Unpack Algorithms">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>HEX</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>2</c>
      <c>ELF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>3</c>
      <c>COFF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>4</c>
      <c>SREC</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
</texttable>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="I-D.ietf-suit-architecture"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='October' day='21' year='2020' />

<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints.  Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities but it also enables other important capabilities such as updating configuration settings as well as adding new functionality.  In addition to the definition of terminology and an architecture this document motivates the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-14.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='October' day='28' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-08.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='November' day='2' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-13.txt' />
</reference>



<reference anchor="I-D.ietf-sacm-coswid">
<front>
<title>Concise Software Identification Tags</title>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='J' surname='Fitzgerald-McKay' fullname='Jessica Fitzgerald-McKay'>
    <organization />
</author>

<author initials='C' surname='Schmidt' fullname='Charles Schmidt'>
    <organization />
</author>

<author initials='D' surname='Waltermire' fullname='David Waltermire'>
    <organization />
</author>

<date month='November' day='2' year='2020' />

<abstract><t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of semantics and features as SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory efficient format.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-sacm-coswid-16' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-sacm-coswid-16.txt' />
</reference>



<reference anchor="I-D.ietf-cbor-tags-oid">
<front>
<title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='S' surname='Leonard' fullname='Sean Leonard'>
    <organization />
</author>

<date month='November' day='17' year='2020' />

<abstract><t>The Concise Binary Object Representation (CBOR, draft-ietf-cbor- 7049bis) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.  The present document defines CBOR tags for object identifiers (OIDs). It is intended as the reference document for the IANA registration of the CBOR tags so defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-cbor-tags-oid-03.txt' />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8747" target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2020' month='March' />
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor="I-D.kucherawy-rfc8478bis">
<front>
<title>Zstandard Compression and the application/zstd Media Type</title>

<author initials='Y' surname='Collet' fullname='Yann Collet'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='April' day='23' year='2020' />

<abstract><t>Zstandard, or "zstd" (pronounced "zee standard"), is a data compression mechanism.  This document describes the mechanism and registers a media type and content encoding to be used when transporting zstd-compressed content via Multipurpose Internet Mail Extensions (MIME).  It also registers a corresponding media type, content encoding, and structured syntax suffix.  Despite use of the word "standard" as part of its name, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.  This document replaces and obsoletes RFC 8478.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-kucherawy-rfc8478bis-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-kucherawy-rfc8478bis-05.txt' />
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.48(SUIT_Envelope)
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Severable_Manifest_Members = (
  ? suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
SUIT_Integrated_Dependency = (
    suit-integrated-payload-key => bstr .cbor SUIT_Envelope
)
suit-integrated-payload-key = nint / uint .ge 24

SUIT_Manifest_Tagged = #6.480(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Manifest_Members,
    SUIT_Severable_Members_Digests,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unserverble-manifest-member-extensions,
)

SUIT_Severable_Members_Digests = (
  ? suit-dependency-resolution => SUIT_Digest,
  ? suit-payload-fetch => SUIT_Digest,
  ? suit-install => SUIT_Digest,
  ? suit-text => SUIT_Digest,
  ? suit-coswid => SUIT_Digest,
  * $$severable-manifest-members-digests-extensions
)

SUIT_Common = {
    ? suit-dependencies           => SUIT_Dependencies,
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-not-match,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-use-before,        SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-minimum-battery,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-update-authorized, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-version,           SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-offset,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-wait,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-fetch-uri-list,    SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

SUIT_Parameters //= (suit-parameter-uri-list =>
    bstr .cbor SUIT_URI_List)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    * $$SUIT_Compression_Info-extensions,
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    * $$SUIT_Unpack_Info-extensions,

}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_URI_List = [+ tstr ]

SUIT_Text_Map = {
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    },
    SUIT_Text_Keys
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    ? suit-text-version-required      => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1

suit-unpack-algorithm  = 1

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
suit-text-version-required      = 7
]]></artwork></figure>

</section>
<section anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-offset</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'5c097ef64bf3bb9b494e71e1f2418eef8d466cc902f639a855ec9af3e9eddb99'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'5c097ef64bf3bb9b494e71e1f2418eef8d466cc902f639a855ec9af3e9eddb99'
                    ]),
                    / signature / h'60f5c3d03a3aa759bfef2ef0f5f97a93b1
f5e741f7463f4385af88513a5c2957bea2d6c4cfddd03392a267aab0fc0fd515560ed5
8e33fad26ac32a024c5a7143'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:0,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  159</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a2025827815824820258205c097ef64bf3bb9b494e71e1f2418eef8d466c
c902f639a855ec9af3e9eddb99035871a50101020003585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f0a
4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a2025898825824820258205c097ef64bf3bb9b494e71e1f2418eef8d466c
c902f639a855ec9af3e9eddb99586fd28443a10126a05824820258205c09
7ef64bf3bb9b494e71e1f2418eef8d466cc902f639a855ec9af3e9eddb99
584060f5c3d03a3aa759bfef2ef0f5f97a93b1f5e741f7463f4385af8851
3a5c2957bea2d6c4cfddd03392a267aab0fc0fd515560ed58e33fad26ac3
2a024c5a7143035871a50101020003585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f0a4382030f0c4382
1702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'987eec85fa99fd31d332381b9810f90b05c2e0d4f284a6f4211207ed00fff750'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'987eec85fa99fd31d332381b9810f90b05c2e0d4f284a6f4211207ed00fff750'
                    ]),
                    / signature / h'750141d65b4f20a88dc70c6785a67e0f4f
085aead83ba2289d6e37271508cc91e0a0592f5c940c2257c9c0b26403c0ba4477f2ce
37b60089fe02cde7911d1c15'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  194</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820987eec85fa99fd31d332381b9810f90b05c2e0
d4f284a6f4211207ed00fff750035894a50101020103585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f09
58258613a115781b687474703a2f2f6578616d706c652e636f6d2f66696c
652e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  307</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589882582482025820987eec85fa99fd31d332381b9810f90b05c2e0
d4f284a6f4211207ed00fff750586fd28443a10126a0582482025820987e
ec85fa99fd31d332381b9810f90b05c2e0d4f284a6f4211207ed00fff750
5840750141d65b4f20a88dc70c6785a67e0f4f085aead83ba2289d6e3727
1508cc91e0a0592f5c940c2257c9c0b26403c0ba4477f2ce37b60089fe02
cde7911d1c15035894a50101020103585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f0958258613a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields" title="Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'75685579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'75685579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a'
                    ]),
                    / signature / h'861b9bfb449125742baa648bc9d148cba4
5519cca8efecf705c2165ecdecaeba8b6ce2131284e66708788d741e8779d5973fa8e2
5da49eb203c81920719da949'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
        ],
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-run / 23,2
        ]),
        / text / 13:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'23f48b2e2838650f43c144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8'
        ],
    }),
    / install / 9:bstr .cbor ([
        / directive-set-parameters / 19,{
            / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
        } ,
        / directive-fetch / 21,2 ,
        / condition-image-match / 3,15
    ]),
    / text / 13:bstr .cbor ({
        [h'00']:{
                / vendor-domain / 3:'arm.com',
                / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
            }
    }),
}
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  233</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a20258278158248202582075685579a83babd71ec8ef22fa49ac873f78a7
08a43a674e782ad30b6598d17a0358bba70101020203585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f09
820258203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f94
9d84ea0e18d20a4382030f0c438217020d8202582023f48b2e2838650f43
c144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  346</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a20258988258248202582075685579a83babd71ec8ef22fa49ac873f78a7
08a43a674e782ad30b6598d17a586fd28443a10126a05824820258207568
5579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a
5840861b9bfb449125742baa648bc9d148cba45519cca8efecf705c2165e
cdecaeba8b6ce2131284e66708788d741e8779d5973fa8e25da49eb203c8
1920719da9490358bba70101020203585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f09820258203ee96d
c79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a
4382030f0c438217020d8202582023f48b2e2838650f43c144234aee1840
1ffe3cce4733b23881c3a8ae2d2b66e8
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  929</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a40258988258248202582075685579a83babd71ec8ef22fa49ac873f78a7
08a43a674e782ad30b6598d17a586fd28443a10126a05824820258207568
5579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a
5840861b9bfb449125742baa648bc9d148cba45519cca8efecf705c2165e
cdecaeba8b6ce2131284e66708788d741e8779d5973fa8e25da49eb203c8
1920719da9490358bba70101020203585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f09820258203ee96d
c79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a
4382030f0c438217020d8202582023f48b2e2838650f43c144234aee1840
1ffe3cce4733b23881c3a8ae2d2b66e809583c8613a1157832687474703a
2f2f6578616d706c652e636f6d2f766572792f6c6f6e672f706174682f74
6f2f66696c652f66696c652e62696e1502030f0d590204a20179019d2323
204578616d706c6520323a2053696d756c74616e656f757320446f776e6c
6f61642c20496e7374616c6c6174696f6e2c2053656375726520426f6f74
2c2053657665726564204669656c64730a0a202020205468697320657861
6d706c6520636f766572732074686520666f6c6c6f77696e672074656d70
6c617465733a0a202020200a202020202a20436f6d7061746962696c6974
7920436865636b20287b7b74656d706c6174652d636f6d7061746962696c
6974792d636865636b7d7d290a202020202a2053656375726520426f6f74
20287b7b74656d706c6174652d7365637572652d626f6f747d7d290a2020
20202a204669726d7761726520446f776e6c6f616420287b7b6669726d77
6172652d646f776e6c6f61642d74656d706c6174657d7d290a202020200a
2020202054686973206578616d706c6520616c736f2064656d6f6e737472
6174657320736576657261626c6520656c656d656e747320287b7b6f7672
2d736576657261626c657d7d292c20616e64207465787420287b7b6d616e
69666573742d6469676573742d746578747d7d292e814100a2036761726d
2e636f6d0578525468697320636f6d706f6e656e7420697320612064656d
6f6e7374726174696f6e2e20546865206469676573742069732061207361
6d706c65207061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images" title="Example 3: A/B images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'ae0c1ea689c9800a843550f38796b6fdbd52a0c78be5d26011d8e784da43d47c'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'ae0c1ea689c9800a843550f38796b6fdbd52a0c78be5d26011d8e784da43d47c'
                    ]),
                    / signature / h'359960bae5a7de2457c8f48d3250d96d1a
f2d36e08764b62d76f8a3f3041774b150b2c835bb1b2d7b1b2e629e1f08cc3b1b48fce
bb8fb38182c116161e02b33f'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    bstr .cbor ([
                        / directive-override-parameters / 20,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:bstr .cbor ([
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                            ]),
                            / image-size / 14:34768,
                        }
                    ]) ,
                    bstr .cbor ([
                        / directive-override-parameters / 20,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:bstr .cbor ([
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                            ]),
                            / image-size / 14:76834,
                        }
                    ])
                ] ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-try-each / 15,[
                bstr .cbor ([
                    / directive-set-parameters / 19,{
                        / offset / 5:33792,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ]) ,
                bstr .cbor ([
                    / directive-set-parameters / 19,{
                        / offset / 5:541696,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ])
            ] ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  330</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820ae0c1ea689c9800a843550f38796b6fdbd52a0
c78be5d26011d8e784da43d47c0359011ba5010102030358aaa202818141
000458a18814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af
1425695e48bf429b2d51f2ab450f8258368614a105198400050514a20358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d0583a8614a1051a00084400050514a203582482
0258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0e1a00012c22010f020f095861860f82582a8613a105198400
050513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
312e62696e582c8613a1051a00084400050513a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  443</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589882582482025820ae0c1ea689c9800a843550f38796b6fdbd52a0
c78be5d26011d8e784da43d47c586fd28443a10126a0582482025820ae0c
1ea689c9800a843550f38796b6fdbd52a0c78be5d26011d8e784da43d47c
5840359960bae5a7de2457c8f48d3250d96d1af2d36e08764b62d76f8a3f
3041774b150b2c835bb1b2d7b1b2e629e1f08cc3b1b48fcebb8fb38182c1
16161e02b33f0359011ba5010102030358aaa202818141000458a18814a2
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450f8258368614a105198400050514a2035824820258200011
2233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0e1987d0583a8614a1051a00084400050514a20358248202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a
00012c22010f020f095861860f82582a8613a105198400050513a115781c
687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e582c
8613a1051a00084400050513a115781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load &amp; Decompress (<xref target="template-load-decompress"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'4b4c7c8c0fda76c9c9591a9db160918e2b3c96a58b0a5e4984fd4e8f9359a928'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'4b4c7c8c0fda76c9c9591a9db160918e2b3c96a58b0a5e4984fd4e8f9359a928'
                    ]),
                    / signature / h'd721cb3415f27cfeb8ef066bb6312ba758
32b57410a0c700de71cf8004ea23b9dd3c912a99fab111e9b8f2cc55c7dffcc37012de
cf72e44f69b3d3db8cc98cb6'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00'] ,
                [h'02'] ,
                [h'01']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / payload-fetch / 8:bstr .cbor ([
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / install / 9:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 22:1 / [h'02'] /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15
        ]),
        / load / 11:bstr .cbor ([
            / directive-set-component-index / 12,2 ,
            / directive-set-parameters / 19,{
                / image-digest / 3:bstr .cbor ([
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                ]),
                / image-size / 14:76834,
                / source-component / 22:0 / [h'00'] /,
                / compression-info / 19:1 / "gzip" /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-set-component-index / 12,2 ,
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  287</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a2025827815824820258204b4c7c8c0fda76c9c9591a9db160918e2b3c96
a58b0a5e4984fd4e8f9359a9280358f1a801010204035867a20283814100
814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f085827880c0113a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e1502030f094b880c0013a116011602
030f0a45840c00030f0b583a880c0213a4035824820258200123456789ab
cdeffedcba987654321000112233445566778899aabbccddeeff0e1a0001
2c22130116001602030f0c45840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  400</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a2025898825824820258204b4c7c8c0fda76c9c9591a9db160918e2b3c96
a58b0a5e4984fd4e8f9359a928586fd28443a10126a05824820258204b4c
7c8c0fda76c9c9591a9db160918e2b3c96a58b0a5e4984fd4e8f9359a928
5840d721cb3415f27cfeb8ef066bb6312ba75832b57410a0c700de71cf80
04ea23b9dd3c912a99fab111e9b8f2cc55c7dffcc37012decf72e44f69b3
d3db8cc98cb60358f1a801010204035867a2028381410081410281410104
5858880c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af
1425695e48bf429b2d51f2ab450358248202582000112233445566778899
aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f
085827880c0113a115781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e1502030f094b880c0013a116011602030f0a45840c00
030f0b583a880c0213a4035824820258200123456789abcdeffedcba9876
54321000112233445566778899aabbccddeeff0e1a00012c221301160016
02030f0c45840c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images" title="Example 5: Two Images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'de7c7927a15bd2eda59cab1512875f17c9f1e9e23885ce1ac6d671eefcefa37a'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'de7c7927a15bd2eda59cab1512875f17c9f1e9e23885ce1ac6d671eefcefa37a'
                    ]),
                    / signature / h'e71e332c985fb0479f296685669d05348b
cdba8e186f25a5418f4682ea168df61661f54bf48f964577225ed455b22d277dd94de8
7c57f1baceedd6719f3d56ec'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00'] ,
                [h'01']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]),
                    / image-size / 14:76834,
                }
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file1.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file2.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  304</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820de7c7927a15bd2eda59cab1512875f17c9f1e9
e23885ce1ac6d671eefcefa37a03590101a601010205035895a202828141
008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe
02501492af1425695e48bf429b2d51f2ab45035824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987
d0010f020f0c0114a2035824820258200123456789abcdeffedcba987654
321000112233445566778899aabbccddeeff0e1a00012c2209584f900c00
13a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e
62696e1502030f0c0113a115781c687474703a2f2f6578616d706c652e63
6f6d2f66696c65322e62696e1502030f0a49880c00030f0c01030f0c4584
0c001702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  417</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589882582482025820de7c7927a15bd2eda59cab1512875f17c9f1e9
e23885ce1ac6d671eefcefa37a586fd28443a10126a0582482025820de7c
7927a15bd2eda59cab1512875f17c9f1e9e23885ce1ac6d671eefcefa37a
5840e71e332c985fb0479f296685669d05348bcdba8e186f25a5418f4682
ea168df61661f54bf48f964577225ed455b22d277dd94de87c57f1baceed
d6719f3d56ec03590101a601010205035895a20282814100814101045889
8c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425
695e48bf429b2d51f2ab450358248202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f0c01
14a2035824820258200123456789abcdeffedcba98765432100011223344
5566778899aabbccddeeff0e1a00012c2209584f900c0013a115781c6874
74703a2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f
0c0113a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
322e62696e1502030f0a49880c00030f0c01030f0c45840c001702
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>RECOMMENDED</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>RECOMMENDED</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>RECOMMENDED</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>RECOMMENDED</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>OPTIONAL</c>
      <c>Version Match</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>OPTIONAL</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>OPTIONAL</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
CmH3c6gY9ii/KCRgEf7mQdBVTDqAutOFRYmRlwH+CnP1pr2au2dzyrZZz5+l
dc5+Dfi2QeRJ/rSSUceNF5H5oK5vavdcrGcG3VBeUL5ezhiW6qZx+KMf7sbI
oTcqSJo4FmryeK6Fy94FQQmSrUA3Or7onbV43HI+WBZKcJ1uYzc+4UrprWmK
Y43IfzhUWBwM0FcnnOuJbBftEAhcuwJz4GDiCArg3ieBCWM65D61QHo7QjIw
h6iiOo+Xl3VTXFAEYfskGQWRaiaB61mimizKMvQmtY0YDIntLILCiqNF1apH
bggtH2KqUw59viKuQUYlELqTZ1HJW9X6glYeL0o3IfAlpzh1kqleq+9YhUgS
JP/AyVKnT+GNTsaK5DWZVvixL62l9dKnT6NjTGHqbVKTm3a12H4HGnzK+Rl9
LbIf5oYmOy9BmxH4dadZBuhf6NNOi/65NUaw2QNN1fxsoCF8Cs18D6zvCQdu
d5oBPjSZ6bNutVd7iutvxC14vN19aMEi9+5DBzp5dNIqL9FpN4sL3vY1m7Vr
4tJwo/pfvcP1dXCHhhvXyh35Il/d9Qz1cXsX1JfPHWEOereFKu/9ElFxRp2C
bp3P28WF+9rqFiAeoVXvqLqouw1Wm2KS8pNOQ/oMGniBwcybVfIEr7xq221n
xS9MZvZCp7nWK7hCejfmDBDZXS3Oql2HF7orF78CrSpaRw9v0gfDiXajH9K8
Gdj965Sciv17bw9l59EU37v9k2Xezx70GTTAhVbUJNyzbeT+naTuhU5zrVeQ
vPzV0SUtejop5WmXrNxzotVw7fTRqTMU9dKotxSNjjd1A3d79wzr792TS0/g
0xFGcE0UopYxnztCAEGvdUCHu7HeeROCbMTbovGaKqiSIuCkn9JDYeH1ziMQ
LUK8YuuS1F42QFcpUht1poEAIYzRAcN54Df8P/R+NxpWINiQCl/DMh7jnaL0
YfaBnGDlRGqDSW0Y7KDW6svkdVJrbUtPMFO689eEqPiyrblysZWFWbfyKgkE
mq8ENW+5lRBCirz77uRl8v33cEejAMJwTcGgLLhaN74nEqr5uNJaDXSHoB0T
ThSbI15FDTDyC4LnsnKXo17aiPjOH1Df+JXFiKnfknC1cVT4dO9g+mj65fRg
+nh6sH/IGYhPv06eniSt/9xNmvRi7+DggAoKPP6i+5wgyve+0IIDD58kD75M
HhwkDx7jf99N/nX65TcPEhCWcBO+nh58M7qL78EAkuRL+F9olf6bIFPCNaHj
53zHYwJeZjEXkUeSL3hxFRi2Jvc9or/WMpuXRy9Ozr47Oj55i0vyFif+e/rm
i73w6BXCn13ee/r1l88ef/HwyYMvHxw8ePzg4N5+/+cPvp6fz+ePH00ef7X4
ZvLFl998Ofn6i9nB5Jv5V4++fvzlF199+SCz/My7hETPJmEMl/oeUSY+3N1s
8oUT0VD9OTO4ddOA6Gj7TLBeiK0gLpO7hsLY2EYc5VHCydBwNN+mD0pjlwci
qz4+eCjIqvivT5944Po9z0JxyFrIJaTIsnLL7qiA77VK0ZuUSaq5h4ctltse
FGOaD2kkAh8EHIL7xtYE+gBjlUgG74Rfix3UwpowbOJyW1NYBMYqac4r8SSM
gI3L5HlsM4NcKpJXZx3cXgcSAr0iSppYPuCdoHMYgmxPA0GntfcDPqdvXqYW
hsbdMegVo0+ZRhLlSjJtLHaNQj8c6Bl4UotubGPxwMJbwrUFb55BxTtlGXEV
a+DjvFqI3yMJd/IBlRgQpPyFS+7JGWlZz8behw/hQcAWkDpdRwKozJbuTHf1
kEJw2IgkefCXabt+mtFIiHM+ZE/6JSrqL46/Z0f9D/mzXGhH7VZ4KUXtYrJk
m864sULrtGHODBlhO606m/OiggNdYXAcuuzDrgDbwAya2kVbuAbu1aHQNAOG
cTHdrKHUGpZiVxlmdeX1ii9juESLe40l5rQd5JhUxyQo80QLitiFzkGAl7MI
RMThB9+m1UInny3vVxnf9TjXV2c4Hz/f1juPYbZ+qu38lVdnY//52Gxoautj
fsbzJCeXRtwsuc4jbPAM8w0lEAXDmxwh54oqCUdFZ6UGI06EEwhFxEfTF3mZ
JU8OLX0gQxx9d6qWTSpnnIYw/VS5GFpTKLYsqhg+ljCzEH4ZWz/94gk2tEzX
+VxSLia5Rmw4xJ20DR/H4Z/XZgGkSE6szYOnWcrHwAyY9WrQy1xDaOZoGyX5
r+y9O6bCsyVADi81UVvq5NE4eUwu0C+6CR3SgMEY1iAfUMlXhZIKIR0gXl7k
7E8s4C5rOI1O9abHws94/ZU6xObkc2dBNr4sPUaNbQ/sfK4yReDoKko8fXn2
9rvXJ89O/3WsHwiCDmLt7LMwINb+P7gGEZDuexQ+mpsHYlzdxmG/6DCs6TG/
PTkTw+HEFebZORqTWX0q2k771/6vNXgSHNuSmUpd40T/tT+mF2+cH3dgkF2T
jmE4FEJKqVJNxijWmMcTHUGKUXrBwEkMcQh/G1dTXoU/YtgiBo05ytujyiyr
1Ua83fZGva8ZSTfaISUxadcuSKb9rlZEFpLQ1N5sMfI8HqFV4wp37YQTqBAd
5CVjE+FTl3IU1zkgQXzPHfv90WiwKRYfovosIKUxAg5J4xFTadQ0LDF1EQYJ
QamAdlJPSkYhQdg/IBTFcpNWpRlVfw4Tp/oMbEXHftvZiY71lkRYZYG0IpbD
YwoyEb7VaGYsno6xnb7NWyVsDr7k5WdYXo/JiL6Z9FrqRClEMzRBsULGsGNV
s5U819FIPvWvStcG3VmWrgX6FutiTo7/gmsSGdA7yxGZz3ElgJIv6DxIEN4m
Svx2ftKmzpbnY5uwRzkWW/6HD+4vUNOizO8OAnTHkkSXbgAIK7r1/AbOhrPz
D8yXrPySG42vyQ6YPMrB59AlbZC6avHN9ha3K54NDMn5DDpDch4DKnSfvV/n
IBIttCYABaDVWTu60I+DPGWtkTi1VGFxGfXy4JuvHkweHMD/YdC/j0cRdx2b
ojgBR7x1RJIMuvvl48kMMY6QbaJO2I9Ht3s5Ol6PLvdq+zxERg1Dgh8FN4Kb
yCMULklictmgpjRoPrdJ1mfLEp7vcTt1IqWhNNcA6CHV1PbQe4y+iLMtcC+w
KUnpGreSSclzrkNtJ6veq6P+pDt53SK5fwHhtf1AnYVue4FGHd+SxiMQ8Zk+
RpTCJnUEHCjXW40+2HAYgVa5p6uEE5AzROhJi/ocrSCxz/1t6PUt9do+aARp
IC+5ikHxgwfyZNxjlx6mxMih1UuJkTtLAFmcs+xttE5oEuoDxzJW1gNOH5Id
XXeuWPo06e+zFwSZFGAqcRdc45JxqMY05StcdZI/iUNRBJTF8s51CQx+QjVt
RTL1ZOKg6Aa/v1cfJv/2/PQJa2MH33zxAAvBPalACs35t6++eUTF4VCv+rez
N09Fsnq3mV/CulxvJ9X5/OvHX309y/kuOAqGql3dqprMBRw5nFqKoqkUNkH9
SIIzpM4jh0RxRpEG9hhcG8PsS5Y9RahYf85CNI4MWhgYbaZ+PeI5ZiGgjZhY
hsBvaUkY2UOtndqhhkn2HthQLfaw3mvIuVq795BztAqNs9/2bYcNePLeRdaG
c0CWgfk7fgs+3EU87q4LdCQJ8mpyB9o5hbaXybcn/wpkAf+NhPKiBB5aLtPk
TKJpUQQB7Q+fJScUi2ZW4Od58Y7+eMZ7uXfy/BkWJYT/UZo7ZkS5V+x8epa7
l49fPaO38X/btKeZkzzTX05uycAeEu58j6sbpTd0kpLDQdBWSin8nRq89jhm
qw6OfsoaNnDQ5NFDxTDk6qkOtckBYlOktIOzRwzXIl3N8otNuamNr5DX7X0z
QJId53tnbh3X+7AoIOjLDhgmQH6QCUqS51rZDJh22JPkgD8Lejp93HpcXwPz
7H6FPwsYTshDcUGaKQdQzrad9rrl1KNzASIHKCSSfmBgiDtW0n/MDwf2wOIV
Omtv0QqdNQ9ZioVRlNSrCA7K87Kz1pgt2F00+NXWLHyuXNFCk9nJ0R9EveuW
b0VJDBOQvJhoxMUyu8owlC9Z/XDZkQFv1AWS743w5EJSkOF2ZMdeB4a4E9gx
ZJRpxWoMz80CPqKklptmVYTZMF4f+0moxmjfzGQ4rlpqd26dd/CUodBdv6O7
01nJkYIw/zcXYGK8U7CKc5NFwDV8mYiLXQsAN4wOk18B5yZ1Ti1fys9SUrYw
MYHv8kwqnse1ZK02kJGhxJ53arGKDkySnCzyjaujWSnAvb2jjiFuKKSYvf6E
YcW8N7jAxEuiO9tyEoKCwhByVbbMU/F//UNytVlinp78fZ6/z2otV8Ce2aJV
y1qL7c02F32vcw3xdauKtpTEzRhuTX2IrU+X6FWoer6N4IJaJIGYXAhvkmrN
RwKB4Hq/kvURKjxp8oygfQWi4Tz1EpNfBq2dWhtpIK5pNDq11CRqneQJcx/o
Jike2sJrp0fd9zXcV18f620lrhWNV6c/qYyxpUD2HWLyFlXKfwI6Ono3Xf5E
J98yIJF0MNF7jnIo9Mfo0RStEt99oekV1UfEAUR9h6pSaNwg8G2PDuyy/qMI
Yv0Z5e4ZofDRC1rgW4KGxlyVGB5wxeulhqVL+E6fVUu8L+FnQzwXB5subcpZ
wv9CrgQyvss/sdOTP2/SJf5m/3iOyQjxM/4JOjQ/Usf4TFKZQmsJM64ZuSqt
8lq/WZByIaDLagOimkiKQxu+wLVb15pziWge0qzHYTJlUUjFDE/kyp9x+UTJ
xoERSmOU45Hh9CRCAtkn1o+rqKxaxKDylkUrIB3Nbajj5A4tVvLTjwcEp95Y
PSJCf5UwDFctKdRytDgkOgIHXEi6292sRHSp9s5hh+MH0CVxkTuyd/jjwYMw
kLzxw7CzfDB9MH0PnAa4TAByDxR9MD14QDkTyFZxCQizICrGa03FjsGQMlZn
K6wzNg9vih1AakAtW9cBEiqCtD9Kfk+zeDh+hPhY9OOkmoefJwf+yQyOU3j0
MDxIl+tL9+RR68lj92j8mJC4BpjKDuwIOxQevyTIgiEg7cCjCSrxm2VSZLv0
T2VlpcA0D1z4N2GHkt+IvOOWdxNYNkYFkMGYjKmDneRFp5M6Qnh39XvQBCA3
JKUG0XU4phPUHs8UwxGwe843tPOtwK+O+m7s1u7xKUYx0LqBdtBctludbXLM
jBbHImb4AJs5om3fmzzaHydPkDb2Jg/3+bJ/nSFEd5YcY8gl3bF7k4N9C8YZ
swWQoxrlFiIG15I3DD7+Ba0ltvwdzU+kgw5WaM1hVGnN2ybcWeF/FEP1PGdr
Nb/Y4kQa3vxw+mCcvD4+cCUaXNk699b0AQ3MF8/Dq8uKGk7fUz66nejXxzhX
OFrCusrqXR1GeAhH5eH4AR49YHI6A4Ikcd3zOw8Qie8sX+UUGDFOZroJuG3u
beyRCnHpfnWeD8g9FnStiPmmpeGTHuUNf0YBgH+pY54esCtQ4CKxewNsaxlS
hzBS5YriAPGWqF2d9L4ocS1D0EoOknqjVjbFUAH4Kmf+GiuOAY2QQhnrAb2y
A0dIspUQB126cD8SvggHCxJOH7DiSwK7UKuP2vCuONOpWCxFPK03Ncb9dKrz
OjDRNbA5DZPF+7UxK+1Y6oJU5qkU4VYTjuWWqrJwFXKSpm+FjdOUX7mYdtz1
Yenb+q6UuCOqoInVkql39Py5/5XDxaGrmsVaHGdPQhZaFPJikwkF+AZEUrTk
yEUr48oUr6hEVkjBOtFj2JvDH/L4aa7U5yTWAT8ib4T/PsP20IKzWwdvN0bh
TdYIZUPwIeAHmO6YdT4qgA0Cm+j7TB/1f0gZcuroDvkZCD1BqWnaFqXgkYYh
bm3SrNxN0mmZgsk+JpvOgOjB3pCfcb+3oUl5Plmk29724pYePDik/9vVzGTT
zD+jKawd2mkOm4HW4PJ519vUAtFauZ2zTQF/7WphcECdVmgst9tFKhvPzM8L
i/0K6oQ2U+020dG1CgWcaOpseTuMaz7YVRmtpx+JcTRdxXs7Wt4+uSffvqAR
Dhq6KXUnUrOtccL23G3qlsiM16f8UXsNtCVnwiYVMtjJMCvnb20Vl4zsFp4J
Gv1W6ybMiiJGZF48bdLzqCQrtLip4C6oNnRNoAEEH44Nds40LWuBZN+UwELI
BY46Mq0Q7ed1Trc08NecyyLZMCSZAWgGep4O7ZjmjihQQ0te4CQqe7krUMQv
DJs+W9lYFD0xQL8d0zTh+3d7HRoNWadD7phX0m9yMfscL5ZGopwxOxQh7Nan
Yl9g7I1grbiEcyuMJgALsOnIeIRkvYBMNngFd+dUAakDXZDVDSkdAYtoMLBE
ElJLkrRgAhigQl4EGH8Jhld0uTaqvpWPSRdXKeFkO4R5XJzlMltiRA2bN0kk
khOkQb3xOgm0U63QExwqxdZEQaR4BgPIAiyNTSn40YORmApxViKwpBVaiVFE
a4S3LmIEtdqKwaBsY0CAoa62BvMvSORLK5DvQiRdzThc520uyPN7+4o3jR+y
OOTLvVCSxFo0OMnmJ8TXz2j7dOdzFgCRiXCeDS4vz3SNcuHCgazVWl5Jchdc
dauCSwd3wD+mmD6EAbu665MQri91hhQfC+HI4rKZngQGPYgh7VFwKFxdps4W
ovKJgdkDiGa7wc6SXodWKPjT69myx9gAX5EBf8zgtUj5GQ8pTyTkx1XNWTEZ
GCux/CidFHaE99X2yq1IqJEUrLhjdxkMLRYhPgXore605oTofFrsWrXBsQYP
ysByC0LSZbqUUhxU2hF2d8IoErWiE+7UN8L4gwJhmFO2BuMbR3O7xegoWFFa
L8bhGLqGiHnLkvLQelFmkQvWjK1EVamtWiFxwQFgWkrSYxar4aaSBEXX5Kah
A6JyZc+27z4FigYz9LUnsWjbuyz+qIi9bFLoSaFqcLhRC3YJKOq4AbPQJmSu
mK8AkTu0XuBEc3IrHc0YBKpvFtGO32omNKAbp0IuLaGCmtKyQoLx7rXuDWuj
TO6OL5jh9yxMiPNzDfPX5V+NI4+bw3gZAMDpENLGoS7NOY7GFcSjmjd0Qgla
iUm+FrQ3Tk+PQNtcVpEmhZgqcl+yNYJusk7zKq6/oPWbRw6K13IEG41tQr67
wLKzvBSYBSjVFgISmQgVvGTOldiqhrMNpR0zl/+HB2dd1k30E8PaBKBcym/S
Qg8eJpMzxMTKZFVlWQ6T+rtRGY0jqptjHWkxxy44Yxxd/uFDB0nyUwRiHEpB
JL8M4sZDxHScAn1QNwPJlKPO1nfa68W5GWpO0W12tNePcjPUIKPRkJLbbYpD
0VfysONZdY+tpZcguO5sDSTbm1q0V3phblyoQg/MTd/THTA3bhsGYW6G3xlG
SBmOo+lpdhAh5SgEYXQn34nT6FuDbhhLGyel6+3qaSfgpNDF0/02lZ87X9KD
APVhZ7RnAwLoR8wT38q3nyQfIkVNFo3lLUGc/SyOb+WtwsvCsCcqy1NYpOMa
6pbxMCIXaHVqWtyWxCwuoiMp/e65pIpZGIPGDIT6eK3ogUMrYEgTwRPMgt1V
ib8t29lbqwy0Vrj/CIJu7h+6gIE+K72LUuiPNFDQ//CqXfBYj11/5KlH7b0q
sskbNHWC8HoBq7diGH4ZKU01BFDU75LXr15I2IM+kSw29kXge5eSJCh5ErbB
lv0umZJ8T14syxlB2vFNHapFpdaQtQ4PscUWThzVrQIde7HxueuhIct+aLqR
GtHakSpHHXRGqjYRjpqRMftUrYmMniEeyraxqIuQL9CTlDeSKropV1UrHFKt
BBaE7ypBVhZ5zqFbasyLiZC+rgCXblLpHBPu682M3wyaddktMcwAjqLOOOU3
71iGPw9rWsA+e6Ynce/9cIfiJNPozeDm07ROsQw5TuCLZPv6BM68dB4Fl4uB
tLYwrrqOhkiWLq5UOzRM0Q1bwIyMQthwfEudMZR4TAeyQJ0xoUGQC8+SbFgw
GduYdrTkGGWyTGfZ0gJxWqFxEvfF58259Cl1VELHFZyZY0tQvZC2zM8eGjFh
29h01KxHZHCcUAKC+OJjAbnLERnrHGSjtEh9OekFNAd6cqS47JD/xjdJdFFh
+GEx7cPdfiGNbr0qE1QYhMRw7zGjCG8f/r2GO2VjTN+9KwFPw0g4SSj/wabe
JcLfbI2iJVhZDx97IKSsE4UqxKXkuL84kJGzXV1RGwW7im9HKjA0hOsjlwOV
aw7gu1EDUyvbLc8D7k5cs9sv3HHKZhSJCGiVfAlVzUJ4iFX4Y1M0Q11goLM4
1aP1x6BuRQVCLCOseYGasUIGsJNeNtQUZ8ss5cgBuUnovrYidIyjYYUPOJKZ
ET+WGscQ9sb8gNBnUPADFlB70202VNPku8B6XQEF4GdFiQ1ayDMxQPVXOWtW
Pb1R0eoh865yhxMdKKV144neETfGlsweaJ4QWsNXTcWYbqRU596CYAtaRjGn
JneKda7HrCjM0XZqGpX91EuR74bhVvzhUsChGMlogIE6tZHi55iu06HqKorK
ZbbNgcTxrqwQA6/um0e400e7oDhVsEMuouJ/Ex5HsgL+bqrlvdrLC2zgYHoN
LbvQ6a4BtkuyXgHPh0q67VplU6Vvs9Le86QM9a9Z8F9p+sFisOM89S1BsAAM
z57CQqDdJyfPXr0+aV0i+LAzKGd10FwTtPOK6YpsW2ktDVtR8WCJC2F7cqFp
MHoVpDQ5TXV3pJ4ghxP4Azfo7pE3i+xrGgM58G5zFUe5eRq3wnHVIZgmCmGB
ycHAYaartZcRLGPcoMrgOH35GAuu1G0HpXZJYQ6IcXDDnnwOjbRNOl1KEXOQ
VozYyZ/kXUn2vwlSoLs5XQOT5vWHo9Lrg6+zJWaAalyqljaiA1SHqKlURAcZ
6MCadHLRbjBpScAzjSlk38PFQZV5wz0DDDLOWtMtC5JdO2MqUrVA0McqOFhw
BCudsNrAP24n8wyrk7oEpXEwQFu3GD5CyeaIFoKeqEtcDgmg5JdyL+HI807d
KYr8y2uDLyQlhGDDOGoq95kCd/DtOxqG5kYjqXsYq3d+jrVnNCWZ65eGYMkO
vbd3wLNWywW8+Zv+g3LThxI30wkxHMoY3AEFvT/Eudt2S6xJx9lvR1HUo0KX
Rs4gLfSD1gUCtLVmlKrSQpOtkIwqAYNYErJh0a68O4RK3cNb26DU++5shKJS
1gITgHEaPwccosFUtDFLGY6UJD+dWkQtgqydS1U2366FDN9oTv5MRqoBmUM5
FMK2JG0GjrolhQBnVeWDwOoET4ARblh20DLT51klteUs34nAMi3STV9nyMSK
vFvzvO6eIP0eo6ZdRo8KcjZqd9+GJLDzMj5uA2l5XQIJuWj9i8hmdEnnaxvR
R6PvC/uNciaQyBWIRQOI4qwKdXLCd3/aFHMz9v6y2JKhO5RNNB/u9trtP3VI
Qt4PADWf6doN6SNRtKQZj+ScjdF3XWdmDDINd4HHDheM7WP9pjcFfm0XnYqN
ZUGai2LtZIZODoPhwbD2e1Cy2ohRSb/3Y/dxVKgq2bSRg+7u8SLTJSROEBVs
qqANuo+DI/Xz/KhRVVIuRaoen91wAuZC2vkaAtFDD+1qp/1duJL3O/tovwed
WMxRp2E7MD2NhRMzEnXZj7TTVE/J7J5Gu2/JIjhDSe/01/5578Q9+Y16SsV2
29XakTc03vOaVTnotHmeNf3LKdGt8p0FS/c30FNqYThqd0SgUJ2G5vzrANoG
VdXofFNtir5PCDWCi0ugiHlCyTWdj0mc7Pma05ZGvjhvb88h3Kd/CC68b3SG
mCBdQuFfB6BCbud3FRfRrbyuHNPqPRPsRkE+buynxx3hHFxWAM7ev4VT67hd
ktsqXatPK861382s5KLezapGvczQI59EYDCskEuZTJyUL3JceFM/p/VStQbN
SOP4nlCBVmenUKXkPUDof8lIPUInUJ1f8GaxdLrXa2VKuPoXCMv7DLQ9K8tl
BkLqTa8nr14+/2Ny+ix5aF61LuRdtthXcG6q04ch1q1x1bfv6dENPSl6byeW
0pWRfvXyxDuB056FatVjDruoCQZ46xqV7upMIrZlqI5sdZE5evIORhzeMauT
VLaTonRSPPoWvUWOiZD7jSpnZxDpjh3h3OSsvnEJJLiaRjjBkvL9zrZbDP3l
q1utE8Uz3glb0Bcl2SsZyBcdfb/v8P9e4zg5LTPf1VH72139dAbV0xEt1g2V
P7u1Li0QtGmXxeXAwFpASKI1jspVcjDfep2l/19737Ycx5Er+F5fUaE5cSSN
u8m6dzcnvBu8yaYtShpRssdnwqGoK9lWs5vu6hZFyZqn/YiN2Jf9jPO8J85/
LYC8V2X1haJ8C9Fhm6zMRGYikUgAiQTmUu9hvpNqiuKJZee1AQ6i1kZ2LWMM
rJ4RHQcklvPDwpjCjPybRcJNGTmzAbLHrtrYRZMwBXMI/IFp6+GueQdDpJ62
0r+vODVaC2o9NlrSp2MXcY1Yl5oF8JOcG9xRJZUbjDuVrmGFhZbEtGckYN2I
jYhnbzoYC2fTJ6hzUrP3u+Slth6BJW3W4aZM6a55xa/G/YgprcvG+xFcyUTz
r8mX1kyq8704baMtmFWzn7vjVk3Im2RPXrVpdTq//cRxo1NorF9t2s6GssgL
ZkHT3+URQPFYY6PtxGwnWm5Z/rQVVVhUBs0oxtI1jSgRG9wjjbd3zxXkSR/b
JoV7wtlfc2BUo+k4maQBo3UaSfMFf5whUb9EF31+s2R/t0NXFxjYiAWS5QGX
pvRCiQe/Ym9NxcvllyKQt/aYQon2qXsPBrOb491VX/52T3uncdpy6mLx2xQM
Hfqal00beRuy4H4TMpELpsZpNCvPx1PxyJpwqwZ6wh6bS0Wdv5YrliVz4Gg9
xdJewY15nCiuTeADMgFGvHKsZU5BO6Dup07sVSV7dTOfz7hNVH/PYl5LTCbs
5SxyZBXHCt8m4Y0LudRQ2kXh7KkUCfSGvFFDfzAdTx4Kj9i00Eys0uomXjNz
1yIpnrRfRusvt9S7+Y73aF1tpf+DeofSzALfsZksJrzWtrIY8BznuM0jpWOl
fJSUa5YWaclQYHpcQtFC5jUgIdMCKYR59a6BZg+AppyCc3HJcI8Z7K7SG8zJ
AlxKRTwTnP8em8I9OSPL2Ik6TFgr6u+4T1lMCGb/F+TfM86IRmzvlctE42Vm
fiwSYoy9d+ySxB7ucaZeRBmZweXhaocgRYZpE8oKgacFU18JhmZagoYIVXfb
uWTGK7btuU2u64m3ZDSkhQEDuE7nRa3cXfAxwrJmnud0UoqAemIt1x5IDVu1
VUnS7Mit0E+N9lqiM11NArZUjc+R2+sXINWSbjM0+R6dPjGuWTPvq/AMQC8Z
tt1mdWk8MyQ06kunhRdbN2QVnMB077icFcK5SB82JmwwiMRx9t8AG6bHFzpg
LUllR5YSwfS1Z5jcE4gcLFcPnDZR/Xp8JWUdQzoTidwE/xaxQMXVOHd0lDHV
xbWBnmotlTqYSEKnOcpSIAiWMq6BIYXGnXUEc3vub7sNaZGv7S6kNSQbJBgE
vpxkt6RcYrZRpLZe6oU36Z5aJXmbOZ7alsRKfFdzFhOMD4ROYHwTImL3qsF8
BP1tgIjbLxA7XVpLwi6WWn2z2mOe2WhVsLhZhkGJjBcjiijxcQI7z2oWUl16
DDSjlTJ1gRlpGtYq1GnEG+Q2lthIUYQSbl3WkTQTlYphtSQhBg8kwvm4fCNf
O8sxIRz6JEfOyXE8dZv2AXp83dCIGtNxdRsmb4ap/yxmCW7+axhp+C0/ky9R
5ORHoxye0v13NWwABmiizSjAosp9xVQ1u4dK2JsuFzPU1ZiHhQR1ovlD45tq
GRWJB2a4sT83Sls4UOlyrMujnDsW6WvaEVrMoOWUOU1OGw8M+AHCIAgGyUT9
qZKrZRNlaoXhthLVMCnf6uPYiHfUNQfkVGxjoS5sHBTAJVg8DK4sizwbbFMu
RB6amusEOrPv3B1ZyRDAN584pPQ90Q5P00j302uWHzZym7QqaKlJxAsTdgGn
8TTaTimOl8WLLzQBJdVTPAPlX3HDM9eYuM1WmFx5ahdaRJHCCMWvghlSbLhZ
xS3VPbqdbapbdPsSq/byGQil9xUxgWsZo3Dz8FY9UCzy8ornk0YPzAVaZ/BN
rsj+huT0WA/Z1Q79xSP5c4/ZlJoY0cM60EJeAS1kkE9ACwVU95YnyOpDo3nt
4O63HIoM21bzSkW8TkZH1fOJ5iuVtgJ4k+WeBTmxTa/zmGiPuekzbT8OPp4X
w7jGTVZMY/0oLryGzVAHn7mMjcsgatpHAKcePAFQBNUjBrbMb418MTYLXSP1
DnkpwrnGr660k0SBUQfOrKMGi7JPalBWkweAYaWsWu9DTU+gFptAP6AWIrDm
+ojEAs3i1fRMPspqpe5hV4TynoPZSPT7FVsXPEAdSA6YWrdgUp7sSoWgaj53
Ep2ZIQd1d0nLdEVeqcYq8iQ+HE57lWWSHxGebF4KG4QWh0qlzyIzBL3OZ9u7
6X3D3uvrQeull+l12jSBafGUKW8K9vUYcPLW/bacT8uJdCp6jL6V44ryFDOD
P6vGHgYqw1JzoGnbPYiHpxS5VUnQovcbMDx5/EmFiK1dxwJrNzWW1cfzAJ2q
Lktt0ZndvjVUbgFqRTfvIFxGeLTUBOCinFyxl+fCg5vbNC6ZvsocvrV3rPb9
Rc5yrQ1GrnL2cOB3FfSbwlDIuzoe91k5yKI7lf42Ad2kjt8uWArSZxhFGV2c
nvC4yCnTk+mdJMa4f0rciof3eSQ8lXmsFidmr6ichP0fz5Gj9MYZ7OD/8K/v
y/J1JztS7oE2vqScA+Gow6fIfLWlo7k0J/fE0rG3E+IqiN3oTHg02rIwrwW6
QoC2bErGQNcSlzAx60YM5gbeYfQ3LhA6VRvlmqhHUBMT6JENRsZDNENO0AME
vA2/LAvK/iRMrZq5fU38OQMFH21xNS6f8IMR/82w9S2USXrVkOjtFI8hyLCk
bNe8U4liM+bgR9+8tcLVaVmAOkZL13H16vCDq9prQQg7LNboNNu2U6PLbNvY
eE15TNdrBJezN6Uuk0iXGplaT0aM1L/xarxRPcYcwum0nC1rFK3J6ZfuKEpM
ycAfkqPxTulj7QObBDVd5bLNSZonte5VgEkp+WP64YWWuF2NvH0WC1MhHcX7
tfXBCo5N3k61xbfapXxsGC/bKri1o802BW1X5DDtlNW5vFMK+VDTLVj6BM5X
6htgCcgjcUIYe0h5NahY1yqtLnOy2GzV+RVYs5keXNzoAoe/JXyefdkG3kri
q5+pYErUc3r7dogPt9zvmH36/V/GoqDPXnR94BySiZxn358c9dwXLCRsztwk
eEjIlke3yFXPnlvTVVbB45ZepuSOgcdWNmH+hPSI840SIo+n7G0Qj2LMgxby
/GZaPnhrgvi8lY2+pCwXzGqm4qQaXjOldFTggTHo6bV1UDzaiNGiNS31JlJ2
gZctRvRFBRBn8bq8UbngSoEAmfmX3oVLAw6/UeAp3Y2ml40p1SLOhXXVAVtv
2AVGM8yFXINj4QdieTTFZ9sHQW1SsDsEfAYlsXAshg8MulnZcQ70yPjSXMx0
XhY6Xw/YBqozOpagQ5H8hs/xax5JDJ0lJG9rgpuXbC0BSfdoeGVxT3prpCzE
KEx6Qqm94FA/VzHmJgAov8knGAMNW3LXEv2ZGgri+QXaYbjRAY/QhXSd0qtK
uuCuXDynAvbKWRINld5easoFG6JsSLmguAqAOQX45ZL02JIbmUwlcjnsKBqz
oG/kUyUzR2tDpNsdJT6pqDsSHRr+L8kcjiZiIaPjizd23nf0r4WycTFfaIkZ
r/AsTuc36pUhMDEYBxyT8pnpeKFLqCIynCCc5p0zJpPE1G2U5YpSZzc0zOmM
52PAh7yT8eVYWLiY/X7MM0BQDHRGTHItNSFiPOMPmSfAjec30q8IX+3QeSr1
ULk36JmsyT2yG0UGpJu1uuqpxB5UQQrPTD9ATsO0X507csyzJB0NbVQ7EZkl
jXkQZSx+F5NUFuK2RgeqrkLkm/QIJrAQ+c7pkQMjp3fyYJin1/yZMB3acxaD
QHI7yhUqMlA94B0dwIo83B26XwB8nuhNhqPmiNtRHIfnDO2EIFMCyIOIuZrK
MUiyvESlfx04lXlODUZxOJr1uO4Jx37DLaRurYU1bYS+QuwklfZjUj+uUoxr
rvJbWbtCBu3uk3s6hgFdzGcTMtUjh2Z5PvCJMH4mM33N1FGAgVtLJdhtDZmv
ohYe7RLGNKkNOyZ7h+I8wux7PEw6iSYwY6qtAgYy3FO+RP3G0KBE3CQSAyDR
0yUoHIWCLSJOLvgJScklkKtzJY0F5ZrPZto9JaJOKMtGRyKeBI7H4u/Bjmb5
RJ6ZIuQhb/Sxw505G9OWSToWCJRNrKCtjQE/oQa9qeaPxvHAIoqEnuaUR28s
Yky+ZeGe9kXuwQZSMWL54WM+Qy4yK/FGvgLs2dAs8Isc/IZCT2NmCQqOaTTm
yMd+zucpcTdGbPPx+YXI9K3ekkt72xFd1WsGOC3IFjAHyiasPUxA/FINFgxW
pByCoZ3PZ8urGl+x3aiPiGBu6RIRQiX3wZdXdO3Ez03SOeQH4rupfWAKsRh7
BEQyxaVh/rQQLAsjWwfp1qHeW7KglGiqJUsW45eodvXP+WnBN2O9R2wX0Urb
smkEVoNajUW+saYmapa1yMmEvk+qA/X0a9r2dsEKTSicFDOhuXAV1DStqhh8
yIvoKHE5Qz2UwhAPY8C+AxPCKIZDP+ZRDPG3Dx+U75IUojiBCQmpB1z+kE2t
lGqjeGyH4V0xci/rWoLgV2ByJDpHFZXVytM7Tj0knMzbwZsLWUodeHR/ww2Z
dInO4rdTETME81QEKiSC5tzDb5cMj10tn92FIGx+ZUbYVaG/eJZgupzlY6Rm
1zN57u2pRALYqp9OzjGMycVlf1zw2dFppDdHmYIOfGFZEEOA9aWQo4c87iP3
4gdNE6N9Og4VkkRFcWWIG1GqZNwsyH7YeIFzu9FQXn7wRFu1iGR6I7FM05V6
VQccb1NAp5Jta4DIsMiWXTOX7BLKpNrGOzilui/wqa/sAoHV5WJ5JU23vGTM
FDqlY1ESvh07kjiI1Bw5jVoemfjks9WD5gFGBzAGDs7ZqrCkf0jv/IzIKdUx
HdnisYjoridUUK8fhHQ2ny0wKwIaR/e5bSCI+kEcU+HJ8YtHwPfejMtr+B4n
/SSOQ1Z0/BZjdstCpDAsTJCTnfNcy1iPpAbkI+LXM4o/i8kbRcgRPiQcEUzA
U+DHFLt5gg8delAcUS8sxynWeTZnd7JQzBVYxCO3adSO8xhD7bq/iCwG9mAb
PpTYEhd0R/0PMJJHOzNBd4MQSs1UAWuyAURQxYjdvzo+f4wDasfo3yQCvx9Q
5khbvJENQ4n4IYdgiSeyaaQQHydMwfEdHyejRQ5ZFR/ET2hVWUBjxx8Yfw3h
r08cQMQf8akb0T7WRwkJPKhmDxWyYRSQAKn20bqYHwFR6up4HAEu3/NV8TeC
iNKqtlNnrNghsaR4PaXFBhkrAlzSdlqIDbI+BLj8ttQPG+V1CIbEBjbI4RCM
RLpPPSZJV/SR0JMLJb2rNomtEuICn62OKxIGfOm08CbrAphMWbpSS0KJjsQR
GL9EcFZFqbfgrUdqdHpIr0bEYJO9Wts0IxEbDJYLpJZmZnjVThZrj/W5hsWu
ikHJWaye6tDSTk8iKZmqfuNoa2Pc8jEmyrBwhhabThygPQfrI8k3nlHaGikJ
nNJEC76nXfl0Ns1VHdGWeB9zu+pstqRi2QKpCDePreZ8LPjcGbuqUYtkxVjT
30nxv/35eW1ro7xnTE5opc1WFOu1LG1FfEeDpT0TYQ9tWGhGTuxgZ+1Qeho3
61oMmR9ccLM2H7O5iTY4jY04WvyFrqjYpdYWDEZe1Gipv6k/IVALjQjNwJy/
cKRu2CLUe/nm7OkTQWwr2kR6mx/2Tx9v0KaNso6KgLH/93+FsMvJ/XbI49yZ
11uJs1OyhqyrGSqgR7NLdM9dhyQCK6mvo6bJfzdct8RopG+HjgYDa4PnTLEv
7mrpGLHvC/1cjx+vwhGKk6yjmrnArWU9+3o/IG7FT/UjcewFvDBOLIUhKwyH
tpYRK4zpOGsWxrxl395rIout/Q5Esb3noSi2961Qph9JG+FtxcZ4Nxlnmx5p
UO9gPltMxhs2QDy/qxfFhtVpgvzIlNPaZi5fH/9jg2MWpYHHj9ZXxNEfPn20
QU0imefHh+trkkGxzJfsmtswOnHTezHL5TObNKPbX3UFwK5p0a644BfC7AUV
WWTwz4vZNZoWhNd9T4SJZnYL7mspQ5zywN9kNKuZ7yhzdkArOvNc49dK9WzC
nD4rentFd4dkfhagtGzbJ7MXIgsIhoBj4TLI4Y/Pe4FWE5ojtxJWs+W0UL5h
+cUYp4fS4Pv3J/2jnXG5qPqEV73wwwc+KWbq1aOyEqttttVq9KkGABDYFvdO
mM4Cxnpe8kTs35fuNfn0TsavuZdVOn1NHSqjJvqron2K2+bGcxFGDseGyefP
uRWSLsP5Y1WyIp6OJ7MasH4K2Exz+PBViXb1hft4WVXw5xHg5/msht++mV1M
+8/S5YTsWNBTAR+/Xp7P3O/w7me6gD8P03m9KKfuAU5zOoUv//W/b97gS6nn
//WfFHICaAHbPZrjJPaXBYiD375JLxfz//pP+Pzt/N1N/W4B6354MV/+9//J
x//9v+rXYyjZnxbzd+VP7rPlu2I+u2YfT8cwFcDzc/z/vAAU0IjfjAvkEtf4
1zFaqJZQ5wBvWSaTsYN71s1gRxC+d9xHS0zuieFi3/+lgt/7eVFMPjjG2wwy
sgEtUhoe0/Kptgu7YhcRZ0XgAsNjhMypl3hvf86fuqcFC/4+a6woDYieMahs
UUAh//rXv6jIIcYszLivXqTn50DfX7p/SXai4QOj8KFZFyq9d1z3f3LjjLo5
+/J/MKv1Tp4Jl7IjWdqDJoz81cUXUjFzTJ3bGu8bNSUAyUlsbQRSsTZ9kH4y
sujVaYnpu2qs8ldWibntoB321TMe5cFaqGxTrPzf/s3E4rHI5suBP8B9wEf5
0MFAZyZSAJX/dL+gf7WJHH7/wv3R/dFx8Jcvbbh4dTCZIflZihAk9O22l4Ld
xVHZX9fgmsP/UQyYiTcMcue9xV5nUd1rtGMXGXvMl0LHJOupL7Mi1ziGv9Gp
Weixg9yv0/qiQ27oHIW7+6Wrf+jXFynIQFs2iJPtGoCctF0DkJy27KG/9SxI
utu2ydYzISnQSqWMwLDN4dOzY9iaOedAG1Q+g7No89oA2tsOti+qO42xwQZI
pzdOcxD6Z623Zm3f8p1bdLpLGsCcNSwNqj3QWbM03sMJIqQfC9NsviHoKRj8
jSZ/sbpdW5HeY7tW5ABmaYI6M0z4Squaz+prYDxm5Xw2xTwIZHFDsa4vLtAN
RqM8JS8Z6jSe03Mecky3zwXEMJ+cKJI4QkcSyey7jw6+SK67ARwdAeKUgdGt
bEnx991dd4n/2wExAZiDYxyOjdPee2CUPmzU5ud94/SVuR/ED4zY71nqCYN2
n2fNhHo4Mq0qD//U/ukgHCYLSCqYC10KLVpG4wU/XjYSBdqVWBk/k/Q6L6d1
s5Y4Vzl5yQ50iUCc/5bm5sYlIRHlxe12DqPPrZrgS8UNW+DcllO6sZvTvhEL
zDaQdf90InNDRtUQXLp4kr2axn7sFQSnsZcq5tIoR0Ro7MNEQ80PR52fSHQw
4pX7qTl7dB0w6JdLi1owUL2d9kjctbSTtrFWKwwWKt/+rNtqBg1oFM5KjVVX
8q1lQkzSNctvQMhtjFWfiGohy19pl5ogGXbyeuO8NFivxso0suPeO+3FttEo
d/NqIVobXANZagRWhFmn96Xr/pPJ6T8a5KNiUApJ/wv3QSOViru7a6yhcLNw
HzoNYLJkd1ecbCudCHoucxjYn58/3A5QO0bOLQDpN6Q9q5rTZF1bABfeChqn
lxkXXr2Y37xCN4dX4hX4ltNXLgEM/PsvGo+u6g9bQLR4GqwA6whMo5yLh6/x
AaM3Gx/++QXW0QnFCH3K9uUDhaQ22alEFTohIhRmdHceuk3w3BovpsrdIvnF
U4+WeRfP810Y2i4G1HRafau2K1JCU6vn5dWrZxRHayMw7bzRtwLTunC83Wg0
96MeZ5W3ByP9OXq3BKNu3sVgbgWmcaF669E03UVuh2Iu28oZ3XI0TQeDW9IN
RdDVx2IB47T23S3Z+XoQaxn5ahC3ZuGrwd6Kea8G2fYj66Km9UjbnP2vhrUd
498AIAnRa4hrAzDslfJHg0FvqTsAAzTWgHIrMOhOcQejMR3Gepvs3zbFatLe
Jtqa68IZ6e6urSvlQTUY90tuOsgoaBFTsXn0yT5+40/+zY/Q6t81s0YNOwZq
5LN50eepOtw91+vZa4joCHuGCYFq1Dc1XnppQIKuKgpKKFUudJd5xRz/QPYX
+oT6WrsfWjV1kYs8aigCijxU5GXHWPKRtW2vyA96uzZTHkBlu1YUgV6IGiJV
KeJLqCsKgqStVxST5RXzlnrFXSk27ZCydXOjzsO/qRzYWzTHUClFeiOGqUHi
8V+gGc/AzV6JibTbm44RgGMf1xg7xuwEgAugZ8spDqIJcjWW5LbU8a4uNszv
Yj32lGarYi5wgK+YA+6PcmNqLsdqbiu8MmFy1PGD548OIz8IXr18eXIEnAB5
QB8OsocPHfErMwD6fvCA2Sw36rApDCMy9a4ebgRF9/AUS2K/sdoGHr1+FYu7
UTstn/pW7ZqinWq9UfOGn2YXBhpxODYfmu6V0gW8GQdkQ4QpX5AuwFqgvg3R
gYZbbq/dbBSteHlbLZ5wE1XW+o2atfS325F+M3v4dvTaSM29VWNhsuccYhUD
2gyg9DcVIJukoNjoptyFmwHozNtF0wTT+rdYJt09m1YYgGxKVVqkJtlyUwpm
QWA7EPHy+ckrdMR9SM8sFV/+ktckzuUnzc4ap4I4bOzqKm2HdD6u4Vd8O7fn
GFKrei0ggB7K+q/o/VxvQ+D0Bmwb6OTq6khj77pxuLtfbjgS/njtkwHug5ic
Tu4e/CcCiyGxP92gGfSuvPcW7AG9+pvXZsOGNsEGbUTdcIO6OlagSbRxE6gc
OxvgkUX5QcOpZjdtxtDiHgbmlf+u7bLfsR7P5t2FfshLtwvjSkK0VV6o7Rsc
o4POq4k2JLQSdxe/Qn/cj2iekX/ux/RfL4pV46cBEnGuHQWR45quiAzF1a4U
fcz14mJTe6l4i85V0iAaC6TdJjcASOQ0S159Xb7dus3xpNq6zSHIxFs3OpuX
eceUcOBquWxDVMtkHQytUHe3xBQc45ym3UwCqbypEA4ocmH/uuJyEpb3vXlA
UnNV99vypqYKHzSLJdWhkg96p2Yr6T+iXWMLNXCK7uXqx/CB0KuT73Czdnd1
Dr1gj0Q2hE5y4SbQlS6l51vfoLrugrJi7Iy7z8XLkHZ1utG3wH9d3tiu8eUq
WVdCvSXZZDJcntfrrkKsgP0THlI84OH62jfp5cRa25x4e7r85ltzV+XneZcT
rzi7L5XvELBGi9MlgbL4VhIIiwslAbJ4StLWtTpE0uFt9XuEksRSwnoZWEpY
P0PHnJtSpwRWun2elEzDPUBCYUPVfZekbNLhEAODsznAwMhMhxd35DT8iFzf
czQfIdfnIyb/H1c4nDKHGNeXQhXzgHH9yGmMCz07NOFOem80JqrcTIjDdnld
CEAWHwuApwCqC2Hu5WaRRVvWsLYI2rJg2WRO7ZZV8K+2sKlZj2SllnjZMhUx
sdJ2yedafgj9626SVeWgVblx0atDDuJm5aZxQq+ctKbfvG3VKg86pGzbBIOh
NWVZ465SoiOwVW4lU+KVw2ZlmQTTgujY+VujdjGzV8baifs398XBUavNZXrV
r8aThVoW1WbA26y9alRNhmvSuRnwR5vkFxNo9+w5iyw/UNlvVqagyR2VW0uE
jKarcmiPZt9RuzXDRhYevXLYmiGF7rVDDlszNIJkNyoLvtR9QSQYT/saSHAb
22WPYDJrrnQUo2ldxbixtYBfstDht+J+hE6ZZgjzFWx1xcWAmqjd7i9x2ay0
gq2usMBrbLXDGMhB+a1RGYY/Uas1LO2OQQ5LHo2dtn1X38TdVnp991qt7WoH
eK1aut+zqNVan5bNXNuoFtu4bYeutIXLo6fb1K0fI902bf38aBuvjYG10Kos
0m2WYbHWmryitUZWWcNqeIHt4NgVfa2sWz9Q+6lbK1DbqVsXULupWwPQZLFV
qqMxoA590RhQh5JoDsiuGYrdvUodFGxtlQ4oWNsqxQ/Y27/+9S98unmAaUso
MDFGy+Mxiikaq/GQUhS4RXnJYgzTS04Kn8tiu8mgv9VymrNwgjwstBnLGS9C
KJwqwrNlRcC3xCLfx+VMBhOuSz3gHA1PDgofLvMY0ksZcl0N/vjw6IxilV6B
4jP3MdjpHj0CxUes/f7B8VcnT9xnz0++239x7H57/AN9dU5Pvvp6//x4//Tg
9KuDm5+/OjuNRvD3V4eH/Pfr468PvvKu0+uTg/2///18/+o/fvjpPw5ffvX4
NPa+Ozh0Dn/64Wzxjy+80U9fXU5vvnk2vzp6/OLd7sX4H08vnu8/OdzfPzue
zI4xh8bPP4++ufju7bgcPJldvvn558fD54s3zrMvsvHi++/zi+LN/vxFXX37
elEf/nD89vrbJ4v5k6//MR49PQiffHE93X+5qN9dPg/C02jx7fh7Nq3jJ0ft
SdGqv2i9qL1aZpNxTlFg9bDoRt6eWiHcgr2XB49PDjXkPXp9fXz9w9ffzv7j
5N1P3uH+33844b8f7f89PwJ0HV98kx589XP0+Oef35z98F3+w3T5Lv1mnvw8
3j3OnOzd7mU0/24yPflHdv2tN/j65upxtn95cJof/pSl75770ZsX58W7qv7m
+tHj7DR+XSzePX18Npucf/mlNv/GsGj6LKo+mwrLV8gDTPAYvvxgFnSMgf9m
i1LETDdS0Ip8z0UJB/+cR+8kWXkKm64C+hNRjmWEZPbMXUMmiwNqAbysVfhE
g9SN6PgmqVPuJdwf3I3pF5eCLogIC4wz6F5HyDa5VxFGZMj7z0CAsVarZGAn
rIZhnrRqTQ+lX9yzm7oJq+mjxCoRJIf7ZGnfNBhan/ootbARvxgTXKUL/+L6
+r9r9eI19XUVeR3oprD2i+vxup6q31REWKGsaFVA1tSZU7Q8swqGdeGM3/X2
WCyL0j2YzRY8foXYIFreBo3MSijDOBEU/YBugRZjlt6KJ3148P69qMTulEQ5
y/jx4cNDaKj1ajSgCBMg/sL3D+S6v2ARg+nhlcxGwQUrMVL2rt9hFuddt8M6
t+sGe9q99IP34vxlu555LTm88J+OfkLvGm97ERL8e4+Z7O65u71GZeOZ965z
cT/OvdGgrJIoq8IsG2XRKCoHfulXQeQPy7IaFlGS5PnIC6okHKXDOC7zUVqF
5agsimw0ui87+PGh+E1GIK73XHO0+iT9YWMqapQ8BElZmH6SD95b60s0wH/9
vf4AEXB8Zpu/+Pnw0P591wUhUevb3t+Hrsbc+tcYtH2SctCbrp3Z8BOuo/7z
Yyei5BrD7xf3E6+K87DwwjRM00E8yqqyCsoKvlajQToKM9+p4nIQ+dUgSsIq
CodxWg2HsR+mcR6M4kFWpkGR5FFeFQWACUdBGiSDNM28KveqIvbjOPHKInaG
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
AUwXNGfC1AIA

-->

</rfc>

