<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-08" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2020" month="July" day="12"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest. Firmware updates and secure boot
both tend to use sequences of common operations, so the manifest encodes
those sequences of operations, rather than declaring the metadata. The
manifest also serves as a building block for secure boot.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or secure boot are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In the SUIT manifest specification, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and secure boot.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and secure boot use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications in a Trusted Execution Environment (TEE), see <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>The following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severed fields.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies, software images, and installing them.</t>
  <t>Boot Procedure: A procedure that boots a Recipient by verifying dependencies and images, loading images, and invoking one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Instructions and data that allow a Recipient to perform a useful function. Typically, changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: The Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of urequirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivery to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Boot Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a MAC, to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads or Dependencies.</t>
  <t>Delegation Chains (see <xref target="ovr-delegation"/>) allow a Recipient to work from one of its Trust Anchors to an authority of the Authentication Block.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, including lists of dependencies and affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable fields.</t>
    </list></t>
  <t>Severable fields (see <xref target="ovr-severable"/>).</t>
  <t>Integrated dependencies (see <xref target="ovr-integrated"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           ------------> +------------------------------+
| Severable Elements      |        | Manifest                     |
| Human-Readable Text     |        +------------------------------+
| COSWID                  |        | Structure Version            |
| Integrated Dependencies |        | Sequence Number              |
| Integrated Payloads     |        | Reference to Full Manifest   |
+-------------------------+  +------ Common Structure             |
                             | +---- Commands                     |
+-----------------------+    | |   | Digests of Envelope Elements |
| Common Structure      | <--+ |   +------------------------------+
+-----------------------+      |
| Dependencies          |      +-> +-----------------------+
| Components IDs        |          | Commands              |
| Common Commands ---------------> +-----------------------+
+-----------------------+          | List of ( pairs of (  |
                                   |   * command code      |
                                   |   * argument          |
                                   | ))                    |
                                   +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads or dependencies. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to validate intermediate Update Authorities against long-term a Trust Anchor. These are lists of CWTs, where the first in the list is signed by a Trust Anchor.</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains one or more COSE authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The payload element in each of these COSE elements is a SUIT_Digest <xref target="SUIT_Digest"/>.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which the newest manifest is and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of three parts: a list of dependencies, a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/>, <xref target="SUIT_Dependency"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Dependency Resolution, Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Boot Command Sequences are: System Validation, Image Loading, and Image Invocation. A Boot Procedure is the complete set of each Boot Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command.</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, CoSWID, or Text data. Integrated Dependencies and Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a <xref target="ovr-severable">Severable Element</xref>. It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the <xref target="ovr-envelope">Envelope</xref> that have <xref target="ovr-integrity">Integrity Check Values</xref> in the <xref target="ovr-manifest">Manifest</xref>.</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system Severs the Text and CoSWID sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient Severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Dependencies and Payloads">

<t>In some cases, it is beneficial to include a dependency or a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest requires encryption, it must be referenced as a dependency, so a trivial manifest may be used to enclose the encrypted manifest. The encrypted manifest may be contained in the dependent manifest’s envelope.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="composite-manifests"/>, <xref target="encrypted-manifests"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Interpreter Behavior">

<t>This section describes the behavior of the manifest interpreter and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported component ID encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
  <t>Missing component from a set.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the interpreter MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity. Where a device supports only one level of access, it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device supports more than one trusted party, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported parameters. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD require that all Components in the Component Set are specified by one manifest and its dependencies. This manifest is called the Root Manifest.</t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient can receive many incompatible or inapplicable manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>The guidelines in <xref target="creating-manifests">Creating Manifests</xref> require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to: Conditions, Override Parameters, Set Parameters, Try-Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again in its entirety after authenticity validation.</t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>Alternatively, a Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by an interpreter. This interpreter can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component or dependency. A dependency is another SUIT_Envelope that describes additional components. Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, i.e. arrays of binary strings, but referenced in commands by Component Index, the index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency. Most commands operate on either a component or a dependency. Setting the Component Index clears the Dependency Index. Setting the Dependency Index clears the Component Index.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Offset</c>
      <c>assert(offsetof(current) == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Check Image Not Match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(current, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>break if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may fork a process for each command until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive. The interpreter MUST track each Set Component Index directive, and cause an Abort if more than one Set Component Index directive targets the same Component Index. When Strict Order = False, each suit-directive-run-sequence MUST begin with a Set Component Index directive. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that forks suit-directive-run-sequence processes to check that the first element is correct, then fork a process to handle the remainder of the sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains they MAY require independent verification of authenticity or security policies. Security domains may be divided by separation technology such as Arm TrustZone, or Intel SGX. Security domains may also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module may require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains, a manifest processor MAY be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Abstract Machine. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</spanx></t>

<section anchor="template-compatibility-check" title="Compatibility Check Template">

<t>The compatibility check ensures that Recipients only install compatible images.
In this template all information is contained in the common block and the following sequence of operations are used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="identifiers"/>)</t>
  <t>Check Class Identifier condication (see <xref target="identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot" title="Secure Boot Template">

<t>This template performs a secure boot operation.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

<t>According to <xref target="command-behavior"/>, the Run directive applies to the component referenced by the current Component Index. Hence, the Set Component Index directive has to be used to target a specific component.</t>

</section>
<section anchor="firmware-download-template" title="Firmware Download Template">

<t>This template triggers the download of firmware.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-install" title="Install Template">

<t>This template modifies the Firmware Download template and adds an additional sequence. The Firmware Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the Install sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload" title="Integrated Payload Template">

<t>This template triggers the installation of a payload included in the manifest envelope. It is identical to <xref target="firmware-download-template"/> except that it places an added restriction on the URI passed to the Set Parameters directive.</t>

<t>An implementor MAY choose to place a payload in the envelope of a manifest. The payload envelope key MAY be a positive or negative integer. The payload envelope key MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the manifest. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the payload. For example, an envelope that contains a payload a key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
<section anchor="template-load-ext" title="Load from Nonvolatile Storage Template">

<t>This directive loads an firmware image from external storage.</t>

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-load-decompress" title="Load &amp; Decompress from Nonvolatile Storage Template">

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This template is similar to <xref target="template-load-ext"/> but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

</section>
<section anchor="template-dependency" title="Dependency Template">

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementor MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see <xref target="secparameters"/>)</t>
      <t>Encryption Info (see <xref target="secparameters"/>)</t>
    </list></t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a <xref target="composite-manifests">composite manifest</xref>.</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The following operations are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following operations are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Delegation Chains, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation field MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see <xref target="authentication-info"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band updates Trust Anchors.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list of one or more cryptographic authentication wrappers for the Manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the Manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be an empty list.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>To use an encrypted manifest, it must be a dependency of a plaintext manifest. This allows fine-grained control of what information is accessible to intermediate systems for the purposes of management, while still preserving the confidentiality of the manifest contents. This also means that a Recipient can process an encrypted manifest in the same way as an encrypted payload, allowing code reuse.</t>

<t>A template for using an encrypted manifest is covered in <xref target="template-encrypted-manifest">Encrypted Manifest Template</xref>.</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a Concise Software Identifier found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>The CoSWID, Text section, or any Command Sequence of the Update Procedure (Dependency Resolution, Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps Recipients to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map of pairs. It MAY contain two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text mappings</t>
  <t>SUIT_Component_Identifier =&gt; map mappings</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in <xref target="manifest-common">suit-common</xref> or the suit-common of a dependency.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The yaml-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A text version number</c>
      <c>suit-text-version-required</c>
      <c>A text expression of the required version number</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="text-version-required" title="text-version-required">

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author should populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a text expression that is representative of the version constraints placed on the dependency.</t>

<t>For example, to express a dependency on a component “[‘x’, ‘y’]”, where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<t><spanx style="verb">
[h'78',h'79'] : {
    7 : "&gt;=1.2.5,&lt;2"
}
</spanx></t>

<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid contains a Concise Software Identifier. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of <xref target="SUIT_Dependency"></xref> blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement; at least one manifest in a dependency tree MUST contain a suit-components block.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or try-each is required by more than one Command Sequence, suit-common-sequence results in a smaller encoding.</t>

<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, however the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see <xref target="suit-component-identifier"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. A dependency MAY declare a prefix to the components defined in the dependency manifest. Components are identified by Component Identifiers, i.e. arrays of binary strings, but referenced in commands</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution: suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL to implement. Only one manifest in an update may contain the “run” directive.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 4,5,6 form the Boot Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is a command code identifier, followed by a <xref target="reporting-policy">SUIT_Reporting_Policy</xref>.</t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a reporting policy</t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether or not to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive, <xref target="suit-directive-try-each"/>, is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behavior. See <xref target="suit-parameter-soft-failure"/>.</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>TODO: Records, bitfield</t>

<t>To facilitate construction of Reports that describe the success, or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>SUIT does NOT REQUIRE a particular format of Records or Reports. SUIT only defines hints to the Reporting engine for which Records it should aggregate into the Report.</t>

<t>An OPTIONAL Record format, SUIT_Record is defined in <xref target="full-cddl"/>. It is encoded as a map, with the following elements.</t>

<texttable>
      <ttcol align='left'>Element</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-record-success</c>
      <c>The boolean or integer success or failure code of the command.</c>
      <c>suit-record-component-id</c>
      <c>The current component when the record was generated.</c>
      <c>suit-record-dependency-id</c>
      <c>The current dependency digest when the record was generated.</c>
      <c>suit-record-command-sequence-id</c>
      <c>The label of the Command Sequence that was executing when the record was generated.</c>
      <c>suit-record-command-id</c>
      <c>The label of the command that was in progress when the record was generated.</c>
      <c>suit-record-params</c>
      <c>The set of parameters that was consumed by the current command.</c>
      <c>suit-record-actual</c>
      <c>The value against which a suit-condition compared a parameter.</c>
</texttable>

<t>In Secure Boot operations, the Reporting engine MAY aggregate the Records produced in a Procedure into the evidence used for an attestation report.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-parameter-component-offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="identifiers" title="Constructing Identifiers">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by <xref target="identifier-conditions">identifier conditions</xref>.</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>A RFC 4122 UUID representing the vendor of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the <xref target="SUIT_Digest"></xref> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expiry date for the use of the manifest encoded as a POSIX timestamp; a positive integer. Implementations that use this parameter MUST use a 64-bit internal representation of the integer.</t>

</section>
<section anchor="suit-parameter-component-offset" title="suit-parameter-component-offset">

<t>This parameter sets the offset in a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its offset into the component’s storage area. This offset MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>Compression Info defines any information that is required for a Recipient to perform decompression operations. Typically, this includes the algorithm identifier. This document defines the use of ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="I-D.kucherawy-rfc8478bis"/>.</t>

<t>Additional compression formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a Recipient to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either <xref target="suit-directive-copy"></xref> or with <xref target="suit-directive-swap"></xref>. The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for <xref target="suit-directive-run"></xref>. The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with <xref target="suit-condition-minimum-battery"></xref>.</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with <eref target="suit-condition-update-authorized">suit-condition-update-authorized</eref> to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when <xref target="suit-condition-version"></xref> is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>suit-directive-wait <xref target="suit-directive-wait"/> directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as <xref target="suit-parameter-update-priority"/></c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (POSIX timestamp)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>Indicates a list of URIs from which to fetch a resource. The URI list is encoded as a list of tstr, in priority order. The Recipient should attempt to fetch the resource from each URI in turn, ruling out each, in order, if the resource is inaccessible or it is otherwise undesirable to fetch from that URI. suit-parameter-uri-list is consumed by <xref target="suit-directive-fetch-uri-list"/>.</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to <xref target="suit-directive-fetch"></xref>. Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside <xref target="suit-directive-try-each"></xref> or <xref target="suit-directive-run-sequence"></xref> and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-condition-component-offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Custom Condition</c>
      <c>SUIT_Condition_Custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if <xref target="suit-parameter-soft-failure"></xref> is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary use. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. The Recipient MAY treat them as scoped by component or as global identifiers.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

<t>Globally-scoped identifiers MUST match, regardless of current component index. Component-scoped identifiers match only when the current component index resolves to the component associated with the component-scoped identifier.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the <xref target="suit-parameter-image-digest"></xref> for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the <xref target="suit-parameter-image-digest"></xref>. If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the <xref target="suit-parameter-use-before">suit-parameter-use-before parameter</xref>, which must have already been set as a parameter, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-offset" title="suit-condition-component-offset">

<t>Verify that the offset of the current component matches the offset set in <xref target="suit-parameter-component-offset"></xref>. This condition allows a manifest to select between several images to match a target offset.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient’s battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes <xref target="suit-parameter-minimum-battery"></xref>.</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. <xref target="suit-parameter-update-priority"></xref> provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component’s version against the version info specified in <xref target="suit-parameter-version"></xref></t>

</section>
<section anchor="SUIT_Condition_Custom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Abort</c>
      <c>suit-directive-abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>Fetch URI list</c>
      <c>suit-directive-fetch-uri-list</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into suit-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t><xref target="suit-parameter-soft-failure"></xref> is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and dependency-index, respectively. If component-index or dependency-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

</section>
<section anchor="suit-directive-fetch-uri-list" title="suit-directive-fetch-uri-list">

<t>suit-directive-fetch-uri-list uses the same semantics as <xref target="suit-directive-fetch"></xref>, however it iterates over the <xref target="suit-parameter-uri-list">URI List</xref> to select a URI to fetch from.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t>suit-directive-copy reads its source from <xref target="suit-parameter-source-component"></xref>.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through <xref target="suit-parameter-run-args">suit-parameter-run-arguments</xref> and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t><xref target="suit-parameter-soft-failure"></xref> defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the CoSWID, Text section, or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope with an identical key, so that it matches the key of the corresponding Integrity Check Value.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The SUIT digest is a CBOR List containing two elements: a suit-digest-algorithm-id and a bstr containing the bytes of the digest.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate a CBOR tag for the SUIT Envelope and another for the SUIT Manifest.</t>
  <t>allocate a media type for suit: application/suit-envelope</t>
  <t>setup several registries as described below</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>3</c>
      <c>Image Match</c>
      <c>4</c>
      <c>Use Before</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c>28</c>
      <c>Version</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c>30</c>
      <c>Fetch URI List</c>
      <c>31</c>
      <c>Swap</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c>nint</c>
      <c>Custom Condition</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c>2</c>
      <c>Class ID</c>
      <c>3</c>
      <c>Image Digest</c>
      <c>4</c>
      <c>Use Before</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>12</c>
      <c>Strict Order</c>
      <c>13</c>
      <c>Soft Failure</c>
      <c>14</c>
      <c>Image Size</c>
      <c>18</c>
      <c>Encryption Info</c>
      <c>19</c>
      <c>Compression Info</c>
      <c>20</c>
      <c>Unpack Info</c>
      <c>21</c>
      <c>URI</c>
      <c>22</c>
      <c>Source Component</c>
      <c>23</c>
      <c>Run Args</c>
      <c>24</c>
      <c>Device ID</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>27</c>
      <c>Update Priority</c>
      <c>28</c>
      <c>Version</c>
      <c>29</c>
      <c>Wait Info</c>
      <c>30</c>
      <c>URI List</c>
      <c>31</c>
      <c>Component Index</c>
      <c>nint</c>
      <c>Custom</c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c>2</c>
      <c>Update Description</c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c>nint</c>
      <c>Custom</c>
</texttable>

</section>
<section anchor="suit-component-text-values" title=" SUIT Component Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c>2</c>
      <c>Model Name</c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c>4</c>
      <c>Model Info</c>
      <c>5</c>
      <c>Component Description</c>
      <c>6</c>
      <c>Component Version</c>
      <c>7</c>
      <c>Component Version Required</c>
      <c>nint</c>
      <c>Custom</c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<section anchor="suit-digest-algorithm-identifiers" title="SUIT Digest Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>SHA224</c>
      <c>2</c>
      <c>SHA256</c>
      <c>3</c>
      <c>SHA384</c>
      <c>4</c>
      <c>SHA512</c>
      <c>5</c>
      <c>SHA3-224</c>
      <c>6</c>
      <c>SHA3-256</c>
      <c>7</c>
      <c>SHA3-384</c>
      <c>8</c>
      <c>SHA3-512</c>
</texttable>

</section>
<section anchor="suit-compression-algorithm-identifiers" title="SUIT Compression Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>zlib</c>
      <c>2</c>
      <c>Brotli</c>
      <c>3</c>
      <c>zstd</c>
</texttable>

</section>
<section anchor="unpack-algorithms" title="Unpack Algorithms">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>HEX</c>
      <c>2</c>
      <c>ELF</c>
      <c>3</c>
      <c>COFF</c>
      <c>4</c>
      <c>SREC</c>
</texttable>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="I-D.ietf-suit-architecture"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='May' day='27' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-11.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='2' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-11.txt' />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8747" target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2020' month='March' />
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor="I-D.kucherawy-rfc8478bis">
<front>
<title>Zstandard Compression and the application/zstd Media Type</title>

<author initials='Y' surname='Collet' fullname='Yann Collet'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='April' day='23' year='2020' />

<abstract><t>Zstandard, or "zstd" (pronounced "zee standard"), is a data compression mechanism.  This document describes the mechanism and registers a media type and content encoding to be used when transporting zstd-compressed content via Multipurpose Internet Mail Extensions (MIME).  It also registers a corresponding media type, content encoding, and structured syntax suffix.  Despite use of the word "standard" as part of its name, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.  This document replaces and obsoletes RFC 8478.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-kucherawy-rfc8478bis-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-kucherawy-rfc8478bis-05.txt' />
</reference>


<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section numbered="no" anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  ? suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * $$SUIT_Envelope_Extensions,
  (int => bstr)
}

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication = [ + bstr .cbor SUIT_Authentication_Block ]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members,
    SUIT_Severable_Members_Digests,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unserverble-manifest-member-extensions,
)

SUIT_Severable_Members_Digests = (
  ? suit-dependency-resolution-digest => SUIT_Digest,
  ? suit-payload-fetch-digest => SUIT_Digest,
  ? suit-install-digest => SUIT_Digest,
  ? suit-text-digest => SUIT_Digest,
  ? suit-coswid-digest => SUIT_Digest,
  * $$severable-manifest-members-digests-extensions
)

SUIT_Common = {
    ? suit-dependencies           => SUIT_Dependencies,
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  uint/bool)
SUIT_Common_Commands //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})


SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-image-not-match,   SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-use-before,        SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-minimum-battery,   SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-update-authorized, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-version,           SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-component-offset,  SUIT_Reporting_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-copy,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-swap,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-run,                  SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-wait,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-abort,                SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-fetch-uri-list,       SUIT_Reporting_Policy)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Reporting_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Command_ID /= suit-command-custom
SUIT_Command_ID /= suit-condition-vendor-identifier
SUIT_Command_ID /= suit-condition-class-identifier
SUIT_Command_ID /= suit-condition-image-match
SUIT_Command_ID /= suit-condition-use-before
SUIT_Command_ID /= suit-condition-component-offset
SUIT_Command_ID /= suit-condition-device-identifier
SUIT_Command_ID /= suit-condition-image-not-match
SUIT_Command_ID /= suit-condition-minimum-battery
SUIT_Command_ID /= suit-condition-update-authorized
SUIT_Command_ID /= suit-condition-version
SUIT_Command_ID /= suit-directive-set-component-index
SUIT_Command_ID /= suit-directive-set-dependency-index
SUIT_Command_ID /= suit-directive-abort
SUIT_Command_ID /= suit-directive-try-each
;SUIT_Command_ID /= suit-directive-do-each
;SUIT_Command_ID /= suit-directive-map-filter
SUIT_Command_ID /= suit-directive-process-dependency
SUIT_Command_ID /= suit-directive-set-parameters
SUIT_Command_ID /= suit-directive-override-parameters
SUIT_Command_ID /= suit-directive-fetch
SUIT_Command_ID /= suit-directive-copy
SUIT_Command_ID /= suit-directive-run
SUIT_Command_ID /= suit-directive-wait
SUIT_Command_ID /= suit-directive-run-sequence
SUIT_Command_ID /= suit-directive-swap
SUIT_Command_ID /= suit-directive-fetch-uri-list

suit-record = {
  suit-record-success             => bool/int,
  ? suit-record-component-id      => SUIT_Component_ID,
  ? suit-record-dependency-id     => SUIT_Digest,
  ? suit-record-command-sequence-id => (
      suit-common-sequence /
      suit-dependency-resolution /
      suit-payload-fetch /
      suit-install /
      suit-validate /
      suit-load /
      suit-run /
      * $$suit-command-sequence-list-extensions
  ),
  ? suit-record-interpeter-offset => uint,
  ? suit-record-command-id        => SUIT_Command_ID,
  ? suit-record-params            => SUIT_Parameters,
  ? suit-record-actual            => SUIT_Parameters,
  * $$suit-record-extensions
}

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

SUIT_Parameters //= (suit-parameter-uri-list =>
    bstr .cbor SUIT_URI_List)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    * $$SUIT_Compression_Info-extensions,
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    * $$SUIT_Unpack_Info-extensions,

}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_URI_List = [+ tstr ]

SUIT_Text_Map = {
    ? suit-text-components =>
    [
        + {
            1 => SUIT_Component_Identifier
            SUIT_Text_Component_Keys
        }
    ],
    SUIT_Text_Keys
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    ? suit-text-version-required      => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
suit-text-version-required      = 7
]]></artwork></figure>

</section>
<section numbered="no" anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-offset</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840356
3303937656636346266336262396234393465373165316632343138656566386434363
6636339303266363339613835356563396166336539656464623939584093347ceebc1
209a2d660bfbbe78e461079f1952c614e1ae8f734ff0ea438110d056c1a0cce6b0599d
b54e6704847de49efe60e9a7b821215d83368a2c8c7c088' / [
        h'd28443a10126a05844820258403563303937656636346266336262396234
3934653731653166323431386565663864343636636339303266363339613835356563
396166336539656464623939584093347ceebc1209a2d660bfbbe78e461079f1952c61
4e1ae8f734ff0ea438110d056c1a0cce6b0599db54e6704847de49efe60e9a7b821215
d83368a2c8c7c088' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584035633039376566363462663362623962
3439346537316531663234313865656638643436366363393032663633396138353565
63396166336539656464623939' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3563303937656636346266336262396
2343934653731653166323431386565663864343636636339303266363339613835356
563396166336539656464623939'
                ] /,
                / signature / h'93347ceebc1209a2d660bfbbe78e461079f195
2c614e1ae8f734ff0ea438110d056c1a0cce6b0599db54e6704847de49efe60e9a7b82
1215d83368a2c8c7c088'
            ]) /
    ] /,
    / manifest / 3:h'a50101020003585fa202818141000458568614a40150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248
202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654321
00e1987d0010f020f0a4382030f0c43821702' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:0,
        / common / 3:h'a202818141000458568614a40150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820258200011223
3445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f0
20f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'821702' / [
            / directive-run / 23,2
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  117</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a1035871a50101020003585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0358248202582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  266</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584035633039376566363462
663362623962343934653731653166323431386565663864343636636339
303266363339613835356563396166336539656464623939584093347cee
bc1209a2d660bfbbe78e461079f1952c614e1ae8f734ff0ea438110d056c
1a0cce6b0599db54e6704847de49efe60e9a7b821215d83368a2c8c7c088
035871a50101020003585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f0a4382030f0c43821702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840393
8376565633835666139396664333164333332333831623938313066393062303563326
530643466323834613666343231313230376564303066666637353058404931df82e15
3bf1e3af5a59800216d8a47c33a37839e7d63d9f526fd369aa8359daae18f7619c9591
23e7f7f928ee92a9893afedd35d06a936d6ed3d5843bf2a' / [
        h'd28443a10126a05844820258403938376565633835666139396664333164
3333323338316239383130663930623035633265306434663238346136663432313132
30376564303066666637353058404931df82e153bf1e3af5a59800216d8a47c33a3783
9e7d63d9f526fd369aa8359daae18f7619c959123e7f7f928ee92a9893afedd35d06a9
36d6ed3d5843bf2a' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584039383765656338356661393966643331
6433333233383162393831306639306230356332653064346632383461366634323131
32303765643030666666373530' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3938376565633835666139396664333
1643333323338316239383130663930623035633265306434663238346136663432313
132303765643030666666373530'
                ] /,
                / signature / h'4931df82e153bf1e3af5a59800216d8a47c33a
37839e7d63d9f526fd369aa8359daae18f7619c959123e7f7f928ee92a9893afedd35d
06a936d6ed3d5843bf2a'
            ]) /
    ] /,
    / manifest / 3:h'a50101020103585fa202818141000458568614a40150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248
202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654321
00e1987d0010f020f0958258613a115781b687474703a2f2f6578616d706c652e636f6
d2f66696c652e62696e1502030f0a4382030f' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:h'a202818141000458568614a40150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820258200011223
3445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f0
20f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e1502030f' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  152</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a1035894a50101020103585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0358248202582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f0958258613a115781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a4382
030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  301</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584039383765656338356661
393966643331643333323338316239383130663930623035633265306434
66323834613666343231313230376564303066666637353058404931df82
e153bf1e3af5a59800216d8a47c33a37839e7d63d9f526fd369aa8359daa
e18f7619c959123e7f7f928ee92a9893afedd35d06a936d6ed3d5843bf2a
035894a50101020103585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f0958258613a115781b687474703a
2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f0a438203
0f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields" title="Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840373
5363835353739613833626162643731656338656632326661343961633837336637386
13730386134336136373465373832616433306236353938643137615840faca70796c3
19ce6dae69690a64ced3ab91b9bb7f3e9a5004122d629d2816216a870448424ce4410d
658b80215185e32d8ec6feb15c7275d64437c36418463e4' / [
        h'd28443a10126a05844820258403735363835353739613833626162643731
6563386566323266613439616338373366373861373038613433613637346537383261
6433306236353938643137615840faca70796c319ce6dae69690a64ced3ab91b9bb7f3
e9a5004122d629d2816216a870448424ce4410d658b80215185e32d8ec6feb15c7275d
64437c36418463e4' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584037353638353537396138336261626437
3165633865663232666134396163383733663738613730386134336136373465373832
61643330623635393864313761' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3735363835353739613833626162643
7316563386566323266613439616338373366373861373038613433613637346537383
261643330623635393864313761'
                ] /,
                / signature / h'faca70796c319ce6dae69690a64ced3ab91b9b
b7f3e9a5004122d629d2816216a870448424ce4410d658b80215185e32d8ec6feb15c7
275d64437c36418463e4'
            ]) /
    ] /,
    / manifest / 3:h'a70101020203585fa202818141000458568614a40150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248
202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987654321
00e1987d0010f020f09820258203ee96dc79641970ae46b929ccf0b72ba9536dd84602
0dbdc9f949d84ea0e18d20a4382030f0c438217020d8202582023f48b2e2838650f43c
144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:h'a202818141000458568614a40150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820258200011223
3445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f0
20f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / install / 9:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
        ],
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'821702' / [
            / directive-run / 23,2
        ] /,
        / text / 13:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'23f48b2e2838650f43c144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8'
        ],
    } /,
    / install / 9:h'8613a1157832687474703a2f2f6578616d706c652e636f6d2f
766572792f6c6f6e672f706174682f746f2f66696c652f66696c652e62696e1502030f
' / [
        / directive-set-parameters / 19,{
            / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
        } ,
        / directive-fetch / 21,2 ,
        / condition-image-match / 3,15
    ] /,
    / text / 13:h'a1814100a2036761726d2e636f6d0578525468697320636f6d70
6f6e656e7420697320612064656d6f6e7374726174696f6e2e20546865206469676573
7420697320612073616d706c65207061747465726e2c206e6f742061207265616c206f
6e652e' / {
        [h'00']:{
                / vendor-domain / 3:'arm.com',
                / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
            }
    } /,
}
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  191</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a10358bba70101020203585fa202818141000458568614a40150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0358248202582000112233445566778899aabbccddeeff0123456789abcd
effedcba98765432100e1987d0010f020f09820258203ee96dc79641970a
e46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c
438217020d8202582023f48b2e2838650f43c144234aee18401ffe3cce47
33b23881c3a8ae2d2b66e8
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  340</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584037353638353537396138
336261626437316563386566323266613439616338373366373861373038
6134336136373465373832616433306236353938643137615840faca7079
6c319ce6dae69690a64ced3ab91b9bb7f3e9a5004122d629d2816216a870
448424ce4410d658b80215185e32d8ec6feb15c7275d64437c36418463e4
0358bba70101020203585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f09820258203ee96dc79641970ae4
6b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c43
8217020d8202582023f48b2e2838650f43c144234aee18401ffe3cce4733
b23881c3a8ae2d2b66e8
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  923</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a402589281588fd28443a10126a058448202584037353638353537396138
336261626437316563386566323266613439616338373366373861373038
6134336136373465373832616433306236353938643137615840faca7079
6c319ce6dae69690a64ced3ab91b9bb7f3e9a5004122d629d2816216a870
448424ce4410d658b80215185e32d8ec6feb15c7275d64437c36418463e4
0358bba70101020203585fa202818141000458568614a40150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503
58248202582000112233445566778899aabbccddeeff0123456789abcdef
fedcba98765432100e1987d0010f020f09820258203ee96dc79641970ae4
6b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a4382030f0c43
8217020d8202582023f48b2e2838650f43c144234aee18401ffe3cce4733
b23881c3a8ae2d2b66e809583c8613a1157832687474703a2f2f6578616d
706c652e636f6d2f766572792f6c6f6e672f706174682f746f2f66696c65
2f66696c652e62696e1502030f0d590204a20179019d2323204578616d70
6c6520323a2053696d756c74616e656f757320446f776e6c6f61642c2049
6e7374616c6c6174696f6e2c2053656375726520426f6f742c2053657665
726564204669656c64730a0a2020202054686973206578616d706c652063
6f766572732074686520666f6c6c6f77696e672074656d706c617465733a
0a202020200a202020202a20436f6d7061746962696c6974792043686563
6b20287b7b74656d706c6174652d636f6d7061746962696c6974792d6368
65636b7d7d290a202020202a2053656375726520426f6f7420287b7b7465
6d706c6174652d7365637572652d626f6f747d7d290a202020202a204669
726d7761726520446f776e6c6f616420287b7b6669726d776172652d646f
776e6c6f61642d74656d706c6174657d7d290a202020200a202020205468
6973206578616d706c6520616c736f2064656d6f6e737472617465732073
6576657261626c6520656c656d656e747320287b7b6f76722d7365766572
61626c657d7d292c20616e64207465787420287b7b6d616e69666573742d
6469676573742d746578747d7d292e814100a2036761726d2e636f6d0578
525468697320636f6d706f6e656e7420697320612064656d6f6e73747261
74696f6e2e205468652064696765737420697320612073616d706c652070
61747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images" title="Example 3: A/B images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840616
5306331656136383963393830306138343335353066333837393662366664626435326
1306337386265356432363031316438653738346461343364343763584010222ddbce4
e82a85f6ec7b72db34d7c5be8d2e822e4b2d099a4cf1d08aa2174c56c2e93bf20c785b
ca298900208d92d352faf86e6cddc902a726bbc443c21ff' / [
        h'd28443a10126a05844820258406165306331656136383963393830306138
3433353530663338373936623666646264353261306337386265356432363031316438
653738346461343364343763584010222ddbce4e82a85f6ec7b72db34d7c5be8d2e822
e4b2d099a4cf1d08aa2174c56c2e93bf20c785bca298900208d92d352faf86e6cddc90
2a726bbc443c21ff' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584061653063316561363839633938303061
3834333535306633383739366236666462643532613063373862653564323630313164
38653738346461343364343763' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'6165306331656136383963393830306
1383433353530663338373936623666646264353261306337386265356432363031316
438653738346461343364343763'
                ] /,
                / signature / h'10222ddbce4e82a85f6ec7b72db34d7c5be8d2
e822e4b2d099a4cf1d08aa2174c56c2e93bf20c785bca298900208d92d352faf86e6cd
dc902a726bbc443c21ff'
            ]) /
    ] /,
    / manifest / 3:h'a5010102030358aaa202818141000458a18814a20150fa6b4
a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f82583
68614a105198400050514a20358248202582000112233445566778899aabbccddeeff0
123456789abcdeffedcba98765432100e1987d0583a8614a1051a00084400050514a20
35824820258200123456789abcdeffedcba987654321000112233445566778899aabbc
cddeeff0e1a00012c22010f020f095861860f82582a8613a105198400050513a115781
c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051
a00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c653
22e62696e1502030f0a4382030f' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a202818141000458a18814a20150fa6b4a53d5ad5fdfbe9
de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258368614a10519840
0050514a20358248202582000112233445566778899aabbccddeeff0123456789abcde
ffedcba98765432100e1987d0583a8614a1051a00084400050514a2035824820258200
123456789abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a000
12c22010f020f' / {
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:h'8814a20150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258368614a1051984000505
14a20358248202582000112233445566778899aabbccddeeff0123456789abcdeffedc
ba98765432100e1987d0583a8614a1051a00084400050514a203582482025820012345
6789abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a00012c22
010f020f' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    h'8614a105198400050514a203582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0' / [
                        / directive-override-parameters / 20,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200011223344556
6778899aabbccddeeff0123456789abcdeffedcba9876543210' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                            ] /,
                            / image-size / 14:34768,
                        }
                    ] / ,
                    h'8614a1051a00084400050514a20358248202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a00012c22'
/ [
                        / directive-override-parameters / 20,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200123456789abc
deffedcba987654321000112233445566778899aabbccddeeff' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                            ] /,
                            / image-size / 14:76834,
                        }
                    ] /
                ] ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / install / 9:h'860f82582a8613a105198400050513a115781c68747470
3a2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a00084400
050513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f' / [
            / directive-try-each / 15,[
                h'8613a105198400050513a115781c687474703a2f2f6578616d70
6c652e636f6d2f66696c65312e62696e' / [
                    / directive-set-parameters / 19,{
                        / offset / 5:33792,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ] / ,
                h'8613a1051a00084400050513a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65322e62696e' / [
                    / directive-set-parameters / 19,{
                        / offset / 5:541696,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ] /
            ] ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'82030f' / [
            / condition-image-match / 3,15
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  288</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a10359011ba5010102030358aaa202818141000458a18814a20150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450f8258368614a105198400050514a20358248202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d058
3a8614a1051a00084400050514a2035824820258200123456789abcdeffe
dcba987654321000112233445566778899aabbccddeeff0e1a00012c2201
0f020f095861860f82582a8613a105198400050513a115781c687474703a
2f2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a
00084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  437</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584061653063316561363839
633938303061383433353530663338373936623666646264353261306337
386265356432363031316438653738346461343364343763584010222ddb
ce4e82a85f6ec7b72db34d7c5be8d2e822e4b2d099a4cf1d08aa2174c56c
2e93bf20c785bca298900208d92d352faf86e6cddc902a726bbc443c21ff
0359011ba5010102030358aaa202818141000458a18814a20150fa6b4a53
d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45
0f8258368614a105198400050514a2035824820258200011223344556677
8899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0583a
8614a1051a00084400050514a2035824820258200123456789abcdeffedc
ba987654321000112233445566778899aabbccddeeff0e1a00012c22010f
020f095861860f82582a8613a105198400050513a115781c687474703a2f
2f6578616d706c652e636f6d2f66696c65312e62696e582c8613a1051a00
084400050513a115781c687474703a2f2f6578616d706c652e636f6d2f66
696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load &amp; Decompress (<xref target="template-load-decompress"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840346
2346337633863306664613736633963393539316139646231363039313865326233633
93661353862306135653439383466643465386639333539613932385840d7063361f65
3d57e63691e1bd9c856058c773b94e488bff58d599c45277788e90eb92fbef666f584e
8d35b3b20ceef50a69b94dcff12beee92e426a06ea31320' / [
        h'd28443a10126a05844820258403462346337633863306664613736633963
3935393161396462313630393138653262336339366135386230613565343938346664
3465386639333539613932385840d7063361f653d57e63691e1bd9c856058c773b94e4
88bff58d599c45277788e90eb92fbef666f584e8d35b3b20ceef50a69b94dcff12beee
92e426a06ea31320' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584034623463376338633066646137366339
6339353931613964623136303931386532623363393661353862306135653439383466
64346538663933353961393238' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3462346337633863306664613736633
9633935393161396462313630393138653262336339366135386230613565343938346
664346538663933353961393238'
                ] /,
                / signature / h'd7063361f653d57e63691e1bd9c856058c773b
94e488bff58d599c45277788e90eb92fbef666f584e8d35b3b20ceef50a69b94dcff12
beee92e426a06ea31320'
            ]) /
    ] /,
    / manifest / 3:h'a801010204035867a20283814100814102814101045858880
c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2
d51f2ab450358248202582000112233445566778899aabbccddeeff0123456789abcde
ffedcba98765432100e1987d0010f020f085827880c0113a115781b687474703a2f2f6
578616d706c652e636f6d2f66696c652e62696e1502030f094b880c0013a1160116020
30f0a45840c00030f0b583a880c0213a4035824820258200123456789abcdeffedcba9
87654321000112233445566778899aabbccddeeff0e1a00012c22130116001602030f0
c45840c021702' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:h'a20283814100814102814101045858880c0014a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d0010f020f' / {
            / components / 2:[
                [h'00'] ,
                [h'02'] ,
                [h'01']
            ],
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ] /,
        } /,
        / payload-fetch / 8:h'880c0113a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e1502030f' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / install / 9:h'880c0013a116011602030f' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 22:1 / [h'02'] /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'840c00030f' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15
        ] /,
        / load / 11:h'880c0213a4035824820258200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c22130116001602030f'
/ [
            / directive-set-component-index / 12,2 ,
            / directive-set-parameters / 19,{
                / image-digest / 3:h'820258200123456789abcdeffedcba987
654321000112233445566778899aabbccddeeff' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                ] /,
                / image-size / 14:76834,
                / source-component / 22:0 / [h'00'] /,
                / compression-info / 19:1 / "gzip" /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'840c021702' / [
            / directive-set-component-index / 12,2 ,
            / directive-run / 23,2
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  245</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a10358f1a801010204035867a20283814100814102814101045858880c00
14a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48
bf429b2d51f2ab450358248202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d0010f020f085827880c
0113a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e
62696e1502030f094b880c0013a116011602030f0a45840c00030f0b583a
880c0213a4035824820258200123456789abcdeffedcba98765432100011
2233445566778899aabbccddeeff0e1a00012c22130116001602030f0c45
840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  394</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584034623463376338633066
646137366339633935393161396462313630393138653262336339366135
3862306135653439383466643465386639333539613932385840d7063361
f653d57e63691e1bd9c856058c773b94e488bff58d599c45277788e90eb9
2fbef666f584e8d35b3b20ceef50a69b94dcff12beee92e426a06ea31320
0358f1a801010204035867a20283814100814102814101045858880c0014
a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf
429b2d51f2ab450358248202582000112233445566778899aabbccddeeff
0123456789abcdeffedcba98765432100e1987d0010f020f085827880c01
13a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62
696e1502030f094b880c0013a116011602030f0a45840c00030f0b583a88
0c0213a4035824820258200123456789abcdeffedcba9876543210001122
33445566778899aabbccddeeff0e1a00012c22130116001602030f0c4584
0c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images" title="Example 5: Two Images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81588fd28443a10126a0584482025840323
1306231323835306332333930393164386538326330653965393130363632623638616
33834323435386136343138653333663637303165643538333432635840b5b8cb30c2b
bb646c4d32426d72768668d6d6af54c26ac46c4020ca37ada47b9468340b4d0b2ddd15
db824a7e6b0bc233e753940dfb7131fa145ddc456da3cf6' / [
        h'd28443a10126a05844820258403231306231323835306332333930393164
3865383263306539653931303636326236386163383432343538613634313865333366
3637303165643538333432635840b5b8cb30c2bbb646c4d32426d72768668d6d6af54c
26ac46c4020ca37ada47b9468340b4d0b2ddd15db824a7e6b0bc233e753940dfb7131f
a145ddc456da3cf6' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202584032313062313238353063323339303931
6438653832633065396539313036363262363861633834323435386136343138653333
66363730316564353833343263' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes / h'3231306231323835306332333930393
1643865383263306539653931303636326236386163383432343538613634313865333
366363730316564353833343263'
                ] /,
                / signature / h'b5b8cb30c2bbb646c4d32426d72768668d6d6a
f54c26ac46c4020ca37ada47b9468340b4d0b2ddd15db824a7e6b0bc233e753940dfb7
131fa145ddc456da3cf6'
            ]) /
    ] /,
    / manifest / 3:h'a601010205035895a202828141008141010458898c0c0014a
40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2a
b450358248202582000112233445566778899aabbccddeeff0123456789abcdeffedcb
a98765432100e1987d0010f020f0c0114a2035824820258200123456789abcdeffedcb
a987654321000112233445566778899aabbccddeeff0e1a00012c2209584f900c0013a
115781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030
f0c0113a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696
e1502030f0a49880c00030f0c01030f0c47860c0017021702' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a202828141008141010458898c0c0014a40150fa6b4a53d
5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025
82000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1
987d0010f020f0c0114a2035824820258200123456789abcdeffedcba9876543210001
12233445566778899aabbccddeeff0e1a00012c22' / {
            / components / 2:[
                [h'00'] ,
                [h'01']
            ],
            / common-sequence / 4:h'8c0c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f02
0f0c0114a2035824820258200123456789abcdeffedcba987654321000112233445566
778899aabbccddeeff0e1a00012c22' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:h'820258200123456789abcdeffedcb
a987654321000112233445566778899aabbccddeeff' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ] /,
                    / image-size / 14:76834,
                }
            ] /,
        } /,
        / install / 9:h'900c0013a115781c687474703a2f2f6578616d706c652e
636f6d2f66696c65312e62696e1502030f0c0113a115781c687474703a2f2f6578616d
706c652e636f6d2f66696c65322e62696e1502030f' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file1.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file2.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ] /,
        / validate / 10:h'880c00030f0c01030f' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,15
        ] /,
        / run / 12:h'860c0017021702' / [
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,2 ,
            / directive-run / 23,2
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  264</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a103590103a601010205035895a202828141008141010458898c0c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824
820258200123456789abcdeffedcba987654321000112233445566778899
aabbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a115
781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e
1502030f0a49880c00030f0c01030f0c47860c0017021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  413</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589281588fd28443a10126a058448202584032313062313238353063
323339303931643865383263306539653931303636326236386163383432
3435386136343138653333663637303165643538333432635840b5b8cb30
c2bbb646c4d32426d72768668d6d6af54c26ac46c4020ca37ada47b94683
40b4d0b2ddd15db824a7e6b0bc233e753940dfb7131fa145ddc456da3cf6
03590103a601010205035895a202828141008141010458898c0c0014a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f0c0114a203582482
0258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0e1a00012c2209584f900c0013a115781c687474703a2f2f65
78616d706c652e636f6d2f66696c65312e62696e1502030f0c0113a11578
1c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e15
02030f0a49880c00030f0c01030f0c47860c0017021702
]]></artwork></figure>

</section>
</section>
<section numbered="no" anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of <xref target="severable-fields">Severable Elements</xref></t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section numbered="no" anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>OPTIONAL</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>RECOMMENDED</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>RECOMMENDED</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>RECOMMENDED</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>RECOMMENDED</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>OPTIONAL</c>
      <c>Version Match</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>OPTIONAL</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>OPTIONAL</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
6/ImFenayFjDu2ywhTwXHNi2c/7qNaLdX2gYrVWn4KIBZ/W2UojFhGPCNizt
Ny7TzvPgayO8zjWOyLiWN80urmWPU/u+OMveYNld5Avfv2kPJGz7wdeHeDeS
X4d/+fLhlx8+ZIvqHCHRyzXHTO/6dck1w72oLhlrIheAHB7PEg5Sy/iBOFzs
kY4fYs1VF2rBCEWtqZCFrD39RjyHq5Pg19a8JrdJSlq1uMTcASruBOesxTwM
SeZDO5KO1tf8oA01s5HW1YguJl7pDwcxs8urHkQQZsLVIUdIKsasqDJWofmL
NkYMNrAcDUr0oqyVhiph0GJYS74mi0A/nBFkhdzMvmFiTqPI1QtMO+z1hqv1
GSVNcXdcPyDM7gny0PJsi+ZapFErimSghjHo84JTGwnqo9eT72WoWAj0s+GU
Gm5jz+chSCg9JWVauN3qMQqcCSKJi4Yf1X/xBuwhInDHrfeYmX3jzZxKzf70
xXy8l5EkbQTEvRc+LqLl7Em7jJhXEaz3i3wxhPStv5H2o+fJ8CD4Vz9gD0g8
XLOTgWDaWzBnOem90ZEjcnh4NLkokxrYT4aJJFFKSXbTBjDQAVKfYKsgQfXs
8RHsqEGj6Kq/fPXm5OW3R8/7bHXag2MEHlhXFEdk4h/CZgJ/nWcoIIj9DqUd
XxsAxzOAe+oKMEVDdiCa+d6JY+p1PGDiBQNdaXWyy3y5LymOQ5y4YltXUr4F
kQpLsHtGIkNnNFKWaiqqP6RODLS2rzfdjo7ImA2/JakjLel4k83e1deMa5Ce
R3b8XtkolTzKqphdCDKYguBS7KelSloMA1c9ovQTSjxTZtUVlgukJLXZNqg5
tVLlScrTTiXCk1d3wxKsurMpQoLE0nw1hCMua9ra+Ns6LloXA/tr4tfgokWA
1eht6pfttKKeudURQUG1KbZU8fEo+P9xxpx+NNJTlCz2wx7XzR/u7nPdiIHW
vgKdVks5Jzptv2YLmV5zq9kn+GNy91sz8pjVaZejNvI6PK8afdkccd6xYa/a
0xBVnZueZFo6cQJPcppg2V5yDqW4KJNUzqQ/bpo78pfRSpGuDWrI4ClcsRJJ
+RUJb6ht/DSdueZcY8WodU/A2rcUVF4cHkgtdHG6DZf/PkdxeZCrJz1FBb55
rKDlg1zKmLqkm7rkpY9veVG3IGKYwVJr179xlc0Zb77apYhhcrpF5nL5us5r
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
GLXB8d3EoZ2O7nydavdjq2tOu8NaXWzqnulSx2poLdzNdZHR4Ioty4raHDXq
Go1eFVWXka8ViVvoMTUrv6grXjVWa9f5i/rtmn7Bie36fcGI7Vq9ogl2mYOl
DrXYgKUOtRh+5Q41W3tSMHSZeFIidtl1Uip2GXMgGf/44w/Mv3CEd0tQXlrM
sSZS1GZN2RcoOVyRDUEW1eLkiiedpXQMlE+V5x3Ls8Cm4tbuYC7yBJeT+37F
b8LawzwZ17N1IhKYUt7CQGSwbMpyj5lD5O0NV8s86WyWqDnSqNd5XzFNicg1
vMkTcxdjOj0+eUY5La/NqbMyMCnmASV4wJQVk8nR6Zdnj7UnT8++P3x+qn1z
+iM9ZY/Ovvzq8OL08NHRoy+Pbn/58tkj24fvXx4fi883p18dfanfBDdnR4ff
fXdxeP2PH3/+x/GLLx8+murfHx2z459/fLb++2e6//OXV4vbr5+srk8ePn+z
fzn7+7eXTw8fHx8ePjudL0/xRoRffvG/vvz+11niPl5evf7ll4fe0/Vr9uSz
cLb+4YfoMn59uHqepd+8WmfHP57+evPN4/Xq8Vd/n/nfHlmPP7tZHL5YZ2+u
nprWI3v9zewHPqzTxyf1QRF5PK9ly7jehPNZRNlC1fTZpVtYsgLhDdh7cfTw
7FhB3hevbk5vfvzqm+U/zt78rB8ffvfjmfh8cvhddALoOr38Ojj68hf74S+/
vH724/fRj4vNm+DrlfPLbP80ZOGb/St79f18cfb38OYb3f3q9vpheHh19Cg6
/jkM3jw17NfPL+I3afb1zRcPw0fTV/H6zbcPny3nF59/roy/0i0aPs+9zofC
b37jSYs0ketVLP6SvDFX3XKdyNzapcs85c25cQLKxUokhyR9fAHcmQL9yWy4
eSZdntRGQSZPM9kAeJMVGf9KpF7Kol4mdbpJB/lDRBn/rlEiozyDEYkQNSgY
5auIXMP8ctHkCShJjcWk+sGLYR4zpVg1gPh37dltVoVVDSHmhQgSE3FVyjMF
htKm2ksxKPW3397+XTPU317bu6e8aob3ga4qhL9ruiirF+Wrxg5/mRdsNHJ6
yqBtUy2CKcHECqHpBzxnVaIdLZdrkadKMoiS318hswTeYVYoynVE20jrGb+s
SFwO8Olvv8lCfFNKvuf3Qrx9ex8qKq2WKlA+KVCx4TkWZGdrnnmWjoZnkk+F
8iZ7ynP2MO6n3tdaXHP7mnlwec8zpp6XxqZn21Zg6IbpBPoUvnimbsJf3cIU
ZpZu+ZbrTB3HcizbMeGvBf+blg+/NryznanlWgb8b8A7fGZYHpTHGp5jw3fH
YlQbCuuWyT9CdShmTS0sSN8I8BQ+TR0b/kEDlo+98C3LdqMkCSODmbofmLHj
6GEahonrJbZj6K6fGv7UjBzDTowg8VLXstNUTwLb8gxDj/WpExmBDizphPrU
92MWTu3EcXXbs904sf0kTRw98QM39EzDNKaxBz3xAjPyIjfSPe8e4KvYBLi8
14mxHoSxgRjrQRgbiLEehLGBGOtBGGvCmOF9+lNpC4RTpEjjBmJ7H1DJkYjF
f6uVFRQ8v0BgBxMX/nxy+gyWqE+0/b1a6bdND/c10NaVBuuNvG2qJHzD1MOh
U8sGM0Pn1LJ2ZiiTYQ1LRboc4G7EFc970ogsXqmUMgfH2jNGNpzhu8bIOhj+
Xq2rL5vnNc9pTR0fRvFshIzooHjWKCNKfXx5X4Rr573fL5T8fc0C4RtMdaB9
3dR1IC1vmgZAZ57hGbYBT2x44njQ2cDWjameBk5os2BqxdMgnqZxGiZ+nAD+
Eju2jTRNgER1w/bNIDVsmHN/mthemNqmH5rx1EjNILSn2Ixpe4zoGZs1DNME
vNlTmDjX9TzfD4IwjKI4ThLAjQEzO3Vczw/CKIYHSRyFge8BadiWaTBdTwz4
FgMcPYVhpDri0tQt+BThJ8PVzTJjFzjIjTrkbGOvqUR1+weXLF0tKbaBBDb7
sFdGHtsWe2XksW2xV0YeTElaF4H76q28OPo67/90eU/X770sk95eHUr5TINm
49rfhR7CDtsZPYQdtjN6EDusSfTta90OdECavte2ruQ6MXCqAQj5pA0PEg2f
4BTJQhMsNcFiE4YFJ2rJdokr9WpoExWwT/rQim0yWQgzTPkTLDbBchO1YHuT
JVcuZ5amacpniY2YpvYVibe9xaok51VdmRiS+U7SSq+vK/jTuLaoaCMvMsgo
+wDWF8dr0jqaFqcuywug7RnTnmo1+wuQB7XKjK52vqT97GvFuSLN0PmMW1zG
/FSTDk02HNCJ2tzLMnQ6jaQZZELkYr4KuGx4Qf+tPbMOkPr9VjhklpjnXl5v
VLrUDRMEY4BdxZ7RluHP0MiBphmGy5isIhwzoFuCVHKN0Sst8DfbZaVl7dKw
n3ZZvzRsWml7UdiNP9DSCvz1lhf4pfH55gAzsqZVsq3MSKFVsl3MSNZvFbWr
iGyMVVRVEdn25BhP2S6KH9ueHJOUbU+OqnvFONCeKTeuaifLG34fN/q7znjU
TX4L8BNugL1HJ0x+mXTeL6gms39PYvFwIgGRQ6Y0nlgdz6wyHmFQPtAeL3ma
8ISuP6dM5fwGKe7EVAZLt9+pmw95H+jaLeUurLvz9/gW84hLkZeAqxwHuAv4
B/7awGsG/W8Bc+Jbg3gL/lo6ECSYevCd87oJJh58BZ4lTvbgrwG8C4wP3wz4
hwWxGRv+QmX8Ad6HOtgL27eMOPXMBBYgK0yNxArSaTD1PV03DSf2AmBjywos
17P8xI0dK/bTqemkseUAHUOv/TgIEgP41zH8yJ/6BtitiZu6KYiqJAFe8T0f
YCZxbE1j3Ql8y4mdJAYm82xo0AxG+HsQAZ0IYwMx1oMwNhBjPQhjAzHWgzDW
hLEPzd/TM7VsMDN0Ti1rZ4b34O/pHiMbzvBdY2QdDL+lv2cYxbMRMqKD4lmj
jNja32N8KP4eUKsAMkx1YBhT1zNCx3Nt+KdbgZmaqQPPQB2LXd2JnKmZgL6W
OiyGF47ji0cmfII51Ln2kOsRd+w2Mj66jUo/H91GH91GH91GH91GNbdRnqNG
8zmvjxDtzOkQ7d0OokqkNAzVb+A/0O1WMxyRcXDvcr2+Ptjfl3veIKv20xl8
CGeLe2UUVTGttiuy9ADEPbNWbBvH2Ltyu92Zl2xqtnjJfHu0fvKn95K16ies
Q0Hp1U8YftzR22bpxrvztjXo9GwrI17o9GwXI57126TtCjobY5NWFXS2PVn/
ub1tHWo3256soduSrFWvndnitdsruez21Bgm/PIaQ2u1L2bJPM7+fJFU23n7
SqOgQCzFP5dp+TUU+c3RCHP5ejXJ3wAYfkkwnRGEt0WkOFdc8DkUulOfngv0
aDncRw5fuL8cXe/A+sC75HJHSUGOdhP96lDCJk86CgjXsoivPQfMeBdY3aPX
FgoD+M699p6F4FCuoPxwoCGffPZQwzGwF2kQBa7uAv1ZDNg5ceIgARr09cCx
I+DaIPSN0A9DN7USH1hWx7wqsWP6MDDop+EEnqvDoGwTitvAuzFzpl7ogTCZ
Gt40sczYSyInTUJjGrmmO40dwAeIGMc2PBsZeIRPD4VYJ8LYQIz1IIwNxFgP
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
n6T8faOC00TpDWrN/wPhYw423LkCAA==

-->

</rfc>

