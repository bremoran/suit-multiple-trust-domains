<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-moran-suit-manifest-05" category="info">

  <front>
    <title abbrev="Firmware Manifest Format">SUIT CBOR manifest serialisation format</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="July" day="08"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="Architecture"/>.</t>

<t>The SUIT manifest is heavily optimised for consumption by constrained devices. This means that it is not constructed as a conventional descriptive document. Instead, of describing what an update IS, it describes what a recipient should DO.</t>

<t>While the SUIT manifest is informed by and optimised for firmware update use cases, there is nothing in the <xref target="Information"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
</list></t>

</section>
<section anchor="distributing-firmware" title="Distributing firmware">
<t>Distributing firmware in a multi-party environment is a difficult operation. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="Architecture"/>.</t>

</section>
<section anchor="workflow-of-a-device-applying-a-firmware-update" title="Workflow of a device applying a firmware update">
<t>The manifest is designed to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest</t>
  <t>Resolve dependencies</t>
  <t>Fetch payload(s)</t>
  <t>Install payload(s)</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s)</t>
  <t>Load image(s)</t>
  <t>Run image(s)</t>
</list></t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="suit-manifest-goals" title="SUIT manifest goals">
<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="numbers">
  <t>Meet the requirements defined in <xref target="Information"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-overview" title="SUIT manifest design overview">
<t>In order to provide flexible behaviour to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behaviour of a Recipient device. Behaviour is encoded as a specialised byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialised byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies behaviours in a linearised form, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behaviour by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that only manifests authenticated by the appropriate identity have access to operate on a component.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="manifest-design-evaluation" title="Manifest Design Evaluation">
<t>To evaluate this design, it is compared to the goals stated above.</t>

<t>Goal evaluation:</t>

<t><list style="numbers">
  <t>Each command and condition is anchored to a manifest information element in <xref target="Information"/></t>
  <t>The use of a byte code encourages flat encoding and reduces nesting depth. This promotes a simple encoding.</t>
  <t>The encoded information closely matches the operations that a device will perform, making the format easy to process.</t>
  <t>Encoding efficiency exceeds 50% when compared to raw data.</t>
  <t>Tooling will be required to reason about the manifest.</t>
  <t>The core operations used by most update and trusted execution operations are represented in the byte code. The use cases listed in <xref target="Information"/> are enabled.</t>
  <t>Registration of new standard byte code identifiers enables extension in a comprehensible way.</t>
</list></t>

<t>The manifest described by this document meets the stated goals. Meeting goal 5–comprehensible by intermediate systems–will require additional tooling or a division of metadata.</t>

</section>
<section anchor="severable-elements" title="Severable Elements">
<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

</section>
<section anchor="conventions" title="Conventions">
<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

</section>
<section anchor="payloads" title="Payloads">
<t>Payloads can take many forms, for example, binary, hex, s-record, elf, binary diff, PEM certificate, CBOR Web Token, serialised configuration. These payloads fall into two broad categories: those that require installation-time unpacking and those that do not. Binary, PEM certificate, and CBOR Web Token do not require installation-time unpacking. Hex, s-record, and serialised configuration require installation-time unpacking. Elf may or may not require unpacking depending on the target.</t>

<t>Some payloads cannot be directly converted to a writable binary stream. Hex, s-record, and elf may contain gaps and they have no guarantee of monotonic increase of address, which makes pre-processing them into a binary stream difficult on constrained platforms. Serialised configuration may be unpacked into a configuration database, which makes it impossible to preprocess into a binary stream, suitable for direct writing.</t>

<t>Where a specialised unpacking algorithm is needed, a digest is not always calculable over an installed payload. For example, an elf, s-record or hex file may contain gaps that can contain any data, while not changing whether or not an installed payload is valid. Serialised configuration may update only some device data rather than all of it. This means that the digest cannot always be calculated over an installed payload when a specialised installer is used.</t>

<t>This presents two problems for the manifest: first, it must indicate that a specialised installer is needed and, second, it cannot provide a hash of the payload that is checkable after installation. These two problems are resolved in two ways:</t>

<t><list style="numbers">
  <t>Payloads that need a specialised installer must indicate this in suit-payload-info-unpack.</t>
  <t>Payloads that need specialised verification must indicate this in the SUIT_Parameter_Image_Digest by indicating a SUIT_Digest algorithm that correctly validates their information.</t>
</list></t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">
<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Information shared by all command sequences
          <list style="numbers">
              <t>List of dependencies</t>
              <t>List of payloads</t>
              <t>List of payloads in dependencies</t>
              <t>Common list of conditions, directives</t>
            </list></t>
          <t>Dependency resolution Reference or list of conditions, directives</t>
          <t>Payload fetch Reference or list of conditions, directives</t>
          <t>Installation Reference or list of conditions, directives</t>
          <t>Verification conditions/directives</t>
          <t>Load conditions/directives</t>
          <t>Run conditions/directives</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Dependency resolution conditions/directives</t>
      <t>Payload fetch conditions/directives</t>
      <t>Installation conditions/directives</t>
      <t>Text</t>
      <t>COSWID / Reference</t>
      <t>Intermediate Certificate(s) / CWTs</t>
      <t>Inline Payload(s)</t>
    </list></t>
</list></t>

<section anchor="outer-wrapper" title="Outer wrapper">
<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the outer wrapper are contained in bstr objects. Wherever the manifest references an object in the outer wrapper, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the wrapper is below</t>

<figure><artwork><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper   => bstr .cbor
                                     SUIT_Authentication_Wrapper / nil,
    $SUIT_Manifest_Wrapped,
    ? suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => bstr .cbor SUIT_Command_Sequence,
    ? suit-text-external          => bstr .cbor SUIT_Text_Info,
    ? suit-coswid-external        => bstr .cbor COSWID
}

SUIT_Authentication_Wrapper = [ + (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                  COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)
]]></artwork></figure>

<t>All elements of the outer wrapper must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as  COSE_Mac_Tagged or COSE_Sign_Tagged blocks. The Manifest is authenticated by these blocks in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come first in the SUIT_Outer_Wrapper, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Outer_Wrapper that begins with any element other than a suit-authentication-wrapper.</t>

<t>A manifest that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The outer wrapper MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the outer wrapper contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text-info              => Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => Digest / bstr .cbor COSWID
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor [ + SUIT_Dependency ],
    ? suit-components             => bstr .cbor [ + SUIT_Component_Identifier ],
    ? suit-dependency-components  => bstr .cbor [ + SUIT_Component_Reference ],
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by recipient devices. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Outer_Wrapper so that a recipient can easily identify the correct data in the outer wrapper.</t>

<t>The suit-manifest-version indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text-info is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behaviour of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. Parameters MUST only be:</t>

<figure><artwork><![CDATA[
1. Integers
2. Byte strings
3. Booleans
]]></artwork></figure>

<t>This allows reduction of manifest size and replacement of parameters from one manifest to the next. Byte strings MAY contain CBOR-encoded objects.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Parameter Code</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Default</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>boolean</c>
      <c>True</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>2</c>
      <c>boolean</c>
      <c>False</c>
      <c>Command Segment</c>
      <c>Coerce Condition Failure</c>
      <c>Coerces the success code of a command segment to success even when aborted due to a condition failure.</c>
      <c>3</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>4</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>5</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>6</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>7</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>8</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>A SUIT_Compression_Info object</c>
      <c>9</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>A SUIT_Unpack_Info object</c>
      <c>10</c>
      <c>uint</c>
      <c>nil</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>11</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>12</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>24</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI List</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>25</c>
      <c>boolean</c>
      <c>False</c>
      <c>Component/Dependency</c>
      <c>URI List Append</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>nint</c>
      <c>int/bstr</c>
      <c>nil</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularisation and division of responsibility within a pull parser. The same consideration does not apply to Conditions and Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelise their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametercoerceconditionfailure" title="SUIT_Parameter_Coerce_Condition_Failure">

<t>When executing a command sequence inside SUIT_Run_Sequence and a condition failure occurs, the manifest processor aborts the sequence. If Coerce Condition Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Coerce_Condition_Failure is scoped to the enclosing SUIT_Directive_Run_Sequence. Its value is discarded when SUIT_Directive_Run_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr</t>

</section>
<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-coerce-condition-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => bstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => bstr .cbor SUIT_Component_Identifier)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_URI_List)
SUIT_Parameters //= (suit-parameter_custom => int/bool/bstr)

SUIT_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf
]]></artwork></figure>

</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition and directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block</t>
</list></t>

<t>Argument blocks are defined for each type of command.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behaviour.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditons of any directive or series of directives, depending on where they are placed in the list. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Argument Type</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>nil</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>nil</c>
      <c>3</c>
      <c>Image Match</c>
      <c>nil</c>
      <c>4</c>
      <c>Use Before</c>
      <c>Unsigned Integer timestamp</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>Unsigned Integer</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>nil</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>nil</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>Unsigned Integer</c>
      <c>27</c>
      <c>Update Authorised</c>
      <c>Integer</c>
      <c>28</c>
      <c>Version</c>
      <c>List of Integers</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>bstr</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Components list. If no digest is specified and the component is not present in the Components list, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. One argument is required, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorised" title="suit-condition-update-authorised">

<t>Request Authorisation from the application and fail if not authorised. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorised is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater</t>
  <t>Greater or Equal</t>
  <t>Equal</t>
  <t>Lesser or Equal</t>
  <t>Lesser</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occured. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3]</t>
  <t>1.2-rc3 = [1,2,-1,3]</t>
  <t>1.2-beta = [1,2,-2]</t>
  <t>1.2-alpha = [1,2,-3]</t>
  <t>1.2-alpha4 = [1,2,-3,4]</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to the system that evaluates the condition matching that integer.
SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behaviour of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>31</c>
      <c>Run with Arguments</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Coerce on Condition Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several suit-directive-run-sequence one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure is initialised to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behaviour of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behaviour of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behaviour of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimisation: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behaviour. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behaviour of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behaviour of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorisation</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
</section>
<section anchor="dependency-processing" title="Dependency processing">

<t>Dependencies need careful handling on constrained systems. A dependency tree that is too deep can cause recursive handling to overflow stack space. Systems that parse all dependencies into an object tree can easily fill up available memory. Too many dependencies can overrun available storage space.</t>

<t>The dependency handling system in this document is designed to address as many of these problems as possible.</t>

<t>Dependencies MAY be addressed in one of three ways:</t>

<t><list style="numbers">
  <t>Iterate by component</t>
  <t>Iterate by manifest</t>
  <t>Out-of-order</t>
</list></t>

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. This, however consumes significant processing power.</t>

<t>Alternatively, it is possible for a device with sufficient memory to accumulate all parameters for all listed component IDs. This will naturally consume more memory, but it allows the device to process the manifests in a single pass.</t>

<t>It is expected that the simplest and most power sensitive devices will use option 2, with a fixed maximum number of components.</t>

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating conditional sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper => bstr .cbor SUIT_Authentication_Wrapper / nil,
    suit-manifest               => bstr .cbor SUIT_Manifest,
    suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    suit-install                => bstr .cbor SUIT_Command_Sequence,
    suit-text                   => bstr .cbor SUIT_Text_Map,
    suit-coswid                 => bstr .cbor concise-software-identity
}
suit-authentication-wrapper = 1
suit-manifest = 2
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-text = 13
suit-coswid = 14

SUIT_Authentication_Wrapper = [ * (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)]


COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bytes,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha256-128
suit-digest-algorithm-ids /= algorithm-id-sha256-120
suit-digest-algorithm-ids /= algorithm-id-sha256-96
suit-digest-algorithm-ids /= algorithm-id-sha256-64
suit-digest-algorithm-ids /= algorithm-id-sha256-32
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    ? suit-dependencies           => [ + SUIT_Dependency ],
    ? suit-components             => [ + SUIT_Component ],
    ? suit-dependency-components  => [ + SUIT_Component_Reference ],
    ? suit-common                 => bstr .cbor SUIT_Command_Sequence,
    ? suit-dependency-resolution  => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => SUIT_Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text-info              => SUIT_Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => SUIT_Digest / bstr .cbor concise-software-identity
}

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-dependencies = 3
suit-components = 4
suit-dependency-components = 5
suit-common = 6
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text-info = 13
suit-coswid = 14

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

suit-dependency-digest = 1
suit-dependency-prefix = 2

SUIT_Component_Identifier =  [* bstr]

SUIT_Component = {
    suit-component-identifier => SUIT_Component_Identifier,
    ? suit-component-size => uint,
    ? suit-component-digest => SUIT_Digest,
}

suit-component-identifier = 1
suit-component-size = 2
suit-component-digest = 3

SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}

suit-component-dependency-index = 2

SUIT_Command_Sequence = [ + { SUIT_Condition // SUIT_Directive // SUIT_Command_Custom} ]

SUIT_Command_Custom = (nint => bstr)

SUIT_Condition //= (SUIT_Condition_Vendor_Identifier => RFC4122_UUID) ; SUIT_Condition_Vendor_Identifier
SUIT_Condition //= (2 => RFC4122_UUID) ; SUIT_Condition_Class_Identifier
SUIT_Condition //= (3 => RFC4122_UUID) ; SUIT_Condition_Device_Identifier
SUIT_Condition //= (4 => SUIT_Digest) ; SUIT_Condition_Image_Match
SUIT_Condition //= (5 => SUIT_Digest) ; SUIT_Condition_Image_Not_Match
SUIT_Condition //= (6 => uint) ; SUIT_Condition_Use_Before
SUIT_Condition //= (7 => uint) ; SUIT_Condition_Minimum_Battery
SUIT_Condition //= (8 => int) ;  SUIT_Condition_Update_Authorised
SUIT_Condition //= (9 => SUIT_Condition_Version_Argument) ; SUIT_Condition_Version
SUIT_Condition //= (10 => uint) ; SUIT_Condition_Component_Offset
SUIT_Condition //= (nint => bstr) ; SUIT_Condition_Custom

SUIT_Condition_Vendor_Identifier = 1
RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser

SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive //= (11 => uint/bool) ; SUIT_Directive_Set_Component_Index
SUIT_Directive //= (12 => uint/bool) ; SUIT_Directive_Set_Manifest_Index
SUIT_Directive //= (13 => bstr .cbor SUIT_Command_Sequence) ; SUIT_Directive_Run_Sequence
SUIT_Directive //= (14 => bstr .cbor SUIT_Command_Sequence) ; SUIT_Directive_Run_Sequence_Conditional
SUIT_Directive //= (15 => nil) ; SUIT_Directive_Process_Dependency
SUIT_Directive //= (16 => {+ SUIT_Parameters}) ; SUIT_Directive_Set_Parameters
SUIT_Directive //= (19 => {+ SUIT_Parameters}) ; SUIT_Directive_Override_Parameters
SUIT_Directive //= (20 => nil/bstr) ; SUIT_Directive_Fetch
SUIT_Directive //= (21 => nil/bstr) ; SUIT_Directive_Copy
SUIT_Directive //= (22 => nil/bstr) ; SUIT_Directive_Run
SUIT_Directive //= (23 => { + SUIT_Wait_Events }) ; SUIT_Directive_Wait

SUIT_Wait_Events //= (1 => SUIT_Wait_Event_Argument_Authorisation)
SUIT_Wait_Events //= (2 => SUIT_Wait_Event_Argument_Power)
SUIT_Wait_Events //= (3 => SUIT_Wait_Event_Argument_Network)
SUIT_Wait_Events //= (4 => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (5 => SUIT_Wait_Event_Argument_Time)
SUIT_Wait_Events //= (6 => SUIT_Wait_Event_Argument_Time_Of_Day)
SUIT_Wait_Events //= (7 => SUIT_Wait_Event_Argument_Day_Of_Week)


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_Parameters //= (1 => bool) ; SUIT_Parameter_Strict_Order
SUIT_Parameters //= (2 => bool) ; SUIT_Parameter_Coerce_Condition_Failure
SUIT_Parameters //= (3 => bstr) ; SUIT_Parameter_Vendor_ID
SUIT_Parameters //= (4 => bstr) ; SUIT_Parameter_Class_ID
SUIT_Parameters //= (5 => bstr) ; SUIT_Parameter_Device_ID
SUIT_Parameters //= (6 => bstr .cbor SUIT_URI_List) ; SUIT_Parameter_URI_List
SUIT_Parameters //= (7 => bstr .cbor SUIT_Encryption_Info) ; SUIT_Parameter_Encryption_Info
SUIT_Parameters //= (8 => bstr .cbor SUIT_Compression_Info) ; SUIT_Parameter_Compression_Info
SUIT_Parameters //= (9 => bstr .cbor SUIT_Unpack_Info) ; SUIT_Parameter_Unpack_Info
SUIT_Parameters //= (10 => bstr .cbor SUIT_Component_Identifier) ; SUIT_Parameter_Source_Component
SUIT_Parameters //= (11 => bstr .cbor SUIT_Digest) ; SUIT_Parameter_Image_Digest
SUIT_Parameters //= (12 => uint) ; SUIT_Parameter_Image_Size
SUIT_Parameters //= (nint => int/bool/bstr) ; SUIT_Parameter_Custom

SUIT_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}
suit-compression-algorithm = 1
suit-compression-parameters = 2

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}
suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}
]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>None of these examples include authentication. This is provided via RFC 8152 <xref target="RFC8152"/>, and is omitted for clarity.</t>

<section anchor="example-0" title="Example 0:">

<t>Secure boot only.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 1,
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : None
    / manifest / 3 : h'a40101020103583ca2024c818245466c6173684300340104'
                     h'582a8213a20b582000112233445566778899aabbccddeeff'
                     h'0123456789abcdeffedcba98765432100c1987d00c47860c'
                     h'0003f617f6' \
    {
        / structure-version / 1 : 1
        / sequence-number / 2 : 1
        / common / 3 : h'a2024c818245466c6173684300340104582a8213a20b58'
                       h'2000112233445566778899aabbccddeeff0123456789ab'
                       h'cdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common / 4 : h'8213a20b582000112233445566778899aabbccddee'
                           h'ff0123456789abcdeffedcba98765432100c1987d0'
            \ [
                / set-vars / 19, {
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
            ],
        },
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 83</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f603584da40101020103583ca2024c818245466c6173684300340104582a8213a20b
582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c19
87d00c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-1" title="Example 1:">

<t>Simultaneous download and installation of payload.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 2,
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : None
    / manifest / 3 : h'a40101020203583ca2024c818245466c6173684300340104'
                     h'582a8213a20b582000112233445566778899aabbccddeeff'
                     h'0123456789abcdeffedcba98765432100c1987d009582586'
                     h'0c0013a106781b687474703a2f2f6578616d706c652e636f'
                     h'6d2f66696c652e62696e15f6' \
    {
        / structure-version / 1 : 1
        / sequence-number / 2 : 2
        / common / 3 : h'a2024c818245466c6173684300340104582a8213a20b58'
                       h'2000112233445566778899aabbccddeeff0123456789ab'
                       h'cdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common / 4 : h'8213a20b582000112233445566778899aabbccddee'
                           h'ff0123456789abcdeffedcba98765432100c1987d0'
            \ [
                / set-vars / 19, {
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin
            },
            / fetch / 21, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 114</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f603586ca40101020203583ca2024c818245466c6173684300340104582a8213a20b
582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c19
87d0095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c65
2e62696e15f6
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2:">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 3,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45",
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : None
    / manifest / 3 : h'a501010203035864a2024c818245466c6173684300340104'
                     h'58528613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04'
                     h'501492af1425695e48bf429b2d51f2ab450b582000112233'
                     h'445566778899aabbccddeeff0123456789abcdeffedcba98'
                     h'765432100c1987d001f602f6095825860c0013a106781b68'
                     h'7474703a2f2f6578616d706c652e636f6d2f66696c652e62'
                     h'696e15f60c47860c0003f617f6' \
    {
        / structure-version / 1 : 1
        / sequence-number / 2 : 3
        / common / 3 : h'a2024c818245466c617368430034010458528613a40350'
                       h'fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425'
                       h'695e48bf429b2d51f2ab450b5820001122334455667788'
                       h'99aabbccddeeff0123456789abcdeffedcba9876543210'
                       h'0c1987d001f602f6' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common / 4 : h'8613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe'
                           h'04501492af1425695e48bf429b2d51f2ab450b5820'
                           h'00112233445566778899aabbccddeeff0123456789'
                           h'abcdeffedcba98765432100c1987d001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe'
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45'
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 163</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f603589da501010203035864a2024c818245466c617368430034010458528613a403
50fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab450b
582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c19
87d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-3" title="Example 3:">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 4,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : None
    / manifest / 3 : h'a50101020403589ba20254828245466c6173684300340182'
                     h'4352414d4200040458818e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b582000112233445566778899aabbccddeeff'
                     h'0123456789abcdeffedcba98765432100c1987d00c0113a2'
                     h'0b582000112233445566778899aabbccddeeff0123456789'
                     h'abcdeffedcba98765432100c1987d001f602f6095825860c'
                     h'0013a106781b687474703a2f2f6578616d706c652e636f6d'
                     h'2f66696c652e62696e15f60c518e0c0003f60c0113a10a00'
                     h'15f603f617f6' \
    {
        / structure-version / 1 : 1
        / sequence-number / 2 : 4
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458818e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b582000112233445566778899aabbccddeeff01234567'
                       h'89abcdeffedcba98765432100c1987d00c0113a20b5820'
                       h'00112233445566778899aabbccddeeff0123456789abcd'
                       h'effedcba98765432100c1987d001f602f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe'
                           h'04501492af1425695e48bf429b2d51f2ab450c0013'
                           h'a20b582000112233445566778899aabbccddeeff01'
                           h'23456789abcdeffedcba98765432100c1987d00c01'
                           h'13a20b582000112233445566778899aabbccddeeff'
                           h'0123456789abcdeffedcba98765432100c1987d001'
                           h'f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe'
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45'
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'8e0c0003f60c0113a10a0015f603f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0
            },
            / fetch / 21, None,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 228</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60358dea50101020403589ba20254828245466c61736843003401824352414d4200
040458818e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100c1987d00c0113a20b582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100c1987d001f602f6095825860c0013a106781b
687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c518e0c0003f6
0c0113a10a0015f603f617f6
]]></artwork></figure>

</section>
<section anchor="example-4" title="Example 4:">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 5,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0,
                "compression-info": {
                    "algorithm": "gzip"
                }
            }
        },
        { "directive-copy": null }
    ],
    "run-image": [
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : None
    / manifest / 3 : h'a60101020503589ba20254828245466c6173684300340182'
                     h'4352414d4200040458818e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b582000112233445566778899aabbccddeeff'
                     h'0123456789abcdeffedcba98765432100c1987d00c0113a2'
                     h'0b58200123456789abcdeffedcba98765432100011223344'
                     h'5566778899aabbccddeeff0c1987d001f602f6095825860c'
                     h'0013a106781b687474703a2f2f6578616d706c652e636f6d'
                     h'2f66696c652e62696e15f60b508a0c0003f60c0113a20841'
                     h'f60a0016f60c458403f617f6' \
    {
        / structure-version / 1 : 1
        / sequence-number / 2 : 5
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458818e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b582000112233445566778899aabbccddeeff01234567'
                       h'89abcdeffedcba98765432100c1987d00c0113a20b5820'
                       h'0123456789abcdeffedcba987654321000112233445566'
                       h'778899aabbccddeeff0c1987d001f602f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe'
                           h'04501492af1425695e48bf429b2d51f2ab450c0013'
                           h'a20b582000112233445566778899aabbccddeeff01'
                           h'23456789abcdeffedcba98765432100c1987d00c01'
                           h'13a20b58200123456789abcdeffedcba9876543210'
                           h'00112233445566778899aabbccddeeff0c1987d001'
                           h'f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe'
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45'
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 :h'0123456789abcdeffedcba987654321000'
                                   h'112233445566778899aabbccddeeff',
                    / size / 12 : 34768
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8a0c0003f60c0113a20841f60a0016f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / unknown / 8 : h'f6'
                / source-component / 10 : 0
            },
            / copy / 22, None,
        ],
        / run-image / 12 : h'8403f617f6' \ [
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 234</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60358e4a60101020503589ba20254828245466c61736843003401824352414d4200
040458818e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100c1987d00c0113a20b58200123456789abcdeffedcba98765432
1000112233445566778899aabbccddeeff0c1987d001f602f6095825860c0013a106781b
687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60b508a0c0003f6
0c0113a20841f60a0016f60c458403f617f6
]]></artwork></figure>

</section>
<section anchor="example-5" title="Example 5:">

<t>Compatibility test, download, installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 6,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "ext-Flash",
                78848
            ],
            [
                "Flash",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 1 },
        { "condition-not-image": null },
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 1 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : None
    / manifest / 3 : h'a60101020603589ea202578282467b1b4595ab2143003401'
                     h'8245466c6173684200040458818e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582000112233445566778899aabbcc'
                     h'ddeeff0123456789abcdeffedcba98765432100c1987d00c'
                     h'0113a20b58200123456789abcdeffedcba98765432100011'
                     h'2233445566778899aabbccddeeff0c1987d001f602f60958'
                     h'25860c0013a106581b687474703a2f2f6578616d706c652e'
                     h'636f6d2f66696c652e62696e15f60b528e0c011819f60c00'
                     h'03f60c0113a10a0015f60c47860c0103f617f6' \
    {
        / structure-version / 1 : 1
        / sequence-number / 2 : 6
        / common / 3 : h'a202578282467b1b4595ab21430034018245466c617368'
                       h'4200040458818e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b582000112233445566778899aabbccddeeff01'
                       h'23456789abcdeffedcba98765432100c1987d00c0113a2'
                       h'0b58200123456789abcdeffedcba987654321000112233'
                       h'445566778899aabbccddeeff0c1987d001f602f6' \ {
            / components / 2 : h'8282467b1b4595ab21430034018245466c6173'
                               h'68420004' \
            [
                [h'7b1b4595ab21', h'003401'],
                [h'466c617368', h'0004'],
            ],
            / common / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe'
                           h'04501492af1425695e48bf429b2d51f2ab450c0013'
                           h'a20b582000112233445566778899aabbccddeeff01'
                           h'23456789abcdeffedcba98765432100c1987d00c01'
                           h'13a20b58200123456789abcdeffedcba9876543210'
                           h'00112233445566778899aabbccddeeff0c1987d001'
                           h'f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe'
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45'
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 :h'0123456789abcdeffedcba987654321000'
                                   h'112233445566778899aabbccddeeff',
                    / size / 12 : 34768
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106581b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : h'687474703a2f2f6578616d706c652e636f6d2f66'
                            h'696c652e62696e'
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8e0c011819f60c0003f60c0113a10a0015f6' \ [
            / set-component-index / 12, 1,
            / condition-not-image / 25, None,
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0103f617f6' \ [
            / set-component-index / 12, 1,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 241</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60358eba60101020603589ea202578282467b1b4595ab21430034018245466c6173
684200040458818e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af142569
5e48bf429b2d51f2ab450c0013a20b582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d00c0113a20b58200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0c1987d001f602f6095825860c0013a1
06581b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60b528e0c
011819f60c0003f60c0113a10a0015f60c47860c0103f617f6
]]></artwork></figure>

</section>
<section anchor="example-6" title="Example 6:">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 7,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 76834
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "Flash",
                132096
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file1.bin"
            }
        },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file2.bin"
            }
        },
        { "directive-set-component": true },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": true },
        { "condition-image": null },
        { "directive-set-component": 0 },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : None
    / manifest / 3 : h'a5010102070358a0a20257828245466c6173684300340182'
                     h'45466c617368430004020458838e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b582000112233445566778899aabbcc'
                     h'ddeeff0123456789abcdeffedcba98765432100c1987d00c'
                     h'0113a20b58200123456789abcdeffedcba98765432100011'
                     h'2233445566778899aabbccddeeff0c1a00012c2201f602f6'
                     h'09584b8c0c0013a106781c687474703a2f2f6578616d706c'
                     h'652e636f6d2f66696c65312e62696e0c0113a106781c6874'
                     h'74703a2f2f6578616d706c652e636f6d2f66696c65322e62'
                     h'696e0cf515f60c49880cf503f60c0017f6' \
    {
        / structure-version / 1 : 1
        / sequence-number / 2 : 7
        / common / 3 : h'a20257828245466c617368430034018245466c61736843'
                       h'0004020458838e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b582000112233445566778899aabbccddeeff01'
                       h'23456789abcdeffedcba98765432100c1987d00c0113a2'
                       h'0b58200123456789abcdeffedcba987654321000112233'
                       h'445566778899aabbccddeeff0c1a00012c2201f602f6'
        \ {
            / components / 2 : h'828245466c617368430034018245466c617368'
                               h'43000402' \
            [
                [h'466c617368', h'003401'],
                [h'466c617368', h'000402'],
            ],
            / common / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe'
                           h'04501492af1425695e48bf429b2d51f2ab450c0013'
                           h'a20b582000112233445566778899aabbccddeeff01'
                           h'23456789abcdeffedcba98765432100c1987d00c01'
                           h'13a20b58200123456789abcdeffedcba9876543210'
                           h'00112233445566778899aabbccddeeff0c1a00012c'
                           h'2201f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe'
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45'
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 :h'00112233445566778899aabbccddeeff01'
                                   h'23456789abcdeffedcba9876543210',
                    / size / 12 : 34768
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 :h'0123456789abcdeffedcba987654321000'
                                   h'112233445566778899aabbccddeeff',
                    / size / 12 : 76834
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'8c0c0013a106781c687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c65312e62696e0c0113a1'
                            h'06781c687474703a2f2f6578616d706c652e636f'
                            h'6d2f66696c65322e62696e0cf515f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file1.bin
            },
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file2.bin
            },
            / set-component-index / 12, True,
            / fetch / 21, None,
        ],
        / run-image / 12 : h'880cf503f60c0017f6' \ [
            / set-component-index / 12, True,
            / condition-image / 3, None,
            / set-component-index / 12, 0,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 264</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f603590101a5010102070358a0a20257828245466c617368430034018245466c6173
68430004020458838e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425
695e48bf429b2d51f2ab450c0013a20b582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100c1987d00c0113a20b58200123456789abcdeffedcba
987654321000112233445566778899aabbccddeeff0c1a00012c2201f602f609584b8c0c
0013a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e0c01
13a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e0cf515
f60c49880cf503f60c0017f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Commands</t>
  <t>standard Parameters</t>
  <t>standard Algorithm identifiers</t>
  <t>standard text values</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="Architecture"/> and in <xref target="Information"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC6920" target='https://www.rfc-editor.org/info/rfc6920'>
<front>
<title>Naming Things with Hashes</title>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='D.' surname='Kutscher' fullname='D. Kutscher'><organization /></author>
<author initials='C.' surname='Dannewitz' fullname='C. Dannewitz'><organization /></author>
<author initials='B.' surname='Ohlman' fullname='B. Ohlman'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<author initials='P.' surname='Hallam-Baker' fullname='P. Hallam-Baker'><organization /></author>
<date year='2013' month='April' />
<abstract><t>This document defines a set of ways to identify a thing (a digital object in this case) using the output from a hash function.  It specifies a new URI scheme for this purpose, a way to map these to HTTP URLs, and binary and human-speakable formats for these names. The various formats are designed to support, but not require, a strong link to the referenced object, such that the referenced object may be authenticated to the same degree as the reference to it.  The reason for this work is to standardise current uses of hash outputs in URLs and to support new information-centric applications and other uses of hash outputs in protocols.</t></abstract>
</front>
<seriesInfo name='RFC' value='6920'/>
<seriesInfo name='DOI' value='10.17487/RFC6920'/>
</reference>


<reference anchor="Architecture" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02">
  <front>
    <title>A Firmware Update Architecture for Internet of Things Devices</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02"/>
</reference>
<reference anchor="Information" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02">
  <front>
    <title>Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
vn8Tvgka5T5wxbylPna9hT6+CBniVoT4JBHi9oitH7HOCdvIrAxO/S+MrmBd
Q7QmmZjUcCqEi56GCSnkmMHgBH1g3WRVAoVvoWBHkr670lGIOa2L1AjO3rbs
mC919K1V0ZA1OEzOVg/sMmSYms222T/rUEO6WJWeYUE2vMTyiKuuAS97kOdV
/ZY9KQ2InmRyGum8NBNtUgv/qK7UhUlkjSzVzRR2TekgQA5nX/RUqkBvhqvL
pd/k4dsUX8OnYrVj1FimPupWVfeA5km/T6WJjcJe0bUooopqm8TUiufcRewh
M6YrbS3DoQPcsqigoDbzTmKWX0qUnnPpFJVilPhzbPNTUuSm2o6ZDWOchWvn
G8vdRhbRb76Rnr75xo4Ocm5RbZfPgwb9K75hjQV2/Y+hddW2pMVapkr5QiPs
jQmoIp24KnK+vgQjZaiEnURfSNUk2QLqImQJMupxDmPizgu5bZWIiQzr6eqY
Eiax4sT1+9enR+W45KVMaNe1vNyFM5VGL/fAKCOR44RXN8zk6FLNp0yOp9pI
Vru+A8kJLxYXizLnkQATcn67bEEXPKhWXEBIQA82RgdoQ7jKJdQCmb5qHhkR
4LAgAr0s8iVbsi4peZUIi6vr90wBVj01IuHKCQK0UmAo7IH9zVx+VFwLdMuM
ZcH0gXGijwGO8iYomFFI9depchY9ysT4Zvo/e8R3ThntVJgR1TDKxPxM5iyd
RvpEIlzkalzOXK2045P6YqMlMiJfX4proVfCRNHlGWbFcoV2jdsAry2aRhP0
dJDJWCKPnVKbBukOvSmckl28WGJosiSU4/0xFh/y1J3k2HAu0ythQj2TG2eC
QyIKUdKEKgg2Ubfhg5Wy05NhFTQyur5BAgottmpbgMWqiFZ5XVW3jQcj+5Vc
L+O6ckgKfRkcBSW1eXUQlBOkJZ2jQdBsFav+PlMIHrxUDwsv1kLTXqVOfXUV
mo7Jdm7pllWm2v1yxcXK5ENaKnKJvBsIq5JHUj6Hgqf16qIHR8sb9qo59dk5
VlF7ZigqRgsQfOOqNVcjRBjTuYpQ0Q8kGkVzIgxbCeoxKCoSwoRGkSeU4j0k
ZqH+al+7hJ/hzpen6Al+DVvsAfsr0B8uF8Yoj7FOCaYABuPTfjGdIrtotmD3
sopkaIzwUI/jeV45Yxlh9MIzrOO3nIcPyFe08sLHkITXvOZ86TXVi/7ZfHBM
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
Y7NfxOx3YH3hMfuto3qXuNfZxjbSfScDCVpEOqkvQuDrRrQVza0B1JX6Nxi+
tjF6YYdrAHUzeHUxTXZa+I0GIVz+z2fNlG+5f/kO4G9r8+xIip/H5knkuMlU
2ZEdb7DAbbK82WS5AdAnHxEaR10Pik0j+j2ba712z85WsK0w9NdhE27HzfB3
j5tbe/lfmb3cK0zWZMZfxYbeedd1QqpopRogfroXNtTT7ojccja/nkdgNDpu
8wjEybbaqC2eBV20zi7KZeCXsbdV3qJx0F1cXg826B78u94BEWwXrNiuygVt
26/hlTj4HF4JfBwnqiLEb8hJcXjrpLh1UtjtfnNOik3z3IioTZi+dVI0+2iB
deuk2OykoPLyf3Veiuaq79j1kbDyfftu1sVvcBWwRNBGFr1xASb5YrWlk+i3
6R45EoH08NY90gboc7tHNoHT42wPtvaL5l+ee2R8uHcc1TTa0d7xQZsxhSyD
KHEfUUTQ4fHBL+MqObS+uHWV/AVdJZ33Ao51DaDNu+HWVXLrKtnKVfKxCQSC
o01TunWV3LpKfqOuko1MuyNuNshjt66Sdcj7fblKjNYrZIiY9EqWRoD8bXpK
ltnbLL/BU/uYGbVH7PlofwqqtYjsBhVv9EsdrPM/fYlumP3WkgvJwbZa71+P
G2Yt6w7qAvc2OubncsM4KmPg39muathwyRy2uGSUF6b35VeVOLr1q9z6Vex2
t36V35lfBS98/Zy+lTZYt94VC38f5V0ZtnpXsrz6OA/Ll++w+Xwo/4ism3aM
/xZdL5wtnJAQeo+E0KN74yGciPcPo/FoqOtI+DkmmiwdqXWjA6bdrbBlknE7
oC1l2lZA3bOTWdZd48PpbtnDcbY7OrYUjtsBOVLz4UYHTHtVmfXS9IiCmobD
4+F9UpTbM1O8UYcqLXv4yzhijqwvfI6YNfvBJfs1voGuLkkm/HX5GNsk3rfR
ona7fbrtexu7dzfXUEd3zDpkd9wb27hjNi5/B3eMYoydnDJ2f5vdMg0Xzq1r
xgJ065q5dc3cumZuXTPrcPMFumbWCWS/MdfMna7W2I3zcubhfv1ZHTs1idUn
mG6HwYYjxqOj41gPt/XwfCleo8+eX9OpsNfw45KS1qzGZ/IffbL36GDY6j0a
b6u425Jq0EVB76KHB+tiwLbxIQXd9Yf10lfgD9ra3ocUdFGHu2i9wSYm0tRu
G76koxZf0igkUi1/07XL7916mW69THa7Wy/Tdl4mQNP+wdaI+oK8TL+Kh2l/
tHf/yAUWuH992T6m4cc4mX4BH8z6UY4+xyjh+Eh+JSeOp6tPdHPVvWZfnMdH
ZX/fQ8Ex2rMExy2TbWqfgzg5IoFy/9bjowD9Wh6fCFuPJqORtmy3jgjk3IPx
8cSJlZq0i7ntHh+P/Ls/VBKwFnI1+HU3G3QUr/dHG2822JtMD0Wovn98jL9E
5N77/G6je9YX7W4jfyyf83Stk2bTtrp1G/0abqM1G+xTM3q6+A+tMQqn/ex5
PR4HEvRy60JSgH6TLiQh201TG/2+7664dSPdupHW46ZFxf6S3UgdJbyPcyM1
Bb1NcDbJmRvu7jXjaciDttj3BWQbDTenG33mXJ1NIxp9yohegYL8GR02PpF8
ixXzjeYzOLsahPArpggdtaUI3Uc9fVtt3XXydNDKNyvfwfpU/+5unmAbeX+d
hBS05eZ3E92NChx004E3c8Dgo8HUWFjQproKvX0Vhmenz0/Dh3lWpnFSEDGV
QXCegPYKhFgklylotGlSAvXNZuE4gUf/tkyLJA6nOdLYN6DxRlkcFTEAmc/h
z9J+9n1URPMEyNF5eqqK24TQKRDxNK19UCXvqvA6mi2Tkkd5jk4m9FTVR/oK
LVlxPlnO0UMMf0dj3CORsVTBOOdRFcZJOSnSMXql0Gu1KPIKDWnwc5oW85uo
SMT7Ra+jMiyXwJVSgrmIigr3YxTOouIStmKZz5a07wA4vJgmBcHVE4D9G4c3
0QobxcksveYPdE/LRRxV0FWVh2f5K/jkOp0k5SA8Dec5vI6TKgJOG4MMU06W
VC5I5lUqPEyiDFdjmi/JKUdGvqiYXKU4K/THaZy8f39qPf/wQdx48PwsY9wA
+A8fBojnZ9AtDvQprHpovWa/njWaWcqYZUuijf9ZDiwJhg4oxzEl/TnADKI4
piqAf1Mu0+rv0qSaDvLi8k8Du5Mw52lcFvlyIaN0Xl7lN4CxoFyOaSmTUIyb
NBhc+ir8Gzy0Sji1bm5uhgPVzy6OAQhiF79EoLs4jD8FAWHmGhZC3JAEyUFt
VJ0ENlAXZj9iALs3yZhg7sLyFICJXToPBlfVfPYnROzpBDNgYUkvE0QUEO4P
SXiTL2cx9PlWZhJlb2kUxn8KbL8EMhdMJylQ3nKxyIEaYQGBotPLDD+jRZgn
E4CQlnPalc/SWV4CAT8Dyosm8ODvYc+ksERPl9Mp/HwEk3yZ46b7h/wq638f
LWfhOVAv9BTDw++Wl3n45zSbwGDh50OQGaokCx/gcmQZPPmP/7m6hjmGL//j
/2Q4BqB8bPekwEmcLmM48f7xOppXxX/8H3j8j8VPq/KnCrD88KpY/r//NUn/
3/8o36bw5jSLi5+Sfw2/X/4UF/kNP3yWwlSSWfgS/1vEgAIa8TXIsg/gI/z1
GHnNEr55EE0myWyWBv8fE4AqxGrBAQA=

-->

</rfc>

