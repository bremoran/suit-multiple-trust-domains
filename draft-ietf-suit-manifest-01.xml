<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-manifest-01" category="info">

  <front>
    <title abbrev="Firmware Manifest Format">SUIT CBOR manifest serialisation format</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>

    <date year="2019" month="October" day="28"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="Architecture"/>.</t>

<t>The SUIT manifest is heavily optimised for consumption by constrained devices. This means that it is not constructed as a conventional descriptive document. Instead, of describing what an update IS, it describes what a recipient should DO.</t>

<t>While the SUIT manifest is informed by and optimised for firmware update use cases, there is nothing in the <xref target="Information"/> that restricts its use to only firmware use cases. Software update and delivery of arbitrary data can equally be managed by SUIT-based metadata.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
  <t>Recipient: The system, typically an IoT device, that receives a manifest.</t>
  <t>Condition: A test for a property of the Recipient or its components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
</list></t>

</section>
<section anchor="distributing-firmware" title="Distributing firmware">
<t>Distributing firmware in a multi-party environment is a difficult operation. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="Architecture"/>.</t>

</section>
<section anchor="workflow-of-a-device-applying-a-firmware-update" title="Workflow of a device applying a firmware update">
<t>The manifest is designed to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing an update can be broken down into 5 steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest</t>
  <t>Resolve dependencies</t>
  <t>Fetch payload(s)</t>
  <t>Install payload(s)</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s)</t>
  <t>Load image(s)</t>
  <t>Run image(s)</t>
</list></t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="suit-manifest-goals" title="SUIT manifest goals">
<t>The manifest described in this document is intended to meet several goals, as described below.</t>

<t><list style="numbers">
  <t>Meet the requirements defined in <xref target="Information"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

</section>
<section anchor="suit-manifest-design-overview" title="SUIT manifest design overview">
<t>In order to provide flexible behaviour to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behaviour of a Recipient device. Behaviour is encoded as a specialised byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialised byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies behaviours in a linearised form, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behaviour by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that only manifests authenticated by the appropriate identity have access to operate on a component.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="manifest-design-evaluation" title="Manifest Design Evaluation">
<t>To evaluate this design, it is compared to the goals stated above.</t>

<t>Goal evaluation:</t>

<t><list style="numbers">
  <t>Each command and condition is anchored to a manifest information element in <xref target="Information"/></t>
  <t>The use of a byte code encourages flat encoding and reduces nesting depth. This promotes a simple encoding.</t>
  <t>The encoded information closely matches the operations that a device will perform, making the format easy to process.</t>
  <t>Encoding efficiency exceeds 50% when compared to raw data.</t>
  <t>Tooling will be required to reason about the manifest.</t>
  <t>The core operations used by most update and trusted execution operations are represented in the byte code. The use cases listed in <xref target="Information"/> are enabled.</t>
  <t>Registration of new standard byte code identifiers enables extension in a comprehensible way.</t>
</list></t>

<t>The manifest described by this document meets the stated goals. Meeting goal 5–comprehensible by intermediate systems–will require additional tooling or a division of metadata.</t>

</section>
<section anchor="severable-elements" title="Severable Elements">
<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

</section>
<section anchor="conventions" title="Conventions">
<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are hyphenated and CDDL structures follow the convention adopted in COSE <xref target="RFC8152"/>: SUIT_Structure_Name.</t>

</section>
<section anchor="payloads" title="Payloads">
<t>Payloads can take many forms, for example, binary, hex, s-record, elf, binary diff, PEM certificate, CBOR Web Token, serialised configuration. These payloads fall into two broad categories: those that require installation-time unpacking and those that do not. Binary, PEM certificate, and CBOR Web Token do not require installation-time unpacking. Hex, s-record, and serialised configuration require installation-time unpacking. Elf may or may not require unpacking depending on the target.</t>

<t>Some payloads cannot be directly converted to a writable binary stream. Hex, s-record, and elf may contain gaps and they have no guarantee of monotonic increase of address, which makes pre-processing them into a binary stream difficult on constrained platforms. Serialised configuration may be unpacked into a configuration database, which makes it impossible to preprocess into a binary stream, suitable for direct writing.</t>

<t>Where a specialised unpacking algorithm is needed, a digest is not always calculable over an installed payload. For example, an elf, s-record or hex file may contain gaps that can contain any data, while not changing whether or not an installed payload is valid. Serialised configuration may update only some device data rather than all of it. This means that the digest cannot always be calculated over an installed payload when a specialised installer is used.</t>

<t>This presents two problems for the manifest: first, it must indicate that a specialised installer is needed and, second, it cannot provide a hash of the payload that is checkable after installation. These two problems are resolved in two ways:</t>

<t><list style="numbers">
  <t>Payloads that need a specialised installer must indicate this in suit-payload-info-unpack.</t>
  <t>Payloads that need specialised verification must indicate this in the SUIT_Parameter_Image_Digest by indicating a SUIT_Digest algorithm that correctly validates their information.</t>
</list></t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">
<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Information shared by all command sequences
          <list style="numbers">
              <t>List of dependencies</t>
              <t>List of payloads</t>
              <t>List of payloads in dependencies</t>
              <t>Common list of conditions, directives</t>
            </list></t>
          <t>Dependency resolution Reference or list of conditions, directives</t>
          <t>Payload fetch Reference or list of conditions, directives</t>
          <t>Installation Reference or list of conditions, directives</t>
          <t>Verification conditions/directives</t>
          <t>Load conditions/directives</t>
          <t>Run conditions/directives</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Dependency resolution conditions/directives</t>
      <t>Payload fetch conditions/directives</t>
      <t>Installation conditions/directives</t>
      <t>Text</t>
      <t>COSWID / Reference</t>
      <t>Intermediate Certificate(s) / CWTs</t>
      <t>Inline Payload(s)</t>
    </list></t>
</list></t>

<section anchor="outer-wrapper" title="Outer wrapper">
<t>This object is a container for the other pieces of the manifest to provide a common mechanism to find each of the parts. All elements of the outer wrapper are contained in bstr objects. Wherever the manifest references an object in the outer wrapper, the bstr is included in the digest calculation.</t>

<t>The CDDL that describes the wrapper is below</t>

<figure><artwork><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper   => bstr .cbor
                                     SUIT_Authentication_Wrapper / nil,
    $SUIT_Manifest_Wrapped,
    ? suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => bstr .cbor SUIT_Command_Sequence,
    ? suit-text-external          => bstr .cbor SUIT_Text_Info,
    ? suit-coswid-external        => bstr .cbor COSWID
}

SUIT_Authentication_Wrapper = [ + (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                  COSE_Mac0_Tagged / COSE_Sign1_Tagged)]
SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)
]]></artwork></figure>

<t>All elements of the outer wrapper must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>The suit-authentication-wrapper contains a list of 1 or more cryptographic authentication wrappers for the core part of the manifest. These are implemented as  COSE_Mac_Tagged or COSE_Sign_Tagged blocks. The Manifest is authenticated by these blocks in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The suit-authentication-wrapper MUST come first in the SUIT_Outer_Wrapper, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Outer_Wrapper that begins with any element other than a suit-authentication-wrapper.</t>

<t>A manifest that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be nil.</t>

<t>The outer wrapper MUST contain only one of</t>

<t><list style="symbols">
  <t>a plaintext manifest: SUIT_Manifest</t>
  <t>an encrypted manifest: both a SUIT_Encryption_Wrapper and the ciphertext of a manifest.</t>
</list></t>

<t>When the outer wrapper contains SUIT_Encryption_Wrapper, the suit-authentication-wrapper MUST authenticate the plaintext of suit-manifest-encrypted.</t>

<t>suit-manifest contains a SUIT_Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>suit-manifest-encryption-info contains a SUIT_Encryption_Wrapper, a COSE object that describes the information required to decrypt a ciphertext manifest.</t>

<t>suit-manifest-encrypted contains a ciphertext manifest.</t>

<t>Each of suit-dependency-resolution, suit-payload-fetch, and suit-payload-installation contain the severable contents of the identically named portions of the manifest, described in <xref target="secmanifest"/>.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

<t>suit-coswid contains a Concise Software Identifier. This may be discarded by the recipient if not needed.</t>

</section>
<section anchor="secmanifest" title="Manifest">

<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of components affected</t>
  <t>a list of components affected by dependencies</t>
  <t>a reference for each of the severable blocks.</t>
  <t>a list of actions that the recipient should perform.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<figure><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text-info              => Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => Digest / bstr .cbor COSWID
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor [ + SUIT_Dependency ],
    ? suit-components             => bstr .cbor [ + SUIT_Component_Identifier ],
    ? suit-dependency-components  => bstr .cbor [ + SUIT_Component_Reference ],
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}
]]></artwork></figure>

<t>Several fields in the Manifest can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by recipient devices. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a recipient to determine whether an element is been severable. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Outer_Wrapper so that a recipient can easily identify the correct data in the outer wrapper.</t>

<t>The suit-manifest-version indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED.</t>

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED.</t>

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, suit-dependency-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of SUIT_Dependency blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>In order to distinguish between components that are affected by the current manifest and components that are affected by a dependency, they are kept in separate lists. Components affected by the current manifest only list the component identifier. Components affected by a dependency include the component identifier and the index of the dependency that defines the component.</t>

<t>suit-components is a list of SUIT_Component blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is OPTIONAL, but at least one manifest MUST contain a suit-components block.</t>

<t>suit-dependency-components is a list of SUIT_Component_Reference blocks that specify component identifiers that will be affected by the content of a dependency of the current manifest. suit-dependency-components is OPTIONAL.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected device identity and image digests when they are conditional (see <xref target="secconditional"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED.</t>

<t>suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED when suit-dependencies is present.</t>

<t>suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL.</t>

<t>suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL.</t>

<t>suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>

<t>suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL.</t>

<t>suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL. Only one manifest in an update may contain the “run” directive.</t>

<t>suit-text-info is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>suit-coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="suitdependency" title="SUIT_Dependency">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest.</t>

<t>The following CDDL describes the SUIT_Dependency structure.</t>

<figure><artwork><![CDATA[
SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
}
]]></artwork></figure>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is OPTIONAL.</t>

</section>
<section anchor="suitcomponentreference" title="SUIT_Component_Reference">

<t>The SUIT_Component_Reference describes an image that is defined by another manifest. This is useful for overriding the behaviour of another manifest, for example by directing the recipient to look at a different URI for the image or by changing the expected format, such as when a gateway performs decryption on behalf of a constrained device. The following CDDL describes the SUIT_Component_Reference.</t>

<figure><artwork><![CDATA[
SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}
]]></artwork></figure>

</section>
<section anchor="secparameters" title="Manifest Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. Parameters MUST only be:</t>

<figure><artwork><![CDATA[
1. Integers
2. Byte strings
3. Booleans
]]></artwork></figure>

<t>This allows reduction of manifest size and replacement of parameters from one manifest to the next. Byte strings MAY contain CBOR-encoded objects.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Parameter Code</ttcol>
      <ttcol align='left'>CBOR Type</ttcol>
      <ttcol align='left'>Default</ttcol>
      <ttcol align='left'>Scope</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>1</c>
      <c>boolean</c>
      <c>True</c>
      <c>Global</c>
      <c>Strict Order</c>
      <c>Requires that the manifest is processed in a strictly linear fashion. Set to 0 to enable parallel handling of manifest directives.</c>
      <c>2</c>
      <c>boolean</c>
      <c>False</c>
      <c>Command Segment</c>
      <c>Coerce Condition Failure</c>
      <c>Coerces the success code of a command segment to success even when aborted due to a condition failure.</c>
      <c>3</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Vendor ID</c>
      <c>A RFC4122 UUID representing the vendor of the device or component</c>
      <c>4</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Class ID</c>
      <c>A RFC4122 UUID representing the class of the device or component</c>
      <c>5</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Global</c>
      <c>Device ID</c>
      <c>A RFC4122 UUID representing the device or component</c>
      <c>6</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI</c>
      <c>A URI from which to fetch a resource</c>
      <c>7</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Encryption Info</c>
      <c>A COSE object defining the encryption mode of a resource</c>
      <c>8</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Compression Info</c>
      <c>A SUIT_Compression_Info object</c>
      <c>9</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component</c>
      <c>Unpack Info</c>
      <c>A SUIT_Unpack_Info object</c>
      <c>10</c>
      <c>uint</c>
      <c>nil</c>
      <c>Component</c>
      <c>Source Component</c>
      <c>A Component Index</c>
      <c>11</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Digest</c>
      <c>A SUIT_Digest</c>
      <c>12</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>Image Size</c>
      <c>Integer size</c>
      <c>24</c>
      <c>bstr</c>
      <c>nil</c>
      <c>Component/Dependency</c>
      <c>URI List</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>25</c>
      <c>boolean</c>
      <c>False</c>
      <c>Component/Dependency</c>
      <c>URI List Append</c>
      <c>A CBOR encoded list of ranked URIs</c>
      <c>nint</c>
      <c>int/bstr</c>
      <c>nil</c>
      <c>Custom</c>
      <c>Custom Parameter</c>
      <c>Application-defined parameter</c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularisation and division of responsibility within a pull parser. The same consideration does not apply to Conditions and Directives because those elements are invoked with their arguments immediately</t>

<section anchor="suitparameterstrictorder" title="SUIT_Parameter_Strict_Order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelise their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

</section>
<section anchor="suitparametercoerceconditionfailure" title="SUIT_Parameter_Coerce_Condition_Failure">

<t>When executing a command sequence inside SUIT_Run_Sequence and a condition failure occurs, the manifest processor aborts the sequence. If Coerce Condition Failure is True, it returns Success. Otherwise, it returns the original condition failure. SUIT_Parameter_Coerce_Condition_Failure is scoped to the enclosing SUIT_Directive_Run_Sequence. Its value is discarded when SUIT_Directive_Run_Sequence terminates.</t>

</section>
</section>
<section anchor="suitparameterencryptioninfo" title="SUIT_Parameter_Encryption_Info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr</t>

</section>
<section anchor="suitparametercompressioninfo" title="SUIT_Parameter_Compression_Info">

<t>Compression Info defines any information that is required for a device to perform decompression operations. Typically, this includes the algorithm identifier.</t>

<t>SUIT_Parameter_Compression_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}


SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

]]></artwork></figure>

</section>
<section anchor="suitparameterunpackinfo" title="SUIT_Parameter_Unpack_Info">

<t>SUIT_Unpack_Info defines the information required for a device to interpret a packed format, such as elf, hex, or binary diff. SUIT_Unpack_Info is defined by the following CDDL:</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf

]]></artwork></figure>

</section>
<section anchor="suitparameters-cddl" title="SUIT_Parameters CDDL">

<t>The following CDDL describes all SUIT_Parameters.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-coerce-condition-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => bstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => bstr .cbor SUIT_Component_Identifier)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_URI_List)
SUIT_Parameters //= (suit-parameter_custom => int/bool/bstr)

SUIT_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_deflate
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_LZ4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms //= SUIT_Unpack_Algorithm_Elf
]]></artwork></figure>

</section>
<section anchor="suitcommandsequence" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution</t>
  <t>Payload Fetch</t>
  <t>Payload Installation</t>
  <t>Image Validation</t>
  <t>Image Loading</t>
  <t>Run or Boot</t>
</list></t>

<t>Each of these follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>The lists of commands are logically structured into sequences of zero or more conditions followed by zero or more directives. The <spanx style="strong">logical</spanx> structure is described by the following CDDL:</t>

<figure><artwork><![CDATA[
Command_Sequence = {
    conditions => [ * Condition],
    directives => [ * Directive]
}
]]></artwork></figure>

<t>This introduces significant complexity in the parser, however, so the structure is flattened to make parsing simpler:</t>

<figure><artwork><![CDATA[
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]
]]></artwork></figure>

<t>Each condition and directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block</t>
</list></t>

<t>Argument blocks are defined for each type of command.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behaviour.</t>

</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditons of any directive or series of directives, depending on where they are placed in the list. Conditions include:</t>

<texttable>
      <ttcol align='left'>Condition Code</ttcol>
      <ttcol align='left'>Condition Name</ttcol>
      <ttcol align='left'>Argument Type</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>nil</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>nil</c>
      <c>3</c>
      <c>Image Match</c>
      <c>nil</c>
      <c>4</c>
      <c>Use Before</c>
      <c>Unsigned Integer timestamp</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>Unsigned Integer</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>nil</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>nil</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>Unsigned Integer</c>
      <c>27</c>
      <c>Update Authorised</c>
      <c>Integer</c>
      <c>28</c>
      <c>Version</c>
      <c>List of Integers</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c>bstr</c>
</texttable>

<t>Each condition MUST report a success code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. If a recipient encounters an unknown Condition Code, it MUST report a failure.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

<section anchor="identifier-conditions" title="Identifier Conditions">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing device MUST match the specified UUID in order to consider the manifest valid. These identifiers MAY be scoped by component.</t>

<t>The recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the digest parameter for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the supplied digest. If no digest is specified, then the digest is compared against the digest specified in the Components list. If no digest is specified and the component is not present in the Components list, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. One argument is required, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-update-authorised" title="suit-condition-update-authorised">

<t>Request Authorisation from the application and fail if not authorised. This can allow a user to decline an update. Argument is an integer priority level. Priorities are application defined. suit-condition-update-authorised is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. The image can be compared as:</t>

<t><list style="symbols">
  <t>Greater</t>
  <t>Greater or Equal</t>
  <t>Equal</t>
  <t>Lesser or Equal</t>
  <t>Lesser</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occured. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>The following CDDL describes SUIT_Condition_Version_Argument</t>

<figure><artwork><![CDATA[
SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Greater_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser_Equal
SUIT_Condition_Version_Comparison_Types /= SUIT_Condition_Version_Comparison_Lesser
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3]</t>
  <t>1.2-rc3 = [1,2,-1,3]</t>
  <t>1.2-beta = [1,2,-2]</t>
  <t>1.2-alpha = [1,2,-3]</t>
  <t>1.2-alpha4 = [1,2,-3,4]</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

</section>
<section anchor="suitconditioncustom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to the system that evaluates the condition matching that integer.
SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
<section anchor="identifiers" title="Identifiers">

<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="suitcondition-cddl" title="SUIT_Condition CDDL">

<t>The following CDDL describes SUIT_Condition:</t>

<figure><artwork><![CDATA[
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

SUIT_Condition_Version_Comparison_Value = [+int]
]]></artwork></figure>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behaviour of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Directive Code</ttcol>
      <ttcol align='left'>Directive Name</ttcol>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>29</c>
      <c>Wait</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>31</c>
      <c>Run with Arguments</c>
      <c>32</c>
      <c>Swap</c>
</texttable>

<t>When a Recipient executes a Directive, it MUST report a success code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the concatenation of suit-components and suit-dependency-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. True does not apply to dependency components. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>The following CDDL describes the argument to suit-directive-set-component-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Component_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

<t>The following CDDL describes the argument to suit-directive-set-dependency-index.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Manifest_Index_Argument = uint/bool
]]></artwork></figure>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>The following CDDL describes the SUIT_Run_Sequence argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence
]]></artwork></figure>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Coerce on Condition Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several suit-directive-run-sequence one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>SUIT_Parameter_Coerce_Condition_Failure is initialised to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The following CDDL describes the SUIT_Try_Each argument.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]
]]></artwork></figure>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<t>The argument to suit-directive-process-dependency is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Process_Dependency_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behaviour of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behaviour of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behaviour of a manifest.</t>

<t>The argument to suit-directive-set-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

<t>N.B.: A directive code is reserved for an optimisation: a way to set a parameter to the contents of another parameter, optionally with another component ID.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>The argument to suit-directive-override-parameters is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}
]]></artwork></figure>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and manifest-index, respectively. If component-index or manifest-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behaviour. If an argument is needed, it must be wrapped in a bstr.</t>

<t>suit-directive-fetch reads the URI or URI List parameter to find the source of the fetch it performs.</t>

<t>The behaviour of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

<t>The argument to suit-directive-fetch is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Fetch_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behaviour of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t><spanx style="strong">N.B.</spanx> Fetch and Copy are very similar. Merging them into one command may be appropriate.</t>

<t>suit-directive-copy reads its source from SUIT_Parameter_Source_Component.</t>

<t>The argument to suit-directive-copy is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Copy_Argument = nil
]]></artwork></figure>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they must be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments provided to Run are forwarded to the executable code located in Component Index, in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

<t>The argument to suit-directive-run is defined in the following CDDL.</t>

<figure><artwork><![CDATA[
SUIT_Directive_Run_Argument = nil/bstr
]]></artwork></figure>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorisation</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

<t>The following CDDL defines the encoding of these events.</t>

<figure><artwork><![CDATA[
SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
<section anchor="suitdirective-cddl" title="SUIT_Directive CDDL">

<t>The following CDDL describes SUIT_Directive:</t>

<figure><artwork><![CDATA[
SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,         
                    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,             
                    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   nil)
SUIT_Directive //= (suit-directive-set-parameters,       
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,  
                    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                nil)
SUIT_Directive //= (suit-directive-copy,                 nil)
SUIT_Directive //= (suit-directive-run,                  nil)
SUIT_Directive //= (suit-directive-wait,                 
                    { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,   bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

]]></artwork></figure>

</section>
</section>
</section>
<section anchor="dependency-processing" title="Dependency processing">

<t>Dependencies need careful handling on constrained systems. A dependency tree that is too deep can cause recursive handling to overflow stack space. Systems that parse all dependencies into an object tree can easily fill up available memory. Too many dependencies can overrun available storage space.</t>

<t>The dependency handling system in this document is designed to address as many of these problems as possible.</t>

<t>Dependencies MAY be addressed in one of three ways:</t>

<t><list style="numbers">
  <t>Iterate by component</t>
  <t>Iterate by manifest</t>
  <t>Out-of-order</t>
</list></t>

<t>Because each manifest has a list of components and a list of components defined by its dependencies, it is possible for the manifest processor to handle one component at a time, traversing the manifest tree once for each listed component. This, however consumes significant processing power.</t>

<t>Alternatively, it is possible for a device with sufficient memory to accumulate all parameters for all listed component IDs. This will naturally consume more memory, but it allows the device to process the manifests in a single pass.</t>

<t>It is expected that the simplest and most power sensitive devices will use option 2, with a fixed maximum number of components.</t>

<t>Advanced devices may make use of the Strict Order parameter and enable parallel processing of some segments, or it may reorder some segments. To perform parallel processing, once the Strict Order parameter is set to False, the device may fork a process for each command until the Strict Order parameter is returned to True or the command sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the device consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the device, authenticated by a trusted party or stored on the device. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a device to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="suit-digest-container" title="SUIT digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest. This structure is described by the following CDDL.</t>

<t>The algorithms listed are sufficient for verifying integrity of Firmware Updates as of this writing, however this may change over time.</t>

<figure><artwork><![CDATA[
SUIT_Digest = [
 suit-digest-algorithm-id : $suit-digest-algorithm-ids,
 suit-digest-bytes : bytes,
 ? suit-digest-parameters : any
]

digest-algorithm-ids /= algorithm-id-sha224
digest-algorithm-ids /= algorithm-id-sha256
digest-algorithm-ids /= algorithm-id-sha384
digest-algorithm-ids /= algorithm-id-sha512
digest-algorithm-ids /= algorithm-id-sha3-224
digest-algorithm-ids /= algorithm-id-sha3-256
digest-algorithm-ids /= algorithm-id-sha3-384
digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8
]]></artwork></figure>

</section>
<section anchor="secconditional" title="Creating conditional sequences">

<t>For some use cases, it is important to provide a sequence that can fail without terminating an update. For example, a dual-image XIP MCU may require an update that can be placed at one of two offsets. This has two implications, first, the digest of each offset will be different. Second, the image fetched for each offset will have a different URI. Conditional sequences allow this to be resolved in a simple way.</t>

<t>The following JSON representation of a manifest demonstrates how this would be represented. It assumes that the bootloader and manifest processor take care of A/B switching and that the manifest is not aware of this distinction.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version" : 1,
    "sequence-number" : 7,
    "common" :{
        "components" : [
            [b'0']
        ],
        "common-sequence" : [
            {
                "directive-set-var" : {
                    "size": 32567
                },
            },
            {
                "try-each" : [
                    [
                        {"condition-component-offset" : "<offset A>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 A>"
                            }
                        }
                    ],
                    [
                        {"condition-component-offset" : "<offset B>"},
                        {
                            "directive-set-var": {
                                "digest" : "<SHA256 B>"
                            }
                        }
                    ],
                    [{ "abort" : null }]
                ]
            }
        ]
    }
    "fetch" : [
        {
            "try-each" : [
                [
                    {"condition-component-offset" : "<offset A>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI A>"
                        }
                    }
                ],
                [
                    {"condition-component-offset" : "<offset B>"},
                    {
                        "directive-set-var": {
                            "uri" : "<URI B>"
                        }
                    }
                ],
                [{ "directive-abort" : null }]
            ]
        },
        "fetch" : null
    ]
}
]]></artwork></figure>

</section>
<section anchor="manifest-cddl" title="Full CDDL">

<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Outer_Wrapper = {
    suit-authentication-wrapper => bstr .cbor SUIT_Authentication_Wrapper / nil,
    $$SUIT_Manifest_Wrapped,
    suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
    suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
    suit-install                => bstr .cbor SUIT_Command_Sequence,
    suit-text                   => bstr .cbor SUIT_Text_Map,
    suit-coswid                 => bstr .cbor concise-software-identity
}

SUIT_Authentication_Wrapper = [ + (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)
]

SUIT_Encryption_Wrapper = COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged

$$SUIT_Manifest_Wrapped //= (suit-manifest  => bstr .cbor SUIT_Manifest)
$$SUIT_Manifest_Wrapped //= (
    suit-manifest-encryption-info => bstr .cbor SUIT_Encryption_Wrapper,
    suit-manifest-encrypted       => bstr
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bytes,
  ? suit-digest-parameters : any
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    ? suit-common                 => bstr .cbor SUIT_Common,
    ? suit-dependency-resolution  => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-payload-fetch          => SUIT_Digest / bstr .cbor SUIT_Command_Sequence,
    ? suit-install                => SUIT_Digest / bstr .cbor SUIT_Command_Sequence
    ? suit-validate               => bstr .cbor SUIT_Command_Sequence
    ? suit-load                   => bstr .cbor SUIT_Command_Sequence
    ? suit-run                    => bstr .cbor SUIT_Command_Sequence
    ? suit-text                   => SUIT_Digest / bstr .cbor SUIT_Text_Map
    ? suit-coswid                 => SUIT_Digest / bstr .cbor concise-software-identity
}

SUIT_Common = {
    ? suit-dependencies           => bstr .cbor SUIT_Dependencies,
    ? suit-components             => bstr .cbor SUIT_Components,
    ? suit-dependency-components  => bstr .cbor SUIT_Component_References,
    ? suit-common-sequence        => bstr .cbor SUIT_Command_Sequence,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]
SUIT_Component_References = [ + SUIT_Component_Reference ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    suit-dependency-prefix => SUIT_Component_Identifier,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}


SUIT_Command_Sequence = [ + (SUIT_Condition // SUIT_Directive // SUIT_Command_Custom) ]

SUIT_Command_Custom = (nint, bstr)
SUIT_Condition //= (suit-condition-vendor-identifier, nil)
SUIT_Condition //= (suit-condition-class-identifier,  nil)
SUIT_Condition //= (suit-condition-device-identifier, nil)
SUIT_Condition //= (suit-condition-image-match,       nil)
SUIT_Condition //= (suit-condition-image-not-match,   nil)
SUIT_Condition //= (suit-condition-use-before,        uint)
SUIT_Condition //= (suit-condition-minimum-battery,   uint)
SUIT_Condition //= (suit-condition-update-authorised, int)
SUIT_Condition //= (suit-condition-version,           SUIT_Condition_Version_Argument)
SUIT_Condition //= (suit-condition-component-offset,  uint)
SUIT_Condition //= (suit-condition-custom,            bstr)

RFC4122_UUID = bstr .size 16

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /= suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive //= (suit-directive-set-component-index,      uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index,     uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,             bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,                 SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,       nil)
SUIT_Directive //= (suit-directive-set-parameters,           {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,      {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                    nil)
SUIT_Directive //= (suit-directive-copy,                     nil)
SUIT_Directive //= (suit-directive-swap,                     nil)
SUIT_Directive //= (suit-directive-run,                      nil)
SUIT_Directive //= (suit-directive-wait,                     { + SUIT_Wait_Events })
SUIT_Directive //= (suit-directive-run-with-arguments,       bstr)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Wait_Events //= (suit-wait-event-authorisation => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday


SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-coerce-condition-failure => bool)
SUIT_Parameters //= (suit-parameter-vendor-id => bstr)
SUIT_Parameters //= (suit-parameter-class-id => bstr)
SUIT_Parameters //= (suit-parameter-device-id => bstr)
SUIT_Parameters //= (suit-parameter-uri => bstr)
SUIT_Parameters //= (suit-parameter-encryption-info => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameters //= (suit-parameter-source-component => bstr .cbor SUIT_Component_Identifier)
SUIT_Parameters //= (suit-parameter-image-digest => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-uri-list => bstr .cbor SUIT_Component_URI_List)
SUIT_Parameters //= (suit-parameter-custom => int/bool/bstr)

SUIT_Component_URI_List = [ + [priority: int, uri: tstr] ]
SUIT_Priority_Parameter_List = [ + [priority: int, parameters: { + SUIT_Parameters }] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms
    ? suit-compression-parameters => bstr
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_gzip
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_bzip2
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lz4
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_lzma

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms
    ? suit-unpack-parameters => bstr
}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Delta
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}

suit-authentication-wrapper = 1
suit-manifest = 2

suit-manifest-encryption-info = 3
suit-manifest-encrypted       = 4

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5
suit-condition-custom = 6

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorised        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
suit-directive-do-each                  = 16 ; TBD
suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-run-sequence             = 30
suit-directive-run-with-arguments       = 31
suit-directive-swap                     = 32

suit-wait-event-argument-authorisation = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7
suit-wait-event-authorisation = 8

suit-parameter-strict-order = 1
suit-parameter-coerce-condition-failure = 2
suit-parameter-vendor-id = 3
suit-parameter-class-id = 4
suit-parameter-device-id = 5
suit-parameter-uri = 6
suit-parameter-encryption-info = 7
suit-parameter-compression-info = 8
suit-parameter-unpack-info = 9
suit-parameter-source-component = 10
suit-parameter-image-digest = 11
suit-parameter-image-size = 12

suit-parameter-uri-list = 24
suit-parameter-uri-list-append = 25
suit-parameter-prioritised-parameters = 26

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

]]></artwork></figure>

</section>
<section anchor="examples" title="Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>None of these examples include authentication. This is provided via RFC 8152 <xref target="RFC8152"/>, and is omitted for clarity.</t>

<section anchor="example-0" title="Example 0:">

<t>Secure boot only.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 1,
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658405e5f'
                        h'b84f9e9729a4d74096ad485921e842b4e320cc3fa177'
                        h'8c2807377e1969e42449b3261109d273df4b3ceb9a61'
                        h'06a46f0a7938de9a8441ab515b82463b39ee',
    / manifest / 2 : h'a40101020103583ea2024c818245466c6173684300340104'
                     h'582c8213a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00c47'
                     h'860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 1,
        / common / 3 : h'a2024c818245466c6173684300340104582c8213a20b82'
                       h'02582000112233445566778899aabbccddeeff01234567'
                       h'89abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b820258200011223344556677'
                                    h'8899aabbccddeeff0123456789abcdef'
                                    h'fedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 85</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602584fa40101020103583ea2024c818245466c6173684300340104582c8213a20b
8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0c1987d00c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 170</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658405e5fb84f9e9729a4d74096ad
485921e842b4e320cc3fa1778c2807377e1969e42449b3261109d273df4b3ceb9a6106a4
6f0a7938de9a8441ab515b82463b39ee02584fa40101020103583ea2024c818245466c61
73684300340104582c8213a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d00c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-1" title="Example 1:">

<t>Simultaneous download and installation of payload.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 2,
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    }
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658403d4e'
                        h'9ff1ca8803a81ae1e2b13df28c527a4d6975e860035e'
                        h'e9a88576b5e6f2bf12f33017e88157bcff58d712e7f8'
                        h'010821ae0f82f78eb681b61697345e655cf4',
    / manifest / 2 : h'a40101020203583ea2024c818245466c6173684300340104'
                     h'582c8213a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00958'
                     h'25860c0013a106781b687474703a2f2f6578616d706c652e'
                     h'636f6d2f66696c652e62696e15f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 2,
        / common / 3 : h'a2024c818245466c6173684300340104582c8213a20b82'
                       h'02582000112233445566778899aabbccddeeff01234567'
                       h'89abcdeffedcba98765432100c1987d0' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8213a20b820258200011223344556677'
                                    h'8899aabbccddeeff0123456789abcdef'
                                    h'fedcba98765432100c1987d0' \ [
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 116</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602586ea40101020203583ea2024c818245466c6173684300340104582c8213a20b
8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0c1987d0095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f6669
6c652e62696e15f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 201</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658403d4e9ff1ca8803a81ae1e2b1
3df28c527a4d6975e860035ee9a88576b5e6f2bf12f33017e88157bcff58d712e7f80108
21ae0f82f78eb681b61697345e655cf402586ea40101020203583ea2024c818245466c61
73684300340104582c8213a20b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d0095825860c0013a106781b687474703a2f2f65
78616d706c652e636f6d2f66696c652e62696e15f6
]]></artwork></figure>

</section>
<section anchor="example-2" title="Example 2:">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 3,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45",
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840e637'
                        h'5a57596cb4a35a90a30b4099bccf7e2352a9829bf7bb'
                        h'1b56cfc0e713955be4fd360e366c94e32dfc344695b1'
                        h'20b2c59732b2e3f079fc2693c5a459d9ce44',
    / manifest / 2 : h'a501010203035866a2024c818245466c6173684300340104'
                     h'58548613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04'
                     h'501492af1425695e48bf429b2d51f2ab450b820258200011'
                     h'2233445566778899aabbccddeeff0123456789abcdeffedc'
                     h'ba98765432100c1987d001f602f6095825860c0013a10678'
                     h'1b687474703a2f2f6578616d706c652e636f6d2f66696c65'
                     h'2e62696e15f60c47860c0003f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 3,
        / common / 3 : h'a2024c818245466c617368430034010458548613a40350'
                       h'fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425'
                       h'695e48bf429b2d51f2ab450b8202582000112233445566'
                       h'778899aabbccddeeff0123456789abcdeffedcba987654'
                       h'32100c1987d001f602f6' \ {
            / components / 2 : h'818245466c61736843003401' \
            [
                [h'466c617368', h'003401'],
            ],
            / common-sequence / 4 : h'8613a40350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450b8202582000112233'
                                    h'445566778899aabbccddeeff01234567'
                                    h'89abcdeffedcba98765432100c1987d0'
                                    h'01f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0003f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 165</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602589fa501010203035866a2024c818245466c617368430034010458548613a403
50fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab450b
8202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 250</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840e6375a57596cb4a35a90a30b
4099bccf7e2352a9829bf7bb1b56cfc0e713955be4fd360e366c94e32dfc344695b120b2
c59732b2e3f079fc2693c5a459d9ce4402589fa501010203035866a2024c818245466c61
7368430034010458548613a40350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af14
25695e48bf429b2d51f2ab450b8202582000112233445566778899aabbccddeeff012345
6789abcdeffedcba98765432100c1987d001f602f6095825860c0013a106781b68747470
3a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c47860c0003f617f6
]]></artwork></figure>

</section>
<section anchor="example-3" title="Example 3:">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 4,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840ef4b'
                        h'399c55131a51bebafb46da6e6b79c59417fdefea7b87'
                        h'e4234bf8f978094e3092c8506d8a912fbacaec5ba365'
                        h'24ae0e4bb1aa14197e4d0afe10ba47e29e5a',
    / manifest / 2 : h'a50101020403589fa20254828245466c6173684300340182'
                     h'4352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00c01'
                     h'13a20b8202582000112233445566778899aabbccddeeff01'
                     h'23456789abcdeffedcba98765432100c1987d001f602f609'
                     h'5825860c0013a106781b687474703a2f2f6578616d706c65'
                     h'2e636f6d2f66696c652e62696e15f60c518e0c0003f60c01'
                     h'13a10a0015f603f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 4,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b8202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d00c0113a20b'
                       h'8202582000112233445566778899aabbccddeeff012345'
                       h'6789abcdeffedcba98765432100c1987d001f602f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820001122'
                                    h'33445566778899aabbccddeeff012345'
                                    h'6789abcdeffedcba98765432100c1987'
                                    h'd001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'8e0c0003f60c0113a10a0015f603f617f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 232</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258e2a50101020403589fa20254828245466c61736843003401824352414d4200
040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100c1987d00c0113a20b8202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100c1987d001f602f6095825860c0013
a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60c518e
0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 317</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840ef4b399c55131a51bebafb46
da6e6b79c59417fdefea7b87e4234bf8f978094e3092c8506d8a912fbacaec5ba36524ae
0e4bb1aa14197e4d0afe10ba47e29e5a0258e2a50101020403589fa20254828245466c61
736843003401824352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b8202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b8202
582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100c19
87d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f60c518e0c0003f60c0113a10a0015f603f617f6
]]></artwork></figure>

</section>
<section anchor="example-4" title="Example 4:">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 5,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "RAM",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0,
                "compression-info": {
                    "algorithm": "gzip"
                }
            }
        },
        { "directive-copy": null }
    ],
    "run-image": [
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840e90d'
                        h'ab6e502bad8132adf86b4d78defaebac64fa6c6b2882'
                        h'd12b36f492b14ce75819ed3524de4d66ddfd5e1d80a5'
                        h'984004c1ac9b003b2da32589583a93c541dd',
    / manifest / 2 : h'a60101020503589fa20254828245466c6173684300340182'
                     h'4352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe'
                     h'9de663e4d41ffe04501492af1425695e48bf429b2d51f2ab'
                     h'450c0013a20b8202582000112233445566778899aabbccdd'
                     h'eeff0123456789abcdeffedcba98765432100c1987d00c01'
                     h'13a20b820258200123456789abcdeffedcba987654321000'
                     h'112233445566778899aabbccddeeff0c1987d001f602f609'
                     h'5825860c0013a106781b687474703a2f2f6578616d706c65'
                     h'2e636f6d2f66696c652e62696e15f60b528a0c0003f60c01'
                     h'13a20843a101010a0016f60c458403f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 5,
        / common / 3 : h'a20254828245466c61736843003401824352414d420004'
                       h'0458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41f'
                       h'fe04501492af1425695e48bf429b2d51f2ab450c0013a2'
                       h'0b8202582000112233445566778899aabbccddeeff0123'
                       h'456789abcdeffedcba98765432100c1987d00c0113a20b'
                       h'820258200123456789abcdeffedcba9876543210001122'
                       h'33445566778899aabbccddeeff0c1987d001f602f6' \ {
            / components / 2 : h'828245466c61736843003401824352414d4200'
                               h'04' \
            [
                [h'466c617368', h'003401'],
                [h'52414d', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820012345'
                                    h'6789abcdeffedcba9876543210001122'
                                    h'33445566778899aabbccddeeff0c1987'
                                    h'd001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ]
                    / size / 12 : 34768
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'0123456789abcdeffedcba9876543210001122334455'
                        h'66778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8a0c0003f60c0113a20843a101010a0016f6' \ [
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / compression-info / 8 : h'a10101',
                / source-component / 10 : 0,
            },
            / copy / 22, None,
        ],
        / run-image / 12 : h'8403f617f6' \ [
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 240</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258eaa60101020503589fa20254828245466c61736843003401824352414d4200
040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425695e48bf
429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100c1987d00c0113a20b820258200123456789abcdeffedcba
987654321000112233445566778899aabbccddeeff0c1987d001f602f6095825860c0013
a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f60b528a
0c0003f60c0113a20843a101010a0016f60c458403f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 325</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840e90dab6e502bad8132adf86b
4d78defaebac64fa6c6b2882d12b36f492b14ce75819ed3524de4d66ddfd5e1d80a59840
04c1ac9b003b2da32589583a93c541dd0258eaa60101020503589fa20254828245466c61
736843003401824352414d4200040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d4
1ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b8202582000112233445566
778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a20b8202
58200123456789abcdeffedcba987654321000112233445566778899aabbccddeeff0c19
87d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e15f60b528a0c0003f60c0113a20843a101010a0016f60c458403f617
f6
]]></artwork></figure>

</section>
<section anchor="example-5" title="Example 5:">

<t>Compatibility test, download, installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 6,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 34768
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "ext-Flash",
                78848
            ],
            [
                "Flash",
                1024
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file.bin"
            }
        },
        { "directive-fetch": null }
    ],
    "load-image": [
        { "directive-set-component": 1 },
        { "condition-not-image": null },
        { "directive-set-component": 0 },
        { "condition-image": null },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "source-index": 0
            }
        },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": 1 },
        { "condition-image": null },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f658402282'
                        h'c1e7770b1806afb0cf78e74003af39166b9db14b0a7c'
                        h'172d18598c8be16e3cec48770fb8471675a5b3bab05a'
                        h'22e370a03320a7346f252f9629c3417ed153',
    / manifest / 2 : h'a6010102060358a2a202578282467b1b4595ab2143003401'
                     h'8245466c6173684200040458858e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b8202582000112233445566778899aa'
                     h'bbccddeeff0123456789abcdeffedcba98765432100c1987'
                     h'd00c0113a20b820258200123456789abcdeffedcba987654'
                     h'321000112233445566778899aabbccddeeff0c1987d001f6'
                     h'02f6095825860c0013a106781b687474703a2f2f6578616d'
                     h'706c652e636f6d2f66696c652e62696e15f60b528e0c0118'
                     h'19f60c0003f60c0113a10a0015f60c47860c0103f617f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 6,
        / common / 3 : h'a202578282467b1b4595ab21430034018245466c617368'
                       h'4200040458858e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b8202582000112233445566778899aabbccddee'
                       h'ff0123456789abcdeffedcba98765432100c1987d00c01'
                       h'13a20b820258200123456789abcdeffedcba9876543210'
                       h'00112233445566778899aabbccddeeff0c1987d001f602'
                       h'f6' \ {
            / components / 2 : h'8282467b1b4595ab21430034018245466c6173'
                               h'68420004' \
            [
                [h'7b1b4595ab21', h'003401'],
                [h'466c617368', h'0004'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820012345'
                                    h'6789abcdeffedcba9876543210001122'
                                    h'33445566778899aabbccddeeff0c1987'
                                    h'd001f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'0123456789abcdeffedcba9876543210001122334455'
                        h'66778899aabbccddeeff' ],
                    / size / 12 : 34768,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'860c0013a106781b687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c652e62696e15f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file.bin,
            },
            / fetch / 21, None,
        ],
        / load-image / 11 : h'8e0c011819f60c0003f60c0113a10a0015f6' \ [
            / set-component-index / 12, 1,
            / condition-not-image / 25, None,
            / set-component-index / 12, 0,
            / condition-image / 3, None,
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / source-component / 10 : 0,
            },
            / fetch / 21, None,
        ],
        / run-image / 12 : h'860c0103f617f6' \ [
            / set-component-index / 12, 1,
            / condition-image / 3, None,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 245</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f60258efa6010102060358a2a202578282467b1b4595ab21430034018245466c6173
684200040458858e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af142569
5e48bf429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100c1987d00c0113a20b820258200123456789abcdef
fedcba987654321000112233445566778899aabbccddeeff0c1987d001f602f609582586
0c0013a106781b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f6
0b528e0c011819f60c0003f60c0113a10a0015f60c47860c0103f617f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 330</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f658402282c1e7770b1806afb0cf78
e74003af39166b9db14b0a7c172d18598c8be16e3cec48770fb8471675a5b3bab05a22e3
70a03320a7346f252f9629c3417ed1530258efa6010102060358a2a202578282467b1b45
95ab21430034018245466c6173684200040458858e13a20350fa6b4a53d5ad5fdfbe9de6
63e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b8202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113a2
0b820258200123456789abcdeffedcba987654321000112233445566778899aabbccddee
ff0c1987d001f602f6095825860c0013a106781b687474703a2f2f6578616d706c652e63
6f6d2f66696c652e62696e15f60b528e0c011819f60c0003f60c0113a10a0015f60c4786
0c0103f617f6
]]></artwork></figure>

</section>
<section anchor="example-6" title="Example 6:">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<t>The following JSON shows the intended behaviour of the manifest.</t>

<figure><artwork type="JSON"><![CDATA[
{
    "structure-version": 1,
    "sequence-number": 7,
    "common": {
        "common-sequence": [
            {
                "directive-set-var": {
                    "vendor-id": "fa6b4a53-d5ad-5fdf-be9d-e663e4d41ffe",
                    "class-id": "1492af14-2569-5e48-bf42-9b2d51f2ab45"
                }
            },
            { "directive-set-component": 0 },
            {
                "directive-set-var": {
                    "digest": "00112233445566778899aabbccddeeff"
                              "0123456789abcdeffedcba9876543210",
                    "size": 34768
                }
            },
            { "directive-set-component": 1 },
            {
                "directive-set-var": {
                    "digest": "0123456789abcdeffedcba9876543210"
                              "00112233445566778899aabbccddeeff",
                    "size": 76834
                }
            },
            { "condition-vendor-id": null },
            { "condition-class-id": null }
        ],
        "components": [
            [
                "Flash",
                78848
            ],
            [
                "Flash",
                132096
            ]
        ]
    },
    "apply-image": [
        { "directive-set-component": 0 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file1.bin"
            }
        },
        { "directive-set-component": 1 },
        {
            "directive-set-var": {
                "uri": "http://example.com/file2.bin"
            }
        },
        { "directive-set-component": true },
        { "directive-fetch": null }
    ],
    "run-image": [
        { "directive-set-component": true },
        { "condition-image": null },
        { "directive-set-component": 0 },
        { "directive-run": null }
    ]
}
]]></artwork></figure>

<t>Converted into the SUIT manifest, this produces:</t>

<figure><artwork><![CDATA[
{
    / auth object / 1 : h'd28443a10126a1044874657374206b6579f65840d00c'
                        h'd62be643247904621f2956b11b97fcbcd22f87701dd9'
                        h'008e949f8c801f55d7095b545d6db0060bd47c5f78ee'
                        h'5cb1fea17c875a36a599aec4e8b876cfdae7',
    / manifest / 2 : h'a5010102070358a4a20257828245466c6173684300340182'
                     h'45466c617368430004020458878e13a20350fa6b4a53d5ad'
                     h'5fdfbe9de663e4d41ffe04501492af1425695e48bf429b2d'
                     h'51f2ab450c0013a20b8202582000112233445566778899aa'
                     h'bbccddeeff0123456789abcdeffedcba98765432100c1987'
                     h'd00c0113a20b820258200123456789abcdeffedcba987654'
                     h'321000112233445566778899aabbccddeeff0c1a00012c22'
                     h'01f602f609584b8c0c0013a106781c687474703a2f2f6578'
                     h'616d706c652e636f6d2f66696c65312e62696e0c0113a106'
                     h'781c687474703a2f2f6578616d706c652e636f6d2f66696c'
                     h'65322e62696e0cf515f60c49880cf503f60c0017f6' \
    {
        / structure-version / 1 : 1,
        / sequence-number / 2 : 7,
        / common / 3 : h'a20257828245466c617368430034018245466c61736843'
                       h'0004020458878e13a20350fa6b4a53d5ad5fdfbe9de663'
                       h'e4d41ffe04501492af1425695e48bf429b2d51f2ab450c'
                       h'0013a20b8202582000112233445566778899aabbccddee'
                       h'ff0123456789abcdeffedcba98765432100c1987d00c01'
                       h'13a20b820258200123456789abcdeffedcba9876543210'
                       h'00112233445566778899aabbccddeeff0c1a00012c2201'
                       h'f602f6' \ {
            / components / 2 : h'828245466c617368430034018245466c617368'
                               h'43000402' \
            [
                [h'466c617368', h'003401'],
                [h'466c617368', h'000402'],
            ],
            / common-sequence / 4 : h'8e13a20350fa6b4a53d5ad5fdfbe9de6'
                                    h'63e4d41ffe04501492af1425695e48bf'
                                    h'429b2d51f2ab450c0013a20b82025820'
                                    h'00112233445566778899aabbccddeeff'
                                    h'0123456789abcdeffedcba9876543210'
                                    h'0c1987d00c0113a20b82025820012345'
                                    h'6789abcdeffedcba9876543210001122'
                                    h'33445566778899aabbccddeeff0c1a00'
                                    h'012c2201f602f6' \ [
                / set-vars / 19, {
                    / vendor-id / 3 : h'fa6b4a53d5ad5fdfbe9de663e4d41f'
                                      h'fe',
                    / class-id / 4 : h'1492af1425695e48bf429b2d51f2ab45',
                },
                / set-component-index / 12, 0,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'00112233445566778899aabbccddeeff0123456789ab'
                        h'cdeffedcba9876543210' ],
                    / size / 12 : 34768,
                },
                / set-component-index / 12, 1,
                / set-vars / 19, {
                    / digest / 11 : [ 2,
                        h'0123456789abcdeffedcba9876543210001122334455'
                        h'66778899aabbccddeeff' ],
                    / size / 12 : 76834,
                },
                / condition-vendor-id / 1, None,
                / condition-class-id / 2, None,
            ],
        },
        / apply-image / 9 : h'8c0c0013a106781c687474703a2f2f6578616d70'
                            h'6c652e636f6d2f66696c65312e62696e0c0113a1'
                            h'06781c687474703a2f2f6578616d706c652e636f'
                            h'6d2f66696c65322e62696e0cf515f6' \ [
            / set-component-index / 12, 0,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file1.bin
            },
            / set-component-index / 12, 1,
            / set-vars / 19, {
                / uri / 6 : http://example.com/file2.bin
            },
            / set-component-index / 12, True,
            / fetch / 21, None,
        ],
        / run-image / 12 : h'880cf503f60c0017f6' \ [
            / set-component-index / 12, True,
            / condition-image / 3, None,
            / set-component-index / 12, 0,
            / run / 23, None,
        ],
    }
}
]]></artwork></figure>

<t>Total size of outer wrapper without COSE authentication object: 268</t>

<t>Outer:</t>

<figure><artwork><![CDATA[
a201f602590105a5010102070358a4a20257828245466c617368430034018245466c6173
68430004020458878e13a20350fa6b4a53d5ad5fdfbe9de663e4d41ffe04501492af1425
695e48bf429b2d51f2ab450c0013a20b8202582000112233445566778899aabbccddeeff
0123456789abcdeffedcba98765432100c1987d00c0113a20b820258200123456789abcd
effedcba987654321000112233445566778899aabbccddeeff0c1a00012c2201f602f609
584b8c0c0013a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62
696e0c0113a106781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e6269
6e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

<t>Total size of outer wrapper with COSE authentication object: 353</t>

<t>Signed Outer:</t>

<figure><artwork><![CDATA[
a2015854d28443a10126a1044874657374206b6579f65840d00cd62be643247904621f29
56b11b97fcbcd22f87701dd9008e949f8c801f55d7095b545d6db0060bd47c5f78ee5cb1
fea17c875a36a599aec4e8b876cfdae702590105a5010102070358a4a20257828245466c
617368430034018245466c617368430004020458878e13a20350fa6b4a53d5ad5fdfbe9d
e663e4d41ffe04501492af1425695e48bf429b2d51f2ab450c0013a20b82025820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100c1987d00c0113
a20b820258200123456789abcdeffedcba987654321000112233445566778899aabbccdd
eeff0c1a00012c2201f602f609584b8c0c0013a106781c687474703a2f2f6578616d706c
652e636f6d2f66696c65312e62696e0c0113a106781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e0cf515f60c49880cf503f60c0017f6
]]></artwork></figure>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Commands</t>
  <t>standard Parameters</t>
  <t>standard Algorithm identifiers</t>
  <t>standard text values</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="Architecture"/> and in <xref target="Information"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC6920" target='https://www.rfc-editor.org/info/rfc6920'>
<front>
<title>Naming Things with Hashes</title>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='D.' surname='Kutscher' fullname='D. Kutscher'><organization /></author>
<author initials='C.' surname='Dannewitz' fullname='C. Dannewitz'><organization /></author>
<author initials='B.' surname='Ohlman' fullname='B. Ohlman'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<author initials='P.' surname='Hallam-Baker' fullname='P. Hallam-Baker'><organization /></author>
<date year='2013' month='April' />
<abstract><t>This document defines a set of ways to identify a thing (a digital object in this case) using the output from a hash function.  It specifies a new URI scheme for this purpose, a way to map these to HTTP URLs, and binary and human-speakable formats for these names. The various formats are designed to support, but not require, a strong link to the referenced object, such that the referenced object may be authenticated to the same degree as the reference to it.  The reason for this work is to standardise current uses of hash outputs in URLs and to support new information-centric applications and other uses of hash outputs in protocols.</t></abstract>
</front>
<seriesInfo name='RFC' value='6920'/>
<seriesInfo name='DOI' value='10.17487/RFC6920'/>
</reference>


<reference anchor="Architecture" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02">
  <front>
    <title>A Firmware Update Architecture for Internet of Things Devices</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-architecture-02"/>
</reference>
<reference anchor="Information" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02">
  <front>
    <title>Firmware Updates for Internet of Things Devices - An Information Model for Manifests</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2019" month="January"/>
  </front>
  <format type="HTML" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-02"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
pv136AEA

-->

</rfc>

