<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-01" category="std">

  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="24"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
enables delegation of different rights to mutually distrustful entities
for use with different purposes or components in the context of firmware
update.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying firmware updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term trust anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software components from multiple software signing authorities.</t>
  <t>a mechanism to remove an uneeded component</t>
  <t>single-object dependencies</t>
  <t>a partly encrypted manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All dependency manifests should be present before any payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All dependencies must be validated prior to loading.</t>
</list></t>

<t>Two steps are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t><strong>Verify delegation chains</strong></t>
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t><strong>Resolve dependencies.</strong></t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>In addition, when multiple manifests are used for an update, each manifest's steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accomodate the additional metadata needed to enable these features, the envelope and manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation chains and Integrated Dependencies
The Common metadata section in the Manifest also gains a list of dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation"><name>Delegation Chains</name>

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Sectino 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info"><name>Delegation Chains</name>

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A dependency is another SUIT_Envelope that describes additional components.</t>

<t>Dependency manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios, for example:</t>

<t><list style="symbols">
  <t>An IoT device may contain a processor in its radio in addition to the primary processor. These two processors may have separate firmware with separate signing authorities. Dependencies allow the firmware for the primary processor to reference a manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of update payloads. The network operator overrides the URI of payload by providing a dependent manifest that references the original manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new firmware version before releasing it. The configuration is delivered as a binary in the same way as a firmware image. The device operator references the firmware manifest from the firmware author in their own manifest which also defines the configuration.</t>
</list></t>

<t>By using dependencies, components such as software, configuration, models, and other resources authenticated by different trust anchors can be delivered to devices.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling dependencies. By default, any signature of a dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different components/commands/parameters), it MAY choose to skip signature verification of dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all components specified in a dependency, then that dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Components that should be treated as dependency manifests are identified in the suit-common metadata. See section <xref target="structure-change"/> for details.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>
With the addition of dependencies, some changes are necessary to the abstract machine, outside the typical scope of added commands. These changes alter the behaviour of an existing command and way that the parser processes manifests:</t>

<t><list style="symbols">
  <t>Two new commands are introduced.  <list style="symbols">
      <t>Process dependency.</t>
      <t>Is Dependency.</t>
    </list></t>
  <t>Dependency manifests are also components. All commands may target dependency manifests as well as components, with one exception: process dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lock-step with the Root Manifest. This means that every dependency's current command sequence must be executed before a dependent's later command sequence may be executed. For example, every dependency's Dependency Resolution step MUST be executed before any dependent's payload fetch step.</t>
  <t>When performing a suit-condition-image-match operation on a component, the manifest processor MUST first determine whether or not the component is a dependency manifest. If identified as a dependency manifest envelope, the manifest processor MUST compute the digest over only the SUIT_Manifest bstr, not the complete SUIT_Manifest_Envelope. This is so that severable elements, added or removed signatures, and delegations do not affect the integrity measurements of the manifest.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies' sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Loads the specified component as a dependency manifest envelope.</t>
  <t>Authenticates the dependency manifest</t>
  <t>Executes the common-sequence section of the dependency manifest</t>
  <t>Executes the section of the dependency manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the commands needed to acquire and process the dependencies of the current manifest. Ideally, all dependency manifests should be fetched before any payload is fetched to ensure that all manifests are available and authenticated before any of the (larger) payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All commands are modified in that they can also target dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similarly to suit-directive-override-parameters, suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. Set Parameters is for use when dependencies are used because it allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This allows dependent manifests to change the behavior of a manifest, a dependency that wishes to enforce a specific value of a parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is "fetch payload," this will execute "common" in the current dependency, then "fetch payload" in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current component index does not have an entry in the suit-dependencies map, then this command MUST Abort.</t>

<t>If the current component is True, then this directive applies to all dependencies. If the current section is "common," then the command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether or not the current component index is present in the dependency list. If the current component is in the dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all dependencies or on all non-dependency components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>suit-directive-unlink applies to manifests. When the components defined by a manifest are no longer needed, the manifest processor unlinks the manifest to inform the manifest processor that they are no longer needed. The unlink command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given manifest more than once, and the manifest processor must enforce this. The manifest processor MAY choose to ignore a Unlink directive depending on device policy.</t>

<t>When the reference counter reaches zero, the suit-uninstall command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in manifest processors.</t>

</section>
</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>Because some operations treat dependency manifests differently from other components, it is necessary to identify them. SUIT_Dependencies identifies which components from suit-components (See Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as dependency manifest envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a component prefix or other metadata may be delivered with the component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The components specified by SUIT_Dependency will contain a Manifest Envelope that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional components, it may be that there is a need to uninstall the components that have been installed by a manifest. Where this is expected, the uninstall command sequence can provide the sequence needed to cleanly remove the components defined by the manifest and its dependencies. In general, suit uninstall will contain primarily unlink directives.</t>

<t>WARNING: This can cause faults where there are loose dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a component can be removed while it is depended upon by another component. To avoid dependency faults, a manifest author MAY use explicit dependencies where possible, or a manifest processor MAY track references to loose dependencies via reference counting in the same way as explicit dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The Uninstall command sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/> of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any dependency is declared, the dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests"><name>Composite Manifests</name>

<t>An implementer MAY choose to place a dependency's envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST be a text string. The URI for the dependency MUST match the text string key of the dependent's envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a dependency manifest that is removed from the envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/></t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-manifest. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all dependency manifests, the following commands are added to the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Fetch</t>
          <t>Condition Image Match</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The image fetch sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no commands, succeeds immediately)
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some components are "installed" or "loaded" it is more productive to use lists of component indices rather than Component Index = True. For example, to install several components, the following commands should be placed in the image install sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument containing list of destination component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index directive, with argument containing list dependency component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-command-sequences"><name>SUIT Command Sequences</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Resolution</c>
      <c>&#160;</c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>7</c>
      <c>Is Dependency</c>
      <c>suit-directive-is-dependency</c>
      <c><xref target="suit-directive-is-dependency"/></c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
      <c>&#160;</c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='RFC8392' target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference anchor='RFC8747' target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='L. Seitz' initials='L.' surname='Seitz'><organization/></author>
<author fullname='G. Selander' initials='G.' surname='Selander'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='March' year='2020'/>
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='7' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-20'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   establishment is provided by hybrid public-key encryption (HPKE) and
   AES Key Wrap (AES-KW).  HPKE uses public key cryptography while AES-
   KW uses a pre-shared key-encryption key.  Encryption of the plaintext
   is accomplished with conventional symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= SUIT_Integrated_Dependency

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

SUIT_Integrated_Dependency = (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)
suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution => \
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-delegation = 1
suit-dependency-resolution = 7
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-is-dependency            = 7
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
H4sIAGvIVmMAA+09a3Pb2HXf+Stu7c5EWpO05XWyttJNK1vaRFM/tpbcbZrN
eEDgkkIEAiwASmZk5bf0t/SX9TzvAwBJJ01mkml2JhOZwL333HPP+3ExmUxG
bd4W9thcfDi/NG+SMp/bpjVnn1pbNnlVNmZe1ebNumjzVWHNZb2Gp6fVMsnL
ZpTMZrW9kbHxo6xKy2QJ82Z1Mm8nuW3nk2adt5MWX5tk/NrkydEoTVq7qOrN
sWnabDTKV/WxoZeePnny4snTUVLbBJaw6brO283otqqvF3W1XvGyo2u7gZ+y
Y3NetrYubTs5xRVHo6ZNyuxjUlQlQLGxzWiVH4+MqeepzZp2U8ivxrRVGvyZ
l5ktW/2hqeq2tvPG/XuzjP7Z1nnqXk6r5RLGuqd5WeSlX8Z+aidFDpuHSWZV
Aa9Nqq8ewRPA1TJZrfJyEcDxsbA3Fl96Nhol6/aqqgH6CTzD/wB1x+bl1Lyp
6qSU3xjdL2tbZkkZPanqBZzr75MWzvPYnNRL8zpf5q3N5LmFsyiOzYyHTpc4
dIon9i8LfDKFfY06a//r1Fwm18kmWSbR8v9qy+6DePWLs1fv3phX76Zj8/ry
dBpDcG3LaSujewCUVb2ESW4snuL77159/eL5z+TPb54+fS5/Pv/6xVP985tn
38ifL54cvdA/j54+wz/PJ6dTT5VLIfxjIMByHq4Uv7deZUCu+HqysHjY/Vfm
eb28BaKd2DKtNyvadvhSa+1qktTpFZxA2q5rWGU0mUxMMgNqSlKg3MurvDHN
yqb5PE8JbyazTVrnM9sY6zmzrUx7ZZn7dAOGgTcHCfCgnQP9ZXBi5u5ueL/3
94fE4OvG4muZXRXVhojY3Obt1WipjE8caYRtp+YEXr3JU2uuksYAwcALV0B1
wGvRm+b2Cggib0e2TGYFQJ/Zwi54S9XcZPl8boHqWlPni6uWdrRct+ukKDbw
sKGp5uvCwCt5mwNrKKwIXDB8ta5XVQPzw2MglhXAgVsAABBBaVUi8+GKejgj
Psgpo36ZZ1lhR6OHBqVIXWXrFEEcjU5pkw1urjWLyszspioz0wCrFnbS5IvS
Ajw0lantf61zQARhA4Eo7CdTr3HXCDWjFgY6GGQgYPM7eG4/JThkLIgFrCYb
nRMo5CsDgmwBxAPcyxhOyhSEAp+TSczSpnACebNEJAqa9TDglwbehT9wOEhM
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
048dTnz0YktrVv+/b83XX/OnVv8XW+Z5yzCPAAA=

-->

</rfc>

