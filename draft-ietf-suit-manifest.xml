<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-09" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2020" month="November" day="02"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about code/data obtained by a recipient (chiefly
the firmware for an IoT device), where to find the that code/data, the
devices to which it applies, and cryptographic information protecting
the manifest. Software updates and Trusted Invocation both tend to use
sequences of common operations, so the manifest encodes those sequences
of operations, rather than declaring the metadata.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata describing one or more code or data payloads and how to:</t>

<t><list style="symbols">
  <t>Obtain any dependencies</t>
  <t>Obtain the payload(s)</t>
  <t>Install them</t>
  <t>Verify them</t>
  <t>Load them into memory</t>
  <t>Invoke them</t>
</list></t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>a Firmware Author to reason about releasing a firmware.</t>
  <t>a Network Operator to reason about compatibility of a firmware.</t>
  <t>a Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>a Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>a device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>a device to reason about the applicability of a firmware.</t>
  <t>a device to reason about the installation of a firmware.</t>
  <t>a device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or Trusted Invocation are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In this document, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and Trusted Invocation.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and Trusted Invocation use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications (TAs) in a Trusted Execution Environment (TEE), as discussed in <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing software updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of requirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivered to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Invocation Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a Message Authentication Code (MAC), to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads or Dependencies.</t>
  <t>Delegation Chains (see <xref target="ovr-delegation"/>) allow a Recipient to work from one of its Trust Anchors to an authority of the Authentication Block.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, including lists of dependencies and affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable elements.</t>
    </list></t>
  <t>Severable elements (see <xref target="ovr-severable"/>).</t>
  <t>Integrated dependencies (see <xref target="ovr-integrated"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependencies            |      +-> +-----------------------+
| Components IDs          |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads or dependencies. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (<xref target="ovr-auth"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains a bstr-wrapped <xref target="SUIT_Digest"></xref> and one or more <xref target="RFC8152"/> CBOR Object Signing and Encryption (COSE) authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>Each of these objects is used in detached payload mode. The payload is the bstr-wrapped SUIT_Digest.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which manifest is newest and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, and <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of three parts: a list of dependencies, a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/>, and <xref target="SUIT_Dependency"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Dependency Resolution, Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Invocation Command Sequences are: System Validation, Image Loading, and Image Invocation. A Invocation Procedure is the complete set of each Invocation Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command.</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, Concise Software Identifiers (<xref target="I-D.ietf-sacm-coswid">CoSWID</xref>), or Text data. Integrated Dependencies and Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a Severable Element (<xref target="ovr-severable"/>). It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the Envelope (<xref target="ovr-envelope"/>) that have Integrity Check Values (<xref target="ovr-integrity"/>) in the Manifest (<xref target="ovr-manifest"/>).</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system severs the Text and CoSWID sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Dependencies and Payloads">

<t>In some cases, it is beneficial to include a dependency or a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest requires encryption, it must be referenced as a dependency, so a trivial manifest may be used to enclose the encrypted manifest. The encrypted manifest may be contained in the dependent manifest’s envelope.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="composite-manifests"/>, <xref target="encrypted-manifests"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Manifest Processor Behavior">

<t>This section describes the behavior of the manifest processor and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the manifest processor: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Manifest Processor Setup">

<t>Prior to executing any command sequence, the manifest processor or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the manifest processor or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the manifest processor can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest, according to application-specific policy.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported Component Identifier encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
  <t>Missing component from a set.</t>
  <t>Required parameter not supplied.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Selecting an older manifest in the event of failure of the latest valid manifest is a robustness mechanism that is necessary for supporting the requirements in <xref target="I-D.ietf-suit-architecture"/>, section 3.5. It may not be appropriate for all applications. In particular Trusted Execution Environments MAY require a failure to invoke a new installation, rather than a rollback approach. See <xref target="I-D.ietf-suit-information-model"/>, Section 4.2.1 for more discussion on the security considerations that apply to rollback.</t>

<t>Following these initial tests, the manifest processor clears all parameter storage. This ensures that the manifest processor begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the manifest processor MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity. Where a device supports only one level of access, it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device supports more than one trusted party, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Once a valid, authentic manifest has been selected, the manifest processor MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component is supported.</t>

<t>For each listed component, the manifest processor MUST provide storage for the supported parameters. If the manifest processor does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The manifest processor SHOULD check that the common sequence contains at least Check Vendor Identifier command and at least one Check Class Identifier command.</t>

<t>Because the common sequence contains Check Vendor Identifier and Check Class Identifier command(s), no custom commands are permitted in the common sequence. This ensures that any custom commands are only executed by devices that understand them.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index or Set Dependency Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, where an update is composed of all the
TODO: Wording</t>

<t>manifest and its dependencies. This manifest is called the Root Manifest.</t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient receives manifests over an unauthenticated channel, exposing it to more inauthentic or incompatible manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>The guidelines in Creating Manifests (<xref target="creating-manifests"/>) require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to conditions and the following directives: Override Parameters, Set Parameters, Try Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again in its entirety after authenticity validation.</t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>Alternatively, a Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a Trusted Invocation MUST either result in an error, or an invoked image.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by a Manifest Processor–a form of interpreter. This Manifest Processor can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component or dependency. A dependency is another SUIT_Envelope that describes additional components. Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag (<xref target="suit-parameter-soft-failure"/>) is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>To simplify the logic describing the command semantics, the object “current” is used. It represents the component identified by the Component Index or the dependency identified by the Dependency Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
    if component-index is not false
    else dependencies\[dependency-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg]. The actual operation performed for Set Component Index is described by the following pseudocode, however, because of the definition of current (above), these are semantically equivalent.</t>

<figure><artwork><![CDATA[
component-index := arg
dependency-index := false
]]></artwork></figure>

<t>Similarly, Set Dependency Index is semantically equivalent to current := dependencies[arg]</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency. Most commands operate on either a component or a dependency. Setting the Component Index clears the Dependency Index. Setting the Dependency Index clears the Component Index.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for-each k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Offset</c>
      <c>assert(offsetof(current) == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Check Image Not Match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(current, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>try-each-done if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="index-true" title="Special Cases of Component Index and Dependency Index">

<t>Component Index and Dependency Index can each take on one of three types:</t>

<t><list style="numbers">
  <t>Integer</t>
  <t>Array of integers</t>
  <t>True</t>
</list></t>

<t>Integers MUST always be supported by Set Component Index and Set Dependency Index. Arrays of integers MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 3 or more components or 3 or more dependencies, respectively. True MUST be supported by Set Component Index and Set Dependency Index if the Recipient supports 2 or more components or 2 or more dependencies, respectively. Each of these operates on the list of components or list of dependencies declared in the manifest.</t>

<t>Integer indices are the default case as described in the previous section. An array of integers represents a list of the components (Set Component Index) or a list of dependencies (Set Dependency Index) to which each subsequent command applies. The value True replaces the list of component indices or dependency indices with the full list of components or the full list of dependencies, respectively, as defined in the manifest.</t>

<t>When a command is executed, it either 1. operates on the component or dependency identified by the component index or dependency index if that index is an integer, or 2. it operates on each component or dependency identified by an array of indicies, or 3. it operates on every component or every dependency if the index is the boolean True. This is described by the following pseudocode:</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else if component-index is integer:
    current-list = [ components[component-index] ]
else if dependency-index is true:
    current-list = dependencies
else if dependency-index is array:
    current-list = [ dependencies[idx] for idx in dependency-index ]
else:
    current-list = [ dependencies[dependency-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

<t>Try Each and Run Sequence are affected in the same way as other commands: they are invoked once for each possible Component or Dependency. This means that the sequences that are arguments to Try Each and Run Sequence are NOT invoked with Component Index = True or Dependency Index = True, nor are they invoked with array indices. They are only invoked with integer indices. The interpreter loops over the whole sequence, setting the Component Index or Dependency Index to each index in turn.</t>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

<t>When a serialized Manifest Processor encounters a component or dependency index of True, it does not ignore any commands. It applies them to the current component or dependency on each iteration.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may issue each or every command concurrently until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it waits for all issued commands to complete before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing MUST halt until all issued commands have completed:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, a manifest author may collect sequences of commands in a Run Sequence command. Then, each of these sequences MAY be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index or Set Dependency Index directive with the following exception: when the index is either True or an array of indices, the Set Component Index or Set Dependency Index is implied. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that issues Run Sequence commands to check that the first element is correct, then issue the sequence to a parallel execution context to handle the remainder of the sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The Manifest Processor MUST also support a Dependency Index of True, which applies to every dependency, as described in <xref target="index-true"/></t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in <xref target="command-behavior"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>The author MUST ensure that all parameters consumed by a command are set prior to invoking that command. Where Component Index = True or Dependency Index = True, this means that the parameters consumed by each command MUST have been set for each Component or Dependency, respectively.</t>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<t>NOTE: On systems that support only a single component and no dependencies, Set Component Index has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</spanx></t>

<section anchor="template-compatibility-check" title="Compatibility Check Template">

<t>The goal of the compatibility check template ensure that Recipients only install compatible images.</t>

<t>In this template all information is contained in the common sequence and the following sequence of commands is used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="uuid-identifiers"/>)</t>
  <t>Check Class Identifier condition (see <xref target="uuid-identifiers"/>)</t>
</list></t>

</section>
<section anchor="template-secure-boot" title="Trusted Invocation Template">

<t>The goal of the Trusted Invocation template is to ensure that only authorized code is invoked; such as in Secure Boot or when a Trusted Application is loaded into a TEE.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

</section>
<section anchor="firmware-download-template" title="Component Download Template">

<t>The goal of the Component Download template is to acquire and store an image.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="suit-parameter-uri"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

<t>Optionally, the Set Parameters directive in the install sequence MAY also contain Encryption Info (see <xref target="suit-parameter-encryption-info"/>), Compression Info (see <xref target="suit-parameter-compression-info"/>), or Unpack Info (see <xref target="suit-parameter-unpack-info"/>) to perform simultaneous download and decryption, decompression, or unpacking, respectively.</t>

</section>
<section anchor="template-install" title="Install Template">

<t>The goal of the Install template is to use an image already stored in an identified component to copy into a second component.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: the Component Download operations are moved from the Payload Install sequence to the Payload Fetch sequence.</t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component (see <xref target="suit-parameter-source-component"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-install-transform" title="Install and Transform Template">

<t>The goal of the Install and Transform template is to use an image already stored in an identified component to decompress, decrypt, or unpack at time of installation.</t>

<t>This template is typically used with the Component Download template, however a modification to that template is required: all Component Download operations are moved from the common sequence and the install sequence to the fetch sequence. The Component Download template targets a download component identifier, while the Install and Transform template uses an install component identifier. In-place unpacking, decompression, and decryption is complex and vulnerable to power failure. Therefore, these identifiers SHOULD be different; in-place installation SHOULD NOT be used without establishing guarantees of robustness to power failure.</t>

<t>The following commands are placed into the common sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive for install component identifier (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for:  <list style="symbols">
      <t>Source Component for download component identifier (see <xref target="suit-parameter-source-component"/>)</t>
      <t>Encryption Info (see <xref target="suit-parameter-encryption-info"/>)</t>
      <t>Compression Info (see <xref target="suit-parameter-compression-info"/>)</t>
      <t>Unpack Info (see <xref target="suit-parameter-unpack-info"/>)</t>
    </list></t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

</section>
<section anchor="template-integrated-payload" title="Integrated Payload Template">

<t>The goal of the Integrated Payload template is to install a payload that is included in the manifest envelope. It is identical to the Component Download template (<xref target="firmware-download-template"/>) except that it places an added restriction on the URI passed to the Set Parameters directive.</t>

<t>An implementer MAY choose to place a payload in the envelope of a manifest. The payload envelope key MAY be a positive or negative integer. The payload envelope key MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the manifest. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the payload. For example, an envelope that contains a payload a key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
<section anchor="template-load-ext" title="Load from Nonvolatile Storage Template">

<t>The goal of the Load from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="template-load-decompress" title="Load &amp; Decompress from Nonvolatile Storage Template">

<t>The goal of the Load &amp; Decompress from Nonvolatile Storage template is to load an image from a non-volatile component into a volatile component, decompressing on-the-fly, for example loading a firmware image from external Flash into RAM.</t>

<t>The following commands are placed into the load sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This template is similar to <xref target="template-load-ext"/> but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

<t>This template can be modified for decryption or unpacking by adding Decryption Info or Unpack Info to the Set Parameters directive.</t>

</section>
<section anchor="template-dependency" title="Dependency Template">

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementer MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see <xref target="secparameters"/>)</t>
      <t>Encryption Info (see <xref target="secparameters"/>)</t>
    </list></t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The goal of the A/B Image Template is to acquire, validate, and invoke one of two images, based on a test.</t>

<t>The following commands are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following commands are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

<t>If Trusted Invocation (<xref target="template-secure-boot"/>) is used, only the run sequence is added to this template, since the common sequence is populated by this template.</t>

<t>NOTE: Any test can be used to select between images, Check Offset Condition is used in this template because it is a typical test for execute-in-place devices.</t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Delegation Chains, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialized variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific values, as described in <xref target="iana"/>.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see <xref target="authentication-info"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list containing a <xref target="SUIT_Digest"></xref> and one or more cryptographic authentication wrappers for the Manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the Manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be a list containing only the SUIT_Digest.</t>

<t>A signing application MUST verify the suit-manifest element against the SUIT_Digest prior to signing.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>To use an encrypted manifest, it must be a dependency of a plaintext manifest. This allows fine-grained control of what information is accessible to intermediate systems for the purposes of management, while still preserving the confidentiality of the manifest contents. This also means that a Recipient can process an encrypted manifest in the same way as an encrypted payload, allowing code reuse.</t>

<t>A template for using an encrypted manifest is covered in Encrypted Manifest Template (<xref target="template-encrypted-manifest"/>).</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a Concise Software Identifier (CoSWID) found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>The CoSWID, Text section, or any Command Sequence of the Update Procedure (Dependency Resolution, Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable element. Severable elements are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps Recipients to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. For convenience, an implementer MAY use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map containing two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text</t>
  <t>SUIT_Component_Identifier =&gt; map</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in suit-common (<xref target="manifest-common"/>) or the suit-common of a dependency.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The YAML (<xref target="YAML"/>)-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A free text representation of the component version</c>
      <c>suit-text-version-required</c>
      <c>A free text expression of the required version number</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="text-version-required" title="text-version-required">

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author SHOULD populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a free text expression that is representative of the version constraints placed on the dependency. This text SHOULD be expressive enough that a device operator can be expected to understand the dependency. This is a free text field and there are no specific formatting rules.</t>

<t>By way of example only, to express a dependency on a component “[‘x’, ‘y’]”, where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<figure><artwork><![CDATA[
[h'78',h'79'] : {
    7 : ">=1.2.5,<2"
}
]]></artwork></figure>

<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid contains a Concise Software Identifier (CoSWID) as defined in <xref target="I-D.ietf-sacm-coswid"/>. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid typically requires no processing by the Recipient. However all Recipients MUST NOT fail if a suit-coswid is present.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of <xref target="SUIT_Dependency"></xref> blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement; at least one manifest in a dependency tree MUST contain a suit-components block.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or Try Each command is required by more than one Command Sequence, placing that parameter or commamd in suit-common-sequence results in a smaller encoding.</t>

<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see <xref target="suit-component-identifier"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. A dependency MAY declare a prefix to the components defined in the dependency manifest. Components are identified by Component Identifiers, but referenced in commands by Component Index; Component Identifiers are arrays of binary strings and a Component Index is an index into the array of Component Identifiers.</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution: suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the invocable manifest or the “process dependencies” directive for any dependents of the invocable manifest. suit-run is OPTIONAL to implement.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 4,5,6 form the Invocation Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true and any failure is treated as a failure of the update/load/invocation</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>A <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a <xref target="reporting-policy">SUIT_Reporting_Policy</xref></t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the Component Identifier tables defined at the beginning of the manifest. For the purpose of setting the index, the two Component Identifier tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive, suit-directive-try-each (<xref target="suit-directive-try-each"/>), is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/invocation, but a parameter is provided to override this behavior. See suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>).</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>To facilitate construction of Reports that describe the success, or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>At the completion of each command, a recipient MAY forward that command’s reporting policy, the result of the command, the current set of parameters, and the system information consumed by the command to a TODO</t>

<t>several information elements are provided to an implementation defined subsystem, the Reporting Engine:</t>

<t><list style="symbols">
  <t>The reporting policies</t>
  <t>The result of the command</t>
  <t>The parameters consumed by the command</t>
  <t>The system information consumed by the command</t>
</list></t>

<t>If the component index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Component, in the order expressed in the Components list or the component index array, respectively. If the dependency index is set to True or an array when a command is executed with a non-zero reporting policy, then the Reporting Engine MUST receive one Record for each Dependency, in the order expressed in the Dependencies list or the component index array, respectively.</t>

<t>This specification does define a particular format of Records or Reports. This specification only defines hints to the Reporting Engine for which Records it should aggregate into the Report. The Reporting Engine MAY choose to ignore these hints and apply its own policy instead.</t>

<t>When used in a Invocation Process, the report MAY form the basis of an attestation report. When used in an Update Process, the report MAY form the basis for one or more log entries.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-parameter-component-offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="cbor-pen-uuid-namespace-identifier" title="CBOR PEN UUID Namespace Identifier">

<t>The CBOR PEN UUID Namespace Identifier is constructed as follows:</t>

<t>It uses the OID Namespace as a starting point, then uses the CBOR OID encoding for the IANA PEN OID (1.3.6.1.4.1):</t>

<figure><artwork><![CDATA[
D8 DE                # tag(111)
   45                # bytes(5)
      2B 06 01 04 01 # X.690 Clause 8.19
#    1.3  6  1  4  1  show component encoding
]]></artwork></figure>

<t>Computing a type 5 UUID from these produces:</t>

<figure><artwork><![CDATA[
NAMESPACE_CBOR_PEN = UUID5(NAMESPACE_OID, h'D86F452B06010401')
NAMESPACE_CBOR_PEN = 08cfcc43-47d9-5696-85b1-9c738465760e
]]></artwork></figure>

</section>
<section anchor="uuid-identifiers" title="Constructing UUIDs">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by identifier conditions (<xref target="identifier-conditions"/>).</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:</t>

<figure><artwork><![CDATA[
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)
]]></artwork></figure>

<t>If the Vendor ID is a UUID, the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(Vendor ID, Class-Specific-Information)
]]></artwork></figure>

<t>If the Vendor ID is a CBOR PEN (see <xref target="suit-parameter-vendor-identifier"/>), the RECOMMENDED method to create a Class ID is:</t>

<figure><artwork><![CDATA[
Class ID = UUID5(
    UUID5(NAMESPACE_CBOR_PEN, CBOR_PEN),
    Class-Specific-Information)
]]></artwork></figure>

<t>Class-specific-information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>suit-parameter-vendor-identifier may be presented in one of two ways:</t>

<t><list style="symbols">
  <t>A Private Enterprise Number</t>
  <t>A byte string containing a UUID (<xref target="RFC4122"/>)</t>
</list></t>

<t>Private Enterprise Numbers are encoded as a relative OID, according to the definition in <xref target="I-D.ietf-cbor-tags-oid"/>. All PENs are relative to the IANA PEN: 1.3.6.1.4.1.</t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="uuid-identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the SUIT_Digest <xref target="SUIT_Digest"/> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expiry date for the use of the manifest encoded as the positive integer number of seconds since 1970-01-01. Implementations that use this parameter MUST use a 64-bit internal representation of the integer.</t>

</section>
<section anchor="suit-parameter-component-offset" title="suit-parameter-component-offset">

<t>This parameter sets the offset in a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its offset into the component’s storage area. This offset MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>SUIT_Compression_Info defines any information that is required for a Recipient to perform decompression operations. SUIT_Compression_Info is a map containing this data. The only element defined for the map in this specification is the suit-compression-algorithm. This document defines the following suit-compression-algorithm’s: ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="I-D.kucherawy-rfc8478bis"/>.</t>

<t>Additional suit-compression-algorithm’s can be registered through the IANA-maintained registry. If such a format requires more data than an algorithm identifier, one or more new elements MUST be introduced by specifying an element for SUIT_Compression_Info-extensions.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a Recipient to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource, encoded as a text string. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either suit-directive-copy (<xref target="suit-directive-copy"/>) or with suit-directive-swap (<xref target="suit-directive-swap"/>). The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for suit-directive-run (<xref target="suit-directive-run"/>). The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with suit-condition-minimum-battery (<xref target="suit-condition-minimum-battery"/>).</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with suit-condition-update-authorized (<xref target="suit-condition-update-authorized"/>) to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when suit-condition-version (<xref target="suit-condition-version"/>) is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>suit-directive-wait (<xref target="suit-directive-wait"/>) directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as suit-parameter-update-priority</c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (seconds since 1970-01-01)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-time-of-day-utc</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00 UTC</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
      <c>suit-wait-event-day-of-week-utc</c>
      <c>uint</c>
      <c>Wait until days since Sunday UTC</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>Indicates a list of URIs from which to fetch a resource. The URI list is encoded as a list of text string, in priority order. CBOR Tag 32 is not used because the meaning of the text string is unambiguous in this context. The Recipient should attempt to fetch the resource from each URI in turn, ruling out each, in order, if the resource is inaccessible or it is otherwise undesirable to fetch from that URI. suit-parameter-uri-list is consumed by suit-directive-fetch-uri-list (<xref target="suit-directive-fetch-uri-list"/>).</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to suit-directive-fetch (<xref target="suit-directive-fetch"/>). Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. SUIT_Process_Dependency must preserve and restore the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside suit-directive-try-each (<xref target="suit-directive-try-each"/>) or suit-directive-run-sequence (<xref target="suit-directive-run-sequence"/>) and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives. It MUST NOT be used in the common sequence. This effectively scopes each custom command to a particular Vendor Identifier/Class Identifier pair.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-condition-component-offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Abort</c>
      <c>suit-condition-abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>Custom Condition</c>
      <c>suit-condition-custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary definition by the author of a manifest processor. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. Each component MAY match more than one identifier. Care is needed to ensure that manifests correctly identify their targets using these conditions. Using only a generic class ID for a device-specific firmware could result in matching devices that are not compatible.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>) for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the suit-parameter-image-digest (<xref target="suit-parameter-image-digest"/>). If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the suit-parameter-use-before parameter (<xref target="suit-parameter-use-before"/>), which must have already been set as a parameter, encoded as seconds after 1970-01-01 00:00:00 UTC. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-offset" title="suit-condition-component-offset">

<t>Verify that the offset of the current component matches the offset set in suit-parameter-component-offset (<xref target="suit-parameter-component-offset"/>). This condition allows a manifest to select between several images to match a target offset.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient’s battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes suit-parameter-minimum-battery (<xref target="suit-parameter-minimum-battery"/>).</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. suit-parameter-update-priority (<xref target="suit-parameter-update-priority"/>) provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component’s version against the version info specified in suit-parameter-version (<xref target="suit-parameter-version"/>)</t>

</section>
<section anchor="suit-condition-abort" title="suit-condition-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each (<xref target="suit-directive-try-each"/>).</t>

</section>
<section anchor="SUIT_Condition_Custom" title="suit-condition-custom">

<t>suit-condition-custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Fetch URI list</c>
      <c>suit-directive-fetch-uri-list</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST be terminated.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value “True” is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
TODO: Component list</t>

<t>If the following commands apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.
TODO: Component list|Dependency List</t>

<t>If dependency index is set to True when a command is invoked, then the command applies to all dependencies, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the dependency index is set to True, it must execute the command once for each possible dependency index, ensuring that the command receives the parameters corresponding to that dependency index.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence instances, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” then the command sequence MUST be terminated with an error.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and dependency-index, respectively. If component-index or dependency-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

</section>
<section anchor="suit-directive-fetch-uri-list" title="suit-directive-fetch-uri-list">

<t>suit-directive-fetch-uri-list uses the same semantics as suit-directive-fetch (<xref target="suit-directive-fetch"/>), except that it iterates over the URI List (<xref target="suit-parameter-uri-list"/>) to select a URI to fetch from.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. As described in <xref target="index-true"/> component index may be a single integer, a list of integers, or True. suit-directive-copy retrieves each component specified by the current component-index, respectively. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t>suit-directive-copy reads its source from suit-parameter-source-component (<xref target="suit-parameter-source-component"/>).</t>

<t>If either the source component parameter or the source component itself is absent, this command fails.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through suit-parameter-run-arguments (<xref target="suit-parameter-run-args"/>) and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t>suit-parameter-soft-failure (<xref target="suit-parameter-soft-failure"/>) defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. As with suit-directive-copy, if the source component is missing, this command fails.</t>

<t>If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the CoSWID, Text section, or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope. The keys for the envelope elements have the same values as the keys for the manifest elements.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or Component Identifier prefixes to the listed identities or identity groups. Any identity can verify an image digest, but fetching into or fetching from a Component Identifier requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the Component Identifier or Component Identifier prefix that an identity can use, and also lists the commands and parameters that the identity can use in combination with that Component Identifier.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The SUIT digest is a CBOR List containing two elements: a suit-digest-algorithm-id and a bstr containing the bytes of the digest.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to:</t>

<t><list style="symbols">
  <t>allocate CBOR tag 48 in the CBOR Tags registry for the SUIT Envelope.</t>
  <t>allocate CBOR tag 480 in the CBOR Tags registry for the SUIT Manifest.</t>
  <t>allocate media type application/suit-envelope in the Media Types registry.</t>
  <t>setup several registries as described below.</t>
</list></t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>3</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>&#160;</c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>&#160;</c>
      <c>5</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>&#160;</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>&#160;</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>&#160;</c>
      <c>14</c>
      <c>Abort</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>15</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>&#160;</c>
      <c>16</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Reserved</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>&#160;</c>
      <c>21</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>&#160;</c>
      <c>22</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>&#160;</c>
      <c>23</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>&#160;</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>&#160;</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>&#160;</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>&#160;</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>&#160;</c>
      <c>28</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>&#160;</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>&#160;</c>
      <c>30</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>&#160;</c>
      <c>31</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>&#160;</c>
      <c>32</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>&#160;</c>
      <c>nint</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>&#160;</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>2</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>3</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>4</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>5</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>12</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>13</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>14</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>18</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>19</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>20</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>21</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>22</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>23</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>24</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>27</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>28</c>
      <c>Version</c>
      <c>{{suit-parameter-version}</c>
      <c>29</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>30</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Update Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Manifest JSON Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Manifest YAML Source</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-component-text-values" title=" SUIT Component Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Vendor Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>2</c>
      <c>Model Name</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>3</c>
      <c>Vendor Domain</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>4</c>
      <c>Model Info</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>5</c>
      <c>Component Description</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>6</c>
      <c>Component Version</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>7</c>
      <c>Component Version Required</c>
      <c><xref target="manifest-digest-text"/></c>
      <c>nint</c>
      <c>Custom</c>
      <c><xref target="manifest-digest-text"/></c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<section anchor="suit-digest-algorithm-identifiers" title="SUIT Digest Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>1</c>
      <c>SHA224</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>2</c>
      <c>SHA256</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>3</c>
      <c>SHA384</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>4</c>
      <c>SHA512</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>5</c>
      <c>SHA3-224</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>6</c>
      <c>SHA3-256</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>7</c>
      <c>SHA3-384</c>
      <c><xref target="SUIT_Digest"/></c>
      <c>8</c>
      <c>SHA3-512</c>
      <c><xref target="SUIT_Digest"/></c>
</texttable>

</section>
<section anchor="suit-compression-algorithm-identifiers" title="SUIT Compression Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>zlib</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>2</c>
      <c>Brotli</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>3</c>
      <c>zstd</c>
      <c><xref target="suit-parameter-compression-info"/></c>
</texttable>

</section>
<section anchor="unpack-algorithms" title="Unpack Algorithms">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>HEX</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>2</c>
      <c>ELF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>3</c>
      <c>COFF</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>4</c>
      <c>SREC</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
</texttable>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="I-D.ietf-suit-architecture"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='October' day='21' year='2020' />

<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints.  Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities but it also enables other important capabilities such as updating configuration settings as well as adding new functionality.  In addition to the definition of terminology and an architecture this document motivates the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-14.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='October' day='28' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-08.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='13' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-12.txt' />
</reference>



<reference anchor="I-D.ietf-sacm-coswid">
<front>
<title>Concise Software Identification Tags</title>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<author initials='J' surname='Fitzgerald-McKay' fullname='Jessica Fitzgerald-McKay'>
    <organization />
</author>

<author initials='C' surname='Schmidt' fullname='Charles Schmidt'>
    <organization />
</author>

<author initials='D' surname='Waltermire' fullname='David Waltermire'>
    <organization />
</author>

<date month='May' day='1' year='2020' />

<abstract><t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports the same features as SWID tags, as well as additional semantics that allow CoSWIDs to describe additional types of information, all in a more memory efficient format.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-sacm-coswid-15' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-sacm-coswid-15.txt' />
</reference>



<reference anchor="I-D.ietf-cbor-tags-oid">
<front>
<title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='S' surname='Leonard' fullname='Sean Leonard'>
    <organization />
</author>

<date month='October' day='28' year='2020' />

<abstract><t>The Concise Binary Object Representation (CBOR, draft-ietf-cbor- 7049bis) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.  The present document defines CBOR tags for object identifiers (OIDs). It is intended as the reference document for the IANA registration of the CBOR tags so defined.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-cbor-tags-oid-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-cbor-tags-oid-02.txt' />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8747" target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2020' month='March' />
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor="I-D.kucherawy-rfc8478bis">
<front>
<title>Zstandard Compression and the application/zstd Media Type</title>

<author initials='Y' surname='Collet' fullname='Yann Collet'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='April' day='23' year='2020' />

<abstract><t>Zstandard, or "zstd" (pronounced "zee standard"), is a data compression mechanism.  This document describes the mechanism and registers a media type and content encoding to be used when transporting zstd-compressed content via Multipurpose Internet Mail Extensions (MIME).  It also registers a corresponding media type, content encoding, and structured syntax suffix.  Despite use of the word "standard" as part of its name, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.  This document replaces and obsoletes RFC 8478.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-kucherawy-rfc8478bis-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-kucherawy-rfc8478bis-05.txt' />
</reference>


<reference anchor="YAML" target="https://yaml.org/">
  <front>
    <title>YAML Ain't Markup Language</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope_Tagged = #6.48(SUIT_Envelope)
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication = [
    bstr .cbor SUIT_Digest,
    * bstr .cbor SUIT_Authentication_Block
]

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Severable_Manifest_Members = (
  ? suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

SUIT_Integrated_Payload = (suit-integrated-payload-key => bstr)
SUIT_Integrated_Dependency = (
    suit-integrated-payload-key => bstr .cbor SUIT_Envelope
)
suit-integrated-payload-key = nint / uint .ge 24

SUIT_Manifest_Tagged = #6.480(SUIT_Manifest)

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Manifest_Members,
    SUIT_Severable_Members_Digests,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unserverble-manifest-member-extensions,
)

SUIT_Severable_Members_Digests = (
  ? suit-dependency-resolution => SUIT_Digest,
  ? suit-payload-fetch => SUIT_Digest,
  ? suit-install => SUIT_Digest,
  ? suit-text => SUIT_Digest,
  ? suit-coswid => SUIT_Digest,
  * $$severable-manifest-members-digests-extensions
)

SUIT_Common = {
    ? suit-dependencies           => SUIT_Dependencies,
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Component_Identifier =  [* bstr]

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  IndexArg)
SUIT_Common_Commands //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})

IndexArg /= uint
IndexArg /= bool
IndexArg /= [+uint]

SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-image-not-match,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-use-before,        SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-minimum-battery,   SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-update-authorized, SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-version,           SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-component-offset,  SUIT_Rep_Policy)
SUIT_Condition //= (suit-condition-abort,             SUIT_Rep_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  IndexArg)
SUIT_Directive //= (suit-directive-set-dependency-index, IndexArg)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,             SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-copy,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-swap,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-run,               SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-wait,              SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-fetch-uri-list,    SUIT_Rep_Policy)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Rep_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier =>
    (RFC4122_UUID / cbor-pen))
cbor-pen = #6.112(bstr)

SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

SUIT_Parameters //= (suit-parameter-uri-list =>
    bstr .cbor SUIT_URI_List)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    * $$SUIT_Compression_Info-extensions,
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    * $$SUIT_Unpack_Info-extensions,

}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_URI_List = [+ tstr ]

SUIT_Text_Map = {
    * SUIT_Component_Identifier => {
        SUIT_Text_Component_Keys
    },
    SUIT_Text_Keys
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    ? suit-text-version-required      => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-abort                    = 14
suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1

suit-unpack-algorithm  = 1

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
suit-text-version-required      = 7
]]></artwork></figure>

</section>
<section anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. Even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<t>Note that reporting policies are declared for each non-flow-control command in these examples. The reporting policies used in the examples are described in the following tables.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Label</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Rec-Pass</c>
      <c>suit-send-record-on-failure</c>
      <c>Rec-Fail</c>
      <c>suit-send-sysinfo-success</c>
      <c>Sys-Pass</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Sys-Fail</c>
</texttable>

<texttable>
      <ttcol align='left'>Command</ttcol>
      <ttcol align='left'>Sys-Fail</ttcol>
      <ttcol align='left'>Sys-Pass</ttcol>
      <ttcol align='left'>Rec-Fail</ttcol>
      <ttcol align='left'>Rec-Pass</ttcol>
      <c>suit-condition-vendor-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-class-identifier</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-image-match</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>1</c>
      <c>suit-condition-component-offset</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>1</c>
      <c>suit-directive-fetch</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-copy</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
      <c>suit-directive-run</c>
      <c>0</c>
      <c>0</c>
      <c>1</c>
      <c>0</c>
</texttable>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
</list></t>

<t>It also serves as the minimum example.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'5c097ef64bf3bb9b494e71e1f2418eef8d466cc902f639a855ec9af3e9eddb99'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'5c097ef64bf3bb9b494e71e1f2418eef8d466cc902f639a855ec9af3e9eddb99'
                    ]),
                    / signature / h'60f5c3d03a3aa759bfef2ef0f5f97a93b1
f5e741f7463f4385af88513a5c2957bea2d6c4cfddd03392a267aab0fc0fd515560ed5
8e33fad26ac32a024c5a7143'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:0,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  159</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a2025827815824820258205c097ef64bf3bb9b494e71e1f2418eef8d466c
c902f639a855ec9af3e9eddb99035871a50101020003585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f0a
4382030f0c43821702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  272</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a2025898825824820258205c097ef64bf3bb9b494e71e1f2418eef8d466c
c902f639a855ec9af3e9eddb99586fd28443a10126a05824820258205c09
7ef64bf3bb9b494e71e1f2418eef8d466cc902f639a855ec9af3e9eddb99
584060f5c3d03a3aa759bfef2ef0f5f97a93b1f5e741f7463f4385af8851
3a5c2957bea2d6c4cfddd03392a267aab0fc0fd515560ed58e33fad26ac3
2a024c5a7143035871a50101020003585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f0a4382030f0c4382
1702
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Simultaneous download and installation of payload. No secure boot is present in this example to demonstrate a download-only manifest.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'987eec85fa99fd31d332381b9810f90b05c2e0d4f284a6f4211207ed00fff750'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'987eec85fa99fd31d332381b9810f90b05c2e0d4f284a6f4211207ed00fff750'
                    ]),
                    / signature / h'750141d65b4f20a88dc70c6785a67e0f4f
085aead83ba2289d6e37271508cc91e0a0592f5c940c2257c9c0b26403c0ba4477f2ce
37b60089fe02cde7911d1c15'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  194</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820987eec85fa99fd31d332381b9810f90b05c2e0
d4f284a6f4211207ed00fff750035894a50101020103585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f09
58258613a115781b687474703a2f2f6578616d706c652e636f6d2f66696c
652e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  307</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589882582482025820987eec85fa99fd31d332381b9810f90b05c2e0
d4f284a6f4211207ed00fff750586fd28443a10126a0582482025820987e
ec85fa99fd31d332381b9810f90b05c2e0d4f284a6f4211207ed00fff750
5840750141d65b4f20a88dc70c6785a67e0f4f085aead83ba2289d6e3727
1508cc91e0a0592f5c940c2257c9c0b26403c0ba4477f2ce37b60089fe02
cde7911d1c15035894a50101020103585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f0958258613a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502
030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-secure-boot-severed-fields" title="Example 2: Simultaneous Download, Installation, Secure Boot, Severed Fields">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>This example also demonstrates severable elements (<xref target="ovr-severable"/>), and text (<xref target="manifest-digest-text"/>).</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'75685579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'75685579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a'
                    ]),
                    / signature / h'861b9bfb449125742baa648bc9d148cba4
5519cca8efecf705c2165ecdecaeba8b6ce2131284e66708788d741e8779d5973fa8e2
5da49eb203c81920719da949'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'3ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d2'
        ],
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-run / 23,2
        ]),
        / text / 13:[
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'23f48b2e2838650f43c144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8'
        ],
    }),
    / install / 9:bstr .cbor ([
        / directive-set-parameters / 19,{
            / uri /
21:'http://example.com/very/long/path/to/file/file.bin',
        } ,
        / directive-fetch / 21,2 ,
        / condition-image-match / 3,15
    ]),
    / text / 13:bstr .cbor ({
        [h'00']:{
                / vendor-domain / 3:'arm.com',
                / component-description / 5:'This component is a
demonstration. The digest is a sample pattern, not a real one.',
            }
    }),
}
]]></artwork></figure>

<t>Total size of the Envelope without COSE authentication object or Severable Elements:  233</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a20258278158248202582075685579a83babd71ec8ef22fa49ac873f78a7
08a43a674e782ad30b6598d17a0358bba70101020203585fa20281814100
0458568614a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af14
25695e48bf429b2d51f2ab450358248202582000112233445566778899aa
bbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f09
820258203ee96dc79641970ae46b929ccf0b72ba9536dd846020dbdc9f94
9d84ea0e18d20a4382030f0c438217020d8202582023f48b2e2838650f43
c144234aee18401ffe3cce4733b23881c3a8ae2d2b66e8
]]></artwork></figure>
<t>Total size of the Envelope with COSE authentication object but without Severable Elements:  346</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a20258988258248202582075685579a83babd71ec8ef22fa49ac873f78a7
08a43a674e782ad30b6598d17a586fd28443a10126a05824820258207568
5579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a
5840861b9bfb449125742baa648bc9d148cba45519cca8efecf705c2165e
cdecaeba8b6ce2131284e66708788d741e8779d5973fa8e25da49eb203c8
1920719da9490358bba70101020203585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f09820258203ee96d
c79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a
4382030f0c438217020d8202582023f48b2e2838650f43c144234aee1840
1ffe3cce4733b23881c3a8ae2d2b66e8
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  929</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a40258988258248202582075685579a83babd71ec8ef22fa49ac873f78a7
08a43a674e782ad30b6598d17a586fd28443a10126a05824820258207568
5579a83babd71ec8ef22fa49ac873f78a708a43a674e782ad30b6598d17a
5840861b9bfb449125742baa648bc9d148cba45519cca8efecf705c2165e
cdecaeba8b6ce2131284e66708788d741e8779d5973fa8e25da49eb203c8
1920719da9490358bba70101020203585fa202818141000458568614a401
50fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b
2d51f2ab450358248202582000112233445566778899aabbccddeeff0123
456789abcdeffedcba98765432100e1987d0010f020f09820258203ee96d
c79641970ae46b929ccf0b72ba9536dd846020dbdc9f949d84ea0e18d20a
4382030f0c438217020d8202582023f48b2e2838650f43c144234aee1840
1ffe3cce4733b23881c3a8ae2d2b66e809583c8613a1157832687474703a
2f2f6578616d706c652e636f6d2f766572792f6c6f6e672f706174682f74
6f2f66696c652f66696c652e62696e1502030f0d590204a20179019d2323
204578616d706c6520323a2053696d756c74616e656f757320446f776e6c
6f61642c20496e7374616c6c6174696f6e2c2053656375726520426f6f74
2c2053657665726564204669656c64730a0a202020205468697320657861
6d706c6520636f766572732074686520666f6c6c6f77696e672074656d70
6c617465733a0a202020200a202020202a20436f6d7061746962696c6974
7920436865636b20287b7b74656d706c6174652d636f6d7061746962696c
6974792d636865636b7d7d290a202020202a2053656375726520426f6f74
20287b7b74656d706c6174652d7365637572652d626f6f747d7d290a2020
20202a204669726d7761726520446f776e6c6f616420287b7b6669726d77
6172652d646f776e6c6f61642d74656d706c6174657d7d290a202020200a
2020202054686973206578616d706c6520616c736f2064656d6f6e737472
6174657320736576657261626c6520656c656d656e747320287b7b6f7672
2d736576657261626c657d7d292c20616e64207465787420287b7b6d616e
69666573742d6469676573742d746578747d7d292e814100a2036761726d
2e636f6d0578525468697320636f6d706f6e656e7420697320612064656d
6f6e7374726174696f6e2e20546865206469676573742069732061207361
6d706c65207061747465726e2c206e6f742061207265616c206f6e652e
]]></artwork></figure>

</section>
<section anchor="example-3-ab-images" title="Example 3: A/B images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>A/B Image Template (<xref target="a-b-template"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'ae0c1ea689c9800a843550f38796b6fdbd52a0c78be5d26011d8e784da43d47c'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'ae0c1ea689c9800a843550f38796b6fdbd52a0c78be5d26011d8e784da43d47c'
                    ]),
                    / signature / h'359960bae5a7de2457c8f48d3250d96d1a
f2d36e08764b62d76f8a3f3041774b150b2c835bb1b2d7b1b2e629e1f08cc3b1b48fce
bb8fb38182c116161e02b33f'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    bstr .cbor ([
                        / directive-override-parameters / 20,{
                            / offset / 5:33792,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:bstr .cbor ([
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                            ]),
                            / image-size / 14:34768,
                        }
                    ]) ,
                    bstr .cbor ([
                        / directive-override-parameters / 20,{
                            / offset / 5:541696,
                        } ,
                        / condition-component-offset / 5,5 ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:bstr .cbor ([
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                            ]),
                            / image-size / 14:76834,
                        }
                    ])
                ] ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-try-each / 15,[
                bstr .cbor ([
                    / directive-set-parameters / 19,{
                        / offset / 5:33792,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ]) ,
                bstr .cbor ([
                    / directive-set-parameters / 19,{
                        / offset / 5:541696,
                    } ,
                    / condition-component-offset / 5,5 ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ])
            ] ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / condition-image-match / 3,15
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  330</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820ae0c1ea689c9800a843550f38796b6fdbd52a0
c78be5d26011d8e784da43d47c0359011ba5010102030358aaa202818141
000458a18814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af
1425695e48bf429b2d51f2ab450f8258368614a105198400050514a20358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d0583a8614a1051a00084400050514a203582482
0258200123456789abcdeffedcba987654321000112233445566778899aa
bbccddeeff0e1a00012c22010f020f095861860f82582a8613a105198400
050513a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
312e62696e582c8613a1051a00084400050513a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  443</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589882582482025820ae0c1ea689c9800a843550f38796b6fdbd52a0
c78be5d26011d8e784da43d47c586fd28443a10126a0582482025820ae0c
1ea689c9800a843550f38796b6fdbd52a0c78be5d26011d8e784da43d47c
5840359960bae5a7de2457c8f48d3250d96d1af2d36e08764b62d76f8a3f
3041774b150b2c835bb1b2d7b1b2e629e1f08cc3b1b48fcebb8fb38182c1
16161e02b33f0359011ba5010102030358aaa202818141000458a18814a2
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450f8258368614a105198400050514a2035824820258200011
2233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0e1987d0583a8614a1051a00084400050514a20358248202582001234567
89abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a
00012c22010f020f095861860f82582a8613a105198400050513a115781c
687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e582c
8613a1051a00084400050513a115781c687474703a2f2f6578616d706c65
2e636f6d2f66696c65322e62696e1502030f0a4382030f
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
  <t>Install (<xref target="template-install"/>)</t>
  <t>Load &amp; Decompress (<xref target="template-load-decompress"/>)</t>
</list></t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'4b4c7c8c0fda76c9c9591a9db160918e2b3c96a58b0a5e4984fd4e8f9359a928'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'4b4c7c8c0fda76c9c9591a9db160918e2b3c96a58b0a5e4984fd4e8f9359a928'
                    ]),
                    / signature / h'd721cb3415f27cfeb8ef066bb6312ba758
32b57410a0c700de71cf8004ea23b9dd3c912a99fab111e9b8f2cc55c7dffcc37012de
cf72e44f69b3d3db8cc98cb6'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00'] ,
                [h'02'] ,
                [h'01']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15
            ]),
        }),
        / payload-fetch / 8:bstr .cbor ([
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / install / 9:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 22:1 / [h'02'] /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15
        ]),
        / load / 11:bstr .cbor ([
            / directive-set-component-index / 12,2 ,
            / directive-set-parameters / 19,{
                / image-digest / 3:bstr .cbor ([
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                ]),
                / image-size / 14:76834,
                / source-component / 22:0 / [h'00'] /,
                / compression-info / 19:1 / "gzip" /,
            } ,
            / directive-copy / 22,2 ,
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-set-component-index / 12,2 ,
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  287</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a2025827815824820258204b4c7c8c0fda76c9c9591a9db160918e2b3c96
a58b0a5e4984fd4e8f9359a9280358f1a801010204035867a20283814100
814102814101045858880c0014a40150fa6b4a53d5ad5fdfbe9de663e4d4
1ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122
33445566778899aabbccddeeff0123456789abcdeffedcba98765432100e
1987d0010f020f085827880c0113a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e1502030f094b880c0013a116011602
030f0a45840c00030f0b583a880c0213a4035824820258200123456789ab
cdeffedcba987654321000112233445566778899aabbccddeeff0e1a0001
2c22130116001602030f0c45840c021702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  400</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a2025898825824820258204b4c7c8c0fda76c9c9591a9db160918e2b3c96
a58b0a5e4984fd4e8f9359a928586fd28443a10126a05824820258204b4c
7c8c0fda76c9c9591a9db160918e2b3c96a58b0a5e4984fd4e8f9359a928
5840d721cb3415f27cfeb8ef066bb6312ba75832b57410a0c700de71cf80
04ea23b9dd3c912a99fab111e9b8f2cc55c7dffcc37012decf72e44f69b3
d3db8cc98cb60358f1a801010204035867a2028381410081410281410104
5858880c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af
1425695e48bf429b2d51f2ab450358248202582000112233445566778899
aabbccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f
085827880c0113a115781b687474703a2f2f6578616d706c652e636f6d2f
66696c652e62696e1502030f094b880c0013a116011602030f0a45840c00
030f0b583a880c0213a4035824820258200123456789abcdeffedcba9876
54321000112233445566778899aabbccddeeff0e1a00012c221301160016
02030f0c45840c021702
]]></artwork></figure>

</section>
<section anchor="example-5-two-images" title="Example 5: Two Images">

<t>This example covers the following templates:</t>

<t><list style="symbols">
  <t>Compatibility Check (<xref target="template-compatibility-check"/>)</t>
  <t>Secure Boot (<xref target="template-secure-boot"/>)</t>
  <t>Firmware Download (<xref target="firmware-download-template"/>)</t>
</list></t>

<t>Furthermore, it shows using these templates with two images.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:bstr .cbor ({        digest: bstr
.cbor ([
            / algorithm-id / 2 / "sha256" /,
            / digest-bytes /
h'de7c7927a15bd2eda59cab1512875f17c9f1e9e23885ce1ac6d671eefcefa37a'
        ])        signatures: [
            bstr .cbor (18([
                    / protected / bstr .cbor ({
                        / alg / 1:-7 / "ES256" /,
                    }),
                    / unprotected / {
                    },
                    / payload / bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'de7c7927a15bd2eda59cab1512875f17c9f1e9e23885ce1ac6d671eefcefa37a'
                    ]),
                    / signature / h'e71e332c985fb0479f296685669d05348b
cdba8e186f25a5418f4682ea168df61661f54bf48f964577225ed455b22d277dd94de8
7c57f1baceedd6719f3d56ec'
                ]))
        ]
    }),
    / manifest / 3:bstr .cbor ({
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:bstr .cbor ({
            / components / 2:[
                [h'00'] ,
                [h'01']
            ],
            / common-sequence / 4:bstr .cbor ([
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'fa6b4a53d5ad5fdfbe9de663e4d41ffe' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id / 2:h'1492af1425695e48bf429b2d51f2ab45'
/ 1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210'
                    ]),
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,15 ,
                / condition-class-identifier / 2,15 ,
                / directive-set-component-index / 12,1 ,
                / directive-override-parameters / 20,{
                    / image-digest / 3:bstr .cbor ([
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff'
                    ]),
                    / image-size / 14:76834,
                }
            ]),
        }),
        / install / 9:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file1.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file2.bin',
            } ,
            / directive-fetch / 21,2 ,
            / condition-image-match / 3,15
        ]),
        / validate / 10:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,15 ,
            / directive-set-component-index / 12,1 ,
            / condition-image-match / 3,15
        ]),
        / run / 12:bstr .cbor ([
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,2
        ]),
    }),
}
]]></artwork></figure>

<t>Total size of Envelope without COSE authentication object:  304</t>

<t>Envelope:</t>

<figure><artwork><![CDATA[
a202582781582482025820de7c7927a15bd2eda59cab1512875f17c9f1e9
e23885ce1ac6d671eefcefa37a03590101a601010205035895a202828141
008141010458898c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe
02501492af1425695e48bf429b2d51f2ab45035824820258200011223344
5566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987
d0010f020f0c0114a2035824820258200123456789abcdeffedcba987654
321000112233445566778899aabbccddeeff0e1a00012c2209584f900c00
13a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e
62696e1502030f0c0113a115781c687474703a2f2f6578616d706c652e63
6f6d2f66696c65322e62696e1502030f0a49880c00030f0c01030f0c4584
0c001702
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  417</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202589882582482025820de7c7927a15bd2eda59cab1512875f17c9f1e9
e23885ce1ac6d671eefcefa37a586fd28443a10126a0582482025820de7c
7927a15bd2eda59cab1512875f17c9f1e9e23885ce1ac6d671eefcefa37a
5840e71e332c985fb0479f296685669d05348bcdba8e186f25a5418f4682
ea168df61661f54bf48f964577225ed455b22d277dd94de87c57f1baceed
d6719f3d56ec03590101a601010205035895a20282814100814101045889
8c0c0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425
695e48bf429b2d51f2ab450358248202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100e1987d0010f020f0c01
14a2035824820258200123456789abcdeffedcba98765432100011223344
5566778899aabbccddeeff0e1a00012c2209584f900c0013a115781c6874
74703a2f2f6578616d706c652e636f6d2f66696c65312e62696e1502030f
0c0113a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65
322e62696e1502030f0a49880c00030f0c01030f0c45840c001702
]]></artwork></figure>

</section>
</section>
<section anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted invocation operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted invocation of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of Severable Elements (<xref target="severable-fields"/>)</t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="uuid-identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Abort</c>
      <c><xref target="suit-condition-abort"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>RECOMMENDED</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>RECOMMENDED</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>RECOMMENDED</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>RECOMMENDED</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>OPTIONAL</c>
      <c>Version Match</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>OPTIONAL</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>OPTIONAL</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
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
yqD9nYSHcjNnlN9KfUMsVJz2aagkdKjBE2Nmk2fiTzpfphcohpInyExdE0Tr
m0i7FAlY090n7oBQU4CTnWsbAgKs2rnAa7tTq8pSG82LQ8LkuDNHOvx0e5H8
K+jWIdyyM9sgXpHmEk5oe5QIyZtWi6WAJPeuCaMaE69URw4HOLSiRoPJZoWZ
vHO54DhZL7kjw76jOUjkMzQgvxAzL4coIvxY3TZTT2wz7vmmfaQPGahDV/Dw
946L/PSj/XtCNP3Tz5RunjvL7yRXwkdSOgeZJ6N3smUdQ4r99GMYl7VG2edH
HB6HcsO414RFsXcKfYpVwfoHC+zjp5955+HqwvDbgFoXoJ/OxSC2sxNZLBdw
UmebRYmsa4xQMBwTNfPBrRkjMOeqTesg99IZ6Kf7GuzKEVRMDqTfoy4H8jPH
CNNWtJYWZgkzG7VXD3/n5aZFdK6LXnMfndHebumiCysa7xmtKUsurhSSoHcP
xaJFWQ/JHTrM9Z02ZbdM573nuH1DvijrkJ8j20uWFZFw0/jTNPr4TBK9+o6O
eJD7Tkj8YdeOGr5sNQr7GQAzXqIkjCgqvAdKM6+UQkcfGZGB/ge/GzCEf0SQ
Q9BG9vg+QqDs+eWeLNxYV3DKa/7Tj1fUwCRf/PTz/r4127Ghf2arVMQwNCr4
e5wO1N8Uyxva4n63SX5BGuw7nx93Hnv4qMd2ED6yft799DM2cIU0NyFCfTe+
Is0AztjH/rPz8abz8bFlo9jVLzBP5JTvCG6bHg4MRQR1P5yPpLnrKhJ7Bu0d
Fu137Qf8j0mdXaASC29Ag2gpgSaqTWH7AL+y0eIj1wAJW07Qd3vtWWyqXLbo
e+BlTzh2PWx5UV7v7Sf/iBNwxGYb+Yoq3Lj3ueRNeW7jSX7/+/hjqfj7y0mV
jaztA8Ck+pIMwjx9m0GT/BWEy62TVXmzSp6kDVDD1g1Zfvin1izjUlxYG9E+
yevw657rQ6Gc7EUJ3HtLFr6wHtgPfsWij739AH9TQxruSAMzRhqcLNBKD0RK
BFVnf9431y5VBTFahUeBVqmoa4eG2ktVV/OJnVymSbSd4YfwP5/13Q8pKBPo
NT6heDBogiMSKDxsDycNujO8I2RvVjQ5QbL6+Ihsf0cC61PH54OXj7T9M9Te
QKQ4TqVGXps/IZPvcA6MNYb/nTTVJuMs35u/QW2IVhjreiRloYCDnPNKGjKb
lSibIqvI3aUqRs6/1YQvCJ1i7gT/ogCl16jPRBjts20vw+U8tS47lN5q351Z
J39xq6p/9HivHhkYhHNXwU/h9zh2Bv14LNtTsheswt90eA8HhvfwVsNrwXis
pWyJhH/0JPFjmbKelH+s8ADyX0/ypJEAJaZpUqwIrCka6zCthoqP+voCJKK1
PLCUspy2ac0LdgF3IFJe6mSvZ7X3WUbrnc5e3y7sh1KOWRtHR+MSpL4jqQGU
vM4UAGPEVI+OnU2VK1maSN60X60mJIX89G9K5/HwrnOlV1+vpRshF7AYouJ1
mBjAoi4wgDa1DIjNPVpgNHHWHONpK8Wn+oZaNmjLSfEGtoMGHTcGlftvMYg0
oqNFzouEh7rb6hVemVGz/JNvXB3wMlTSSMoSRPOCtl/sl7fV8UQp7tdzkZcf
ko6rUhbtuBdKR6T99n9O0+79/kfXwo/54v3PpBfBP8R+FbX0864+ZJtu7qX1
7c+u2Y6+uWvqntZ3trBr9r6Rzvw7jfFIb9NU+1OcJVW2FqEeV9c1IE2uFkFK
Jg3bpKWO15EMheqk954PhHVL6xgrpT4MYZ3qdqHacxYIZvUajj3NP3WarEAA
WWIHdRgQPdTknppUA2xz9/DR5KijIW7Xvhh/z2w0Gkj0CIOvKr1atnFjfNSF
mxJr3oZYqujNPL6qmI17w9+yLNfi8cdZcyZ2yM6qd+j4fWNXOBs12SbNpirY
v3NGcXckjX8Xas94m+KHu93YPEpWRVDvZW+tdA188RGLzhAC2yr1bnZGP1+m
XDU5jhujEmj5KiO8FVIH2vk1DUqQMbG1Ay4pD4HBisjY1Ta85hewzRTBFNw4
wSd9bXXg2zeMKBGD1tq8FgwlZt4lOZWWiRWj1AWzqkytQEwtxlOGE0HURctJ
ruGBqFU6Oz2QTVHuI3IuSZNwdaiC56VdnIiErgDGo4aqvLO0PRssFF7EUWvn
du1FWU4aJUu26C3vTpTRaVVrurY12RKNFQ6SRx0ov8dt6BMTh297PnHnwhpy
F4bNFBQREIOMqcf2Mltp2PQNBkFbJTgxlRV4u0uWGCozNHhwtRBRfHSPFlcp
OYy8VxvOG5VTc5beM452eUX7G3wVnHFGxlErdOQoA/0y6EbsAQGhHE2plMRU
0/8mnJRQJbWnDyljumOM4qtB9GU0Ho9bWg1l39X1RqBrjOhUGMXIM94TCk3T
JIDhzmDBgaPyedUbRJhzNDUM1WR2z7nqqLyHmGoa0iJQNftmGUxIEBTQF5sX
G8kOdWseiMytXblpJuX5hNfar19q1UrswIt3ZkzB7es28r0VFZfYb4kUpjCc
z9wHCrasSanUOD/Ly8bUroYgYCRPhYY+TrTSMJ0aGII0JKuR1W5yiGeF4ckW
KcGdGKiFWeXbhEvaMxaWlR3v2xFy5emeLChzM7aJYpphj4l2Ki9Gy8QShT7q
GCDk96653W0wKd5SJdnmFFz04ygHkTNHkPYFla+/cjUHkESyk3k5mHBbK2uN
SJ4kwpyJ2RfHo2iw2pjo40TefeuBBJzXeCNagSL5krI5HS5fEIji9/66kHGL
f3AKsWlPfDhyrNR+HcKW5eoXnVUZQEf709CfzxmNFOnB9NTkCC4TLTnR14aL
3KAlYL8dJpBpwF1AhmlLPJIpWuNh6tt75kZxfoVkOSv+bq3hW3rMicN6qZ3j
lIxQQ/1mKrT7nhiFSH34WZWt0pzOstxIlsnA9184u1EcCNx79mTidaRP5IVt
1ZdspzV+alXnYTwRSThVym/HZIfgfcPv6Q+1b6dY8aZyvXKMPFpoVLPKyqK/
O2lgjTJvSBUOTZlk0+NT8WaWkNjdFXwZnOZG//qxSCxdq2lbk/GZ8FZVGf05
EyOK1tq43jpZAnmrqYFlnSvYs+1B3ZK1LLtl5+ZYzkMI8HddmKwnkciRLGeV
k3s2g+JWEKfOlTSftqCDW8GnhE2rSRZpl02YDNqJC2xbkcYdGyhCqpn5/lM3
+pOLNGvdKJok5wTfdJJ6sAddcmHub+329gknoXXBDAYNxOyuD553LdCCXv+J
GzqeeJX2OTgSI1ktqtPythflijH8OQ2G/kpWmPNoUei4RDrydgZpnNxbhXYJ
qoLstGetrqR1wgFjiOcZZjsz0hIaOrP5ZVEuy4utQf0cwX1Poa//Bjx/TJL+
Mjn7l3+V6Fa+Et+cnLhvB/ulLXWdM+ASd58FLY0DwFYZiBlbBsNC1Z6vVDzF
m8KSOXDRzwlbTsu7cmJYnNxaRNgsQRtEoURiwUDDF0TvqAcpQpDpwbb8Cmsk
IOV2P4r3MhSzdwD2FrgoSPZW4Aql8yq72CypDjcLzFfp0oJFt4w1Gaoltxug
QLYmJCnEc1e23UQhoupUaZOo5oEbfEGTZesWQsN+JPa5RVaSM+uCJH55pP+e
78R8UCBCwrLvhYihaJSLrwbJwFJxoHAoAV0Wi75WfQqiu2BN7BocL06PYmFz
ul6To+9OHX36QvB2WQ+PQq4N6qwrQQ2OoSl1GOT64eLOEjof5PP2ABS32L2B
BKHfN+VhF8cZ828L9Ha3gPVEaeKQeWObbYX0pk0QfxsftOw8fx8tiF43iK58
w4Io4JOUoJWKCZnVt4jmX8GZFXxHjP8UQADKOl1u+cY2TomlfxHIDdrLWhkR
ASYN2CLbH9aX25pC6kML7gAODz8yB3lhjBZlrD6kcEUOU4YgBMhCeADs4W0w
TSSWKt1ADHI++IBKwsfP2in2vsDvDbvv5BO59MQm2spf8SVP805/YWhyF3fs
A1wd07u/JNMMR1mrk1YWGg9wgD+R40A/1gLct3stCdaQuAJwh5uotqze4StV
ubngDQhwz3tynNsZy/W+QDeagClyBWVK4s5ndJ52SOkK2wMzKuc5ZfkZBcgx
NEe4gkMMzZfsTJtalhF5ISph9bub+Z7oPBKJH6RXyxqmakNTAe8LoEMdEBp/
oXW7qhUUWCueczGcoOebSYoMEyTOKkdEn76QVZcm0nlV1nX3CjVLlwOLZPMf
LCg6twOQDx6RV3gPOY2M18PhGGMkC/nFEs5OFNnP8qlc2W26OvTc9ZTo5uxW
ybdg3up6Jm8XtyAQ10iCyBlNhO4LDzSzwE3HHTsnyXBwBCLtSLc7j85sK747
gtkmDBtaOa5hSeKQTMWjV7SwULD+Rtxn6jQIgzCKykjlq3XKeyEU3tmPTn3o
0d2+zNQPd3sSU0ej8ALhMlZUT0O3oCyXbM9lr9iGcb4w3zdUIMF6AukSk7MY
ljKqzuXKQiA3zJfM52uS13yOGcvsabCtxJKF9yBhPhOogbz+kgX25tLkfKkX
Njhcy2a1UUvsd9/AyQrE+LEk91nJIQau/+UTkvQZxJxBexhhyaGWhvcGRntp
bdElwZkQUJpmlImCRcnbZFO/Ekc1JizX2YQAd1X2CF9Lj3OFfWNfHFVAsUCo
JejeKtKKCi92Vk5JdNpvhNtVq0VdtA8L7KmY0i1V1YQ40XvEEMugSL/Afd30
ONUHRhXhcYh1XGEo9NamdwY8+K0gsA7IK2G6MDofHUlbeDo/eh5D+mpngxBA
HTX1Npsau8Q6HDs5EWIbd0q1AhSGyJ2RlIlxQamQlsf5qhBSlVVTSwzpKKlC
FTsvdYFIia3gqD6TLSNP6v1Bp56prmQoFxvBb35zpAVF2iGOmSYd9+aVK8YW
6T0UOErxa4giZnKzK/DAKgnHkZldhpG4fvMbssUcR1VqOE73jewJ8EzdHopl
tffYJiTGJcoydcFzrZo3tsPR8XHOSgmo4NIv2sDSqmiRV5ombA2RL8cLqbWa
EAbRcnpy+D1nCt4SliYID2KnUV5Vd0ozs18RmjeE/XLoDqjw0ljfLb6jnXAE
MGENj5GhiDK2kCCJWhPZPPoEeh1GRNJ8N/l2s8kXE7PVxp/3oBfd4mskrp7c
7j7a4kI2Eyxk00NTPY0YJeSdiih8hkNQOmVuUngZRez8zpTIvGBzWpY8QZAV
VWpDQrqHO8UYlzI121qKKui0nWIUsSMD6VZLdUyPvz6B7ZQVBxor5ZseUuNs
A8E7CIVzzjDqZIjeRuxQJGfPpg8pq+ldr19/LXzCBCdLdEiWmrJfJ8RsOH2C
m0Cv2U39wyTN76EkH+bwtLwuCN/WkTzI1yus7jJZyMOJknIP4fc01SL8dC7o
gKiwNhyhongI/0Ocg8Spl81/HIH+KrcBqlP+/ZDsTPUFsR9OlLqpebIf/Uon
h8iu3a3UcYInOGaXKG1qb6sMZCbR/tS4hORUKNGxlXeaHFkc25K9iaiENFr5
ihA1tI0gx9WXuOszDsyDpgijvZTyDuf5xaZSZR6HyVKF/Ex2JvX29+5cCCP0
IxluZJCWEDRzHc9tsNO86CfoSPdHofokVII9BclpgG4ye0vqpe5TDVLMlKhv
+HQeXgvfIpEWawRs3vHlht7Qj0gvk3iYOkfnXlpkmM6hHFMqmIUiIfDv0Df1
yS2Sqa6lsxBiDq9VnyAi69jDi/WrFgP2ZQphwUHLWWyVuhiyxvm/nT0UN2a9
DToy2XBCbKkoV1FncRFKMyDuuCQs6xsdSIRkouKTBpy69tXCcDjUasuLsSr1
MLIhNS4WGMWI+OfMGVzkx//vuPJZuanmfgX7qb6m18I4hP1SZcob+kXS+bW4
tTsQeK7eWNHLHcdjYqUxdxyUuLVf7diEwz5WJuCOPMaTk12eYrRc2cr/0AMV
4U7e9kAN6a+dU6IevPhgKRzboADJwDXk/9JnLsraVLmxu9du2FrySqRFpMq3
m8NI/QnXWnVMusXBYwavKJtLyXS82iwLqR2HVwUBGnq8mIpCaxW6wimlCglK
gRLi3f8djFbG4+lFX8UMEy0hpeZpuNyh87y+RF6EmPVp0WRshnZFGzpD+xvL
45R1tGPh/0dg/xsv2K9xd8CwMY1r0r1DqGTjrnP6GbcMd/FLBUL5/JdLhdLA
58qFo/+w27FdLXXgatTXJlKtrfdu7LTVuhiVIkMFQHUeS3mhTu5tKPqG+Sj4
4oJd+Uu9GXbdAnsfPuwwSQBVWvoAhzlIPjLGdS1wMAqi6sqnsIbnnfdDRwMh
MguKh6aQ46xqowETX+4UQ8wGiiGSD0xetXfeZVsNZEf02zonyoHTVGDACqtQ
lL2363vFN5tJJYNNiIt7QNzs4WOtPeXf3SjwYbGVEHdr1qKsu0WDwyAMACCk
NpHPHHEOtQW5V3DRKezCzYDKHS4sfwvzOgMeK51KBVA8r1KCXJmQ8dQw6Nop
3+T+e/TN11/G5XQeS8CZNOKZkqaqEf4cS3PRysq5kDG3/cVFeLkTJiizTKmZ
xw+Ta/LJk1xJi3Hn7uOHd8b0dPLVo57H8OsdVgixPDjLXS/LwnL3ziR3r++w
0ymRosOtI767sdZpF3VW5GCpblUAH7IPfUYiqYrdJ1FZV2qSg8T0XPvWsYxM
hbl/z5Zpfcltvj568XnCCY36b2cq/FWUsPZodnhIPudOwYQDkAGX4UR0AyHH
wnSjZtkABpo+X+wMxOjtRP1mKHm9a0TqzM/Ul6Hl2zcN4q81TyVJODb/kDw1
2f0XnKEg+A8dpdt18Lc5V04tway8YgKjmpyjTe5/TtzNZo+ATTMoK/61p7Gj
02saJKzbhw9ddv2JMFZTZzoOiRCRDjpNvs2scCpdiqoxzsWZ2EnajyZo0+oY
HgJ+MV+HXIvdRHFvvCTRYbHghKhYWG/ZVW+Ws+C8uhiSvvMYwtd6jqL7tnXU
yhleyWOps8G6uwYipb0xcWnt6wp+3kFw7cF6l8uNFARvnYwdSYDDJN1G3Pgb
OWq6NP/399FM+qJVbxqA7KonlFhJF+T97EYtPRi+/hY79p9qdTja54akQBLq
b5cSeFc9zFjUOw5u1F+j6MZb6Veha1dDvE/b8nmSTRz12sSCvaaNuFnZ87+9
OtWtzd5Rk6KB/dfRlDw07K2VJTdXePDXK0wnVqLeElH6bpSsU2O+52bpaat1
w7Bh29mEoyJUcY3GWQDFj2F035jPwUblqlRz1C+qlRiASKnLRkJSzX2xkNPQ
/rqnr4gC51xWFG03GuzeNMvMx6917sCWZ+B2tyBVHfnPegWq0W/HRbjbLPnf
4NqcxbWm/tvemUfuGIZTJqXTwgGMZMstRzuQQ0oAfuiGtO/3SFXv3JCf9qUu
yv0nMn3HydLJbFd4Vs83UVTW2LaWeYgk4Cgy6nVpBWRmKVWQQzGgCZfVTTKx
9xTFh/9X0wwVf00O5zPKDjkzcTuR//yK7qJxz2GnK1twmI9cp0y18uD4BoIN
82MAZ2U5v/L4e9xdR22H19ENPPCMw0H+Q9f5yX+9dX7SXucnO12LtztfLH0w
a3YeQ/rhf47bLyWDzxQpdlAAShT/jc/Tr7uQwwdGxC1CUOmJx99z1jYfzM91
djg90yp5RqHheS2exKaMkzxcOflOLAwmv5RrzF3TjFn34dRr3Q1VL3aaAQFj
EFqWqpx6CQ/siozflEPTTrSQSi6loiSeiLtkAzGBHUwswkTgNClB8YWCVpxZ
wb8PdxXJYmLZeiJ2GMQFWVq/P30j0JF1uwStFjZbVzCtStA884bQprGIHAO5
OlSBp5y5jzM9vmTUlFYJ1NOgqIxNSRsL6PiVROKcsAJeC0QI4mekF0BAlpxp
GB0um59IrTtnotKrPLumLEPWN8sFF37kPF4WhLV8+Nogr9smi0w/TKlEksQZ
H4RUN/wYPSeKf6tDCGn38P67LFtLFIpAkddSPDGtDfeW1T4SD7tfIaIPlU+q
uTgtpZfNtrh/e8dPXr0OjmmDJz+YPHy0z1gGFUWcZcVmFWmFfKoahaWluoAZ
1Tc/iJEtMK7aEJGUQPRIlecNuSyoUIKD4SXaFpwGKhAkDuirtMLajphg+Z0O
mlFKafk7o8RVr67E0H169PIIwVdyRJhlbPaX6obXRqywHUZDsH1k66FWJobs
wimqvQBIaZES8RzBJoltyPKEjTo0Wfy6guYj3zqW2+UiyyGCfJm9d/VBKauI
FkvriAqUUpRE2ykrqnYqcsVZ3pKVyRQ/f2rgqaEBMkJ4YCJGZdIDIlP6cFdn
J4zDnpha6dD+xIo2yCsMORQZjp5Thj1lyjonGIAF1aWM8SujCBWsoo05myJq
GY6tnNb3GKCt4JAMAOLQH6NZCN7ZQk08dHhepGsBJdTlNdtS9JkZ+XiXDVyL
54ID2zQBBAomXNcoSkqaJlWuhf99V5TXcJ2Um0JranZYKGzDwn7j+CWeB9/G
4XUdL5ll06riauOKrUCT+yGbJW9AbUSsoOMf3tT7koT96JuHKHSQ25d/+erx
V58+JfPiPJmD+rxSyOrW5aeh9VlxyaixmiqXShrvnEqICog19mglBYuLkP6m
9QIo/V9Wn34jNlQrqhR873PxKDda8JSK+SWiWSBdYwWy+jKzr9AGqeP1xbFp
U81MKKJKjF2i0WIxB4QliKvVNFuOJRbUGvEQL0v052UKzGVjxMCoRFFDCHqI
cFQqSgOm5bCWDMMAbdQM1zoTlxjXZpXz4TuoEznp0uwWFwBpa7hO+hwhtVpD
waW8T95EHgsCFJ+7qT9FrpvPNg28g0SszD6UsIyLhc8ZtoswfVs9+V4IdyMe
HfazZgQYbmPH5yHguXuMcodGzTjbCS7mdb5oLgW3GOvWiwUnqqLuPSN9FOLO
Y+sx3waVt58TYcvf7On/0RWD/nnvrvuLwyz8MY6vhBbUjvQWqsm98JFgUnov
eHCI7VG5+RfpvK8Cvf5G+mndrtTCv/qp+aLWwjX9CIhx0nV/Cz4vLKM1OgoA
6B8eTS66uoGPJYgvESFNJDdtFaOjIp0KrDKSXsslFJWjNQgaXfVX3705ffXy
6HmbQ49bhTWBmZYFSfkmWmJVJWDU0wRlDTH4lZUVlv4TAwFs++rhEqatcj03
ZFcwNd05cQQnjAdMXKOnKwYmwP9d7EJ7YlWMhg6iAEVGByzMXSORoXMRWxaQ
gFyLxvxo3VNk+qCjQRo+wvjRMXP519QMxxiEsYQQWBWr5I5utRrgN6TpITdW
TQJU22tFsUk7/UcOeSjytpEc0TVmx5cTOg0nF1JxQaF6KIHRMMgsViulCrm5
5D4EttpkBmihJL3eVKgVEtlCxyDJ8AZxOgfv7pql81D5tThnkTtdOqHVlln2
tLbx16XHHvH17VHqsDCQvkXTc+lLjkQvSoTnmJeJRccF6hOwD0QmpojjjBkx
Y6CnCMNml/PSmzF6vJfqLLAPQWOXf3Y1dr9oSJVknCe8KwoTksoOIsRYM/KY
TS4OPGfgdXheVPqyeaO9m81etachOTg1LdBsEFLPJBCdhp/XlwxPJkaTDkpa
pz9umjvy1+FSa7Cb0dWAa1ydMkHTE2G1r238tDtzTYbCmlarlqS4aykuN/B0
gnlonFjELuCoLrI1d46yf++90umJdYdJQ8FnPNbjsgARm+szk+btcDX2jsuz
H06f7v+CLuZlDXKR2ba5oTGQ9nsHXiy4fMftMgZy0EVQdJh4zpn32jzNY7Gx
k0VQ/zh12VP7qnRYgVtSZQKVkYXIs32s3xLD0BOI07iHkxP8kxRZEGsG7piG
wzublCn+uMqvT45fvXhx8vLpyVNinSpSUdeo7eaIhVVxj33UEJLHrFM1Ua6w
wK/A9tO7weQwn2/WW8F+RcBdvdXdnPjOJAQjQc0LMIB2IqbJEzE3+tXITQfm
WookEzN2fmsR3Kus+7LVkir9XFw2E1hOIMaFLGs4iO20fN7PoLmiXCEIUleZ
hS2bAjewSxbtkq6yiMqNs6ZD5K8BH+3LJkvrfLkNFiO+z9iuQobHlm0QCSUj
rGyxsASY6/PSSiAippVEXUUSh/JpfwMo63aqRed1siCasUh/JbOcN/2o8su2
jpaQrUVUD3QVtZlWJUTCDJ1vmMgHhlPDufjf35++bh+Kvikrq5/IXeQvP7qG
+ibe/ojIEO6FsmE5mpCfMPxG7u8mn4D4s5ylFAlBEK1icIKNv8yW69ojR7Wo
M6eaWAGCzAQ4Xak7VVk2dyIZJE0u8iugX7ani8IU8BsNJq17F2O9LBXThwoJ
SHtOjW9pBdaTSendjpaUR0r9YPsBkj56jePBQNqA2eQSk9YN/pOArjfHlCYN
LHu15mDmOaHqp4rD32r6xk29kYyiO9fTTnwZj0Y9b7N7hW4yCo8Twysdjlri
0xjuI+Wb3x0sBsgzYYzvJbpeg43fFq3R2j0scAaxOcDFlSibXMsqsVDpDcwu
NE2weqF9AROpslDG1bMvLrvTSle3haN5u/XyIoWsVut+6r0Ww4t8BNO118Uw
GCUgnlO5XjLEpnlFVXG0wt3v/4n2AWvZIFc2x/dbJ8TAO9D6aESUf9NrsIsN
m57VIoE/hjqt2qMY+1nLHmy0TqSmK9G0zTiUXJhlnTdEBN7rE1217pN/kTbZ
hfv5PQjTWC77BImOYK0sW2CY0cbPsJJNB9Z0zKWUWCvaq/ctIgpDADH1An7j
27dxMl8MdOAkF0/kwiQbqSEgZkKX8t5IqyrwwNwnBR0+Ac5VKH58iQeBeqGY
R4g5wvYsF61apojgORVC0fFKrqbsEpkw5d/juLacGRZck86dpPRz+rTHD9Xr
TvJk1g4QaWj7wm7pgvC0oIcrEBRkiwPhwdE5fvr0uXPxfkyeUhsU4DiaTCYf
4f8DAQUWuwivwUfPqIh20EnWvr6JfuOa4cvscxrhL/pG8qcaF4mTez7S1v6/
Z69eTpiQKQ5PhAym6Ou0NvFFwmoHBmk9bNPVMu7hj0cvnuOJxP+FY/iLO/tr
dtH8w60awMPcZ/rZ231FuIyTAsVgv0H8e4K/+wWDE7fsvkw/t9+VlqX2Ca+q
/NGzYPJ2vghhn51+kXdJQ56N9bQ2R7jIocZCOMstqbNVn7mVMN3bsl7/H5Oj
5NzatYLfqSf80LJ8FS0i/TIx8OW4QUkNcI3Zi7GVx18RwAHN2NyRlZLebke7
hpSHE2ATDGamCUeWxsUnWzALOtauG73/RdCQ8OrpBCrZY4q216acySsqWhSM
aOySU/lF43rCvSum07UVfxsUKQYST1xGJ7niBO0lqIhWgAF7SZMdq409yDB6
6UCtZZ7Wrsy+ogthJXbxQudow7JdZkGk05Zop11d4R0sRQxIGebQIokSRz1A
DDDqW0fMJay3gbDqi/6u8jqaFV/Y8raUsinKUFdHeDIuG9X3AAJ+QtDddGgl
NxZt/OQilYG3zONF4oux3vnpx3vv742Te9t7P/18Z+wQ/HThHPI+iEtXB9P3
CdKKKEfw98PpF2xOQaHk6uH0AZmaZuWVpHIKmDcnt2hOh0MENs6tZSeMAE2Q
flk2Vv9KN4gzQucz5Lh5eoG9qxyPVbh/vLz31df3xvDf39z7OTlMPlAA31fw
rzv/9Hse9D8+vDP6xCW7TfJnk16P7C+2PuEL8poToW9lYmwnLFkJojqdr8yc
qE5AsdsESqQ0tqBndPNwQI6cp1WfLUuKKUYe7/xcLFJOmuyxgsVTDoKtlTcu
Su+g7FrRvlX8LhCzfb1cTTNDtCYcTBptQW6KxTTaH1II3P6I4mCjpOemp4pO
cAvruo/R6Vjax5JOBBM8VPefxyXXviXMhpmeG9AkYIT5Ye5Q4judMK/QGBBx
htu5Noe4/bKvDl9GWycWsvWaB5WHEQ+aXmLiy6U1EJNHW4+XrUbBv3eMQzdt
a4n6ptN3wcDE4i8d5HX/FGMJw2ORsfyaMxxpSnjxgeDVeaok0Jr+tL3Hg5v3
OwwHXGYpzqzIWoYvX14R2b640dnhm3b6oPlNI9qeRGG8djMjvb415wJxf4qE
DX7YUKwxJHO2CR1Yj0TUplIrLFbZXeeSXqcp+XbruaJltPQSR8fwDMxMQwUy
DqM0eQb67Y+hbqrtBA+oyUFRmpAzH/uDzre+tRyKC00HplTv8lg00YbnEswH
IvNKLMgdUY7CGVNQs/ILNHEr4W3o7GDBHUE1DNC8ZWXpCLY1DtWQCsLw+UwL
Iq62V2mchKIDaRO3TA2uFoM7CiyAagozIWKsbVZZyAXz4LvtKrEtngNcuPWL
lf2svZmubYdp+e/7z98bH4hmmFuoI4YIiI43k8nSF3WzMmqSMdYu1RokMw02
b1od08YXSGsUmFs0QzGQKk5J4rSaLKl8NGWm44ZqUTSOkhgr+kQrYIQZ3ZhL
Y15xWGcW4r9doKOlGkoMZdiAlohuu7EpciABuNFnwZfDIVfBRxcWoCdeu4N+
Jl0zv1Xx0RQlrR/OaFJU22jbG+jCGUCdamj36qhUm3WHVmUpr4PS/VUWR3c5
SVPqbhnmOxbrOcsv3kbeUoyn6plsVPLEF0GoslV5xeuGm5lSOxLlaGttBW9n
oLu/iwsgLzYZR0GzIBUasY0OSgMaVqORaDkVsq9Iskgk7W3EwatE2ZYGqwwZ
leTAhpQDmxVRfZVf5MRLdWzAcMqGo1eWpqYFq3a6vMDIz8sVUS7oXwstjkSh
aQwbJcFrA2Qsxdr0iLXj6HqV0jirpys4hGDV+HTUc2QQSLRckzE+MKzoZXUc
StR6iQ264toVJbOMVC6VP+fpmsR4svlXtOVoWsa4V1ewR/1w0lskUYjxOFsv
yy3rm1aXN+TCO4k7mJYxaNQ9QAc4R/sUCILB66zj1crA25Ze4mU93MfYR+hF
v6NuuccoRDqUw+3BrvVrrZC0zjPkNGym6+hIaT28mVSO7akb1zOevPAJw1wZ
i6yalBtY49ToO2zDl1aknY5wh72bpMPHdqyMOk4sKUN82FoupY+NC95/GQnp
UpiXXI14yu1tV9ywa4QaLgb9SQWB4cP3YVhgR3AUv814iuH2kRqQC2K7FDjA
aBq8JRYqTTAk5jR+U4LiOMeaRwTxZNnnkvA19lkPFNDbMimr6sHxGdtGcUDq
To6ClnVjm6NfG1/mwGq9TZNoV9G5IpUmk3YFWDdEZxcYuKenga76ZtRLdCwZ
mWeXmrcYsPgjzJj63QDpajbCljxkM7gCsJg1L5fg6rXzcXOBpaZ/K4gGtUGL
3tcNnYe+J0YJWGwrXYaatMSzidNI0z/9eHnvwYN7P/1MjNNOkrfSnufLTGrm
rVPgO7NtiCsWZ9eFF+boJQmUjMObkYJaiDD2wZ37m7q6Dyt1Pyuu7ogQpKEl
JYzzHjy/N74Hb8B/wzs4ZsEta1GYIz9NrehHI46StwoquNmw61T45pjvh4mj
WloIMbD0q5ItUwuFAFrAc+dtJmOOqKikUKSqkj0xh6T+Num7jCEcaJx5fRmL
nlRGTkLz8d8awx4dmBi0gpXTw9HoYOrBMUI8XduKs504VJfbKdY+U0KDJntR
YvqUalaeFQYSae/716e0Wj0nH44xpcS36hW7x4TRznHwQy/dc6HEu+fea9XQ
9DkUI+kS6jX+BIvdw2lcfuJQXSD0G0PE/IKFZui7AEY7Tc4wByGYtVC50uXl
qEZnyTDzcsA2jwrxilpvop7owg3I6iuSzzxcPbrogkQe6JVMo8vsKpXQFvM8
kFOILqcoZQnNGGXFHJWRNfEr6OhCxW698vpXcMjg9mjaLhCSOsrXFfj8LejA
ZQ/TNycPqC7JYwkVJzoTH1OBFlGhYP4hIl0ylrofIFUG8EY3pPYkh1bp8VSC
af8gx8dWyDCCPn+J7FNjeWxcIW4Icug23lmOh6K4yb61vCqXV4pvemWjpKkb
1wu/T7uj77cxY5hHJ9WAVKvYto2icBc1iMYlxglMRvF6UnWLb1iqo02DDYr4
SHB4uLghnQ9s2Re6Zc8ZBVb2i+HKP591V1jG3kOeBxyBG5i30GqEeQtrAd2y
RMinWeFnx2QtFAhUcydYsyrTxMCkLYTUaKJDJP3llArpwddYZFFWBwEgPn9x
8CurbhcaCk4gp45Lin0e5JVDDUbnONBNcadVC4JdM0gTqAgbIcqTO5rM4qmj
3QRyUFN2LYCr2+g0WoahpfsXEi8Oxg/HjxjXqi9Ef5rwa4/HX4y/DK85aI7w
qkRadaL/2f+J9Xdh/yUniyKzI3eoNy+xaFnVEtBbm+Dr8BBGo+edTA8xsHO7
mXJS0GuBYy7oVRFrWVoyEA6R1zTkq8GqyCTqw4JLfRUyhkrxbkZqlN+jAKf7
SK/3w9FH0eCp7mGrF6HBha7b3EOCOMwNHuuRGcm54KiJwtjFkTiVXlMEKNDm
2+/KZU6eskp/mqzpp33pzZV4++ze4JxUFxwmZcBF6WcN4Sj6Pmwc1ZKmxD1Q
Vc6BaiaasGbjrSlgNIJFut9GquMX7veA78ATA0H6DbEOJdPRyIae0DiRPUs6
CMwOBNJGVdmuYUEKAjIDKM3zD3yOK6ZXnlxC+W58tdhK4K45uC8w7ZiMb1Q9
fhsogxXQsBR8wbLRjcPMW7EoLBVyg8jCLqpysyYzywUNNipolLKFUMA7ZHyE
aeJ8FD5SSnRfK5kuti0C7XOwV33NRBcltKPCpenTCQF9EMZFpFb36swNpxCr
miQchNJfNUg0znF4FicxcoZEwNumPlnDRe6xq0+lXISNMfsb/IAWrCJt/FpT
lqez4+gV6fbXb4Jts7jcux5CDGEcdB7uj/3ekI0ALoTaAFqK7NrnyukI7gfq
YnGIo8fTghw74yQAuFhBbDYYGEswv4jh+T/Ba+s8BaGQ8oLSGs+5JXW2ToYy
QXFqof/ALIJDXDcwXEl2ct5AT6CoVClPoOgararA2Tqd2kbnzUQ73OuEq/nH
mrp5NwlMhPlf8qHD/z61CaFtduM26th16BnKuMNR+PTbXTy2sEb1q/ILaWd8
zs9SWFDzLG84PItGoPe3jxZhy4MmG10PZlguylD4Dh6CsMXhW+qed22y3ZkP
BZ8rIJNVWmldGjqNJOdoYLes8I4o2BojySvqd4L+X+HHH3Us6psPwQH4Rrao
ez/XFR/+HN/w39bbGr30ruMjuBrEJOf997cZiDYWhnHbxnhYIwQs4/yTkAdp
Vx0aE1AqITgG4qElF9A80oR7FMHaUbPY/JgyZD2QiGb7CVA0vXVPE1TsgpXa
s0FddEMeR7eF5FsFyDi73fqmb4KERbuE2zZ58+rpq9HIuKD/Lsrn9DzD5zkp
jA3fNPVmxgMYC4XrBE8KuHu4YMAbmmNbtLAHPZOXZw7BfWBK8uLt14Dw9VpB
Q3rlCnrZGxR+OYKO7czihnG8RCVXvfCx8slfsqrs3+Cid2k0U22eUQBrYezB
sNOOgygjp59VtYCYLj87VwE7OqreKdJsWgV71S7QFkf+M65HEHJvWpAocOVz
l0QM8xqHK/RemngV26uZ4vjSwuGSrCv3V+x2nmug0nJrlvPLXDyovSuCM2f3
lLad272SXlxUjIhkkiF/z7dId3UjAKH8opDQP/ibB0GXGknT6pjmLVNzKUPl
FeY0TTs6cF0rPyNpXvgg68uztM7ZPwBfNojgyB9WMua46SJSw29u91ysUAaB
UF5Q3lvOWJDq7nA4nh/uxgicNyoamoAVatt4doOL3gUTCRKiQCA6huadnnjQ
cj5S5pK/TrexO5zwmfT2MQWsRgQ9HCosDga6qzPL9UQ2gHYoAa5dgblkMHFM
rnfvk+CBsRFyYVhAuh0eGZhDJlHdwcuduikuuIAwcpKMgjE1It/1LNFBFq0Y
epMaQQwqxPYKQTPF0aKKYoE/35lKGlo+xJShHPp8RfyCjDMgvCbPotKxeqcF
7TZelG5i3UtOFeokJb1WH6wKYySQ/YGTjk6fwhudzA/JDzLt6mNfekjrpU+f
RseYCtTbpCYJ7Wqx/Q40+JTzHPpaZH/GDU12XoI2IxDpTrMMdL/Qp50W/XNr
jOCnB5qq+dlAQ/gUmvkeGN8TDoDuNAN8aDLTZ92qqfYU19+IW3Btu/vQghfu
3YcOBPHopFWmodNuFheO7Ws2a9eWpeFGdbR6h+vryQ4NN645O/LFsrrrGerM
9i6oL0M7wlzubgtV3vslosuMOoXROp+3i/T2tdUt5DtC69hRdVF3G6w2xSTl
J52G9Bk08AKDgjer5AleedW2286KX5jM7IVOc61XcIX0bswZaLG7Wpydug4v
dFcufgVaVdSLHt6kD4YT1kY/pHkzsPvXKTnn+vfeHsrOo0m7d/sny7yfPegz
aIALlqhptWfbyI06Sd0LneZaryB5+aujS1r0dFLK0y5ZuedEq+Ha6aNTZ3Dp
pVFvcRkdb+oG7vbuGdbfuyeXnsCnI4yEmijUK2Mnd4QAgjDrgPd2Y6bzJgSr
iNdC4x5VTCUVwEk/pYeUwuudRyD6g3iX1iWFo7GqW6VIbdSZOtRDOKADWPMA
avh/6EVu1D0vGIsKA8MyHuOGUnl5ylSs81lO8GwitcGkNgwaUGsVY/LeqNXT
aQhorDOTtPN7hOhyFMAjPZuLlizMSpRXSSDQfCXoc8uthOJRBNt3Jy+T77+H
OxoFEIY9CoZZwae68T2RUM1XlNZq6AKt/ZTwltjk9SpqgBFUEISW1boc9dNG
xHf+gPrGryzWSv1/hE+No8KnewfTR9MvpwfTx9OD/UPO5Hv6dfL0JGn9527S
pBd7BwcHBMz/+Ivuc4L63vtCgfsfPkkefJk8OEgePMb/vpv86/TLbx4kICzh
Jnw9PfhmdBffgwEkyZfwv9Aq/TdBj4RrQsfPeYPHBGDMYi4ieCRf8OIqwGpN
RhNEUa1lNi+PXpycfXd0fPIWl+QtTvz39M0Xe+HRK4QRu7z39Osvnz3+4uGT
B18+OHjw+MHBvf3+zx98PT+fzx8/mjz+avHN5Isvv/ly8vUXs4PJN/OvHn39
+MsvvvryQWZ5jncJ0Z1Nqxh29D2iNXy4u9nkCyeiofpzZrDlpgHR0fYZVb1Q
VUFcJrcHhYOxrTXKR4SToWFdvk0f3MWuA0QofXzwUBBK8V+fPvHA9XueheJ5
tRBASI1l1ZbdOgEna5WiVyaTlG0Ps1ostz1owDQf0kgEhgc4BPeNrQmEAMb8
kAzeCWMWe6KFB2H4weW2pvACjPnR3FHiSRhJGpeb8xhhBl1UJK/OOvi3DmwD
ekW0MbF5wDtB5zAk1p4Ggk5r7wecS9+8TC0Mjbtj8ChGcTKNJMo5ZNpY7BqF
fjjQM/CkFt3YxuKBhbeEawtuO4Nzd8ob4irWwMd5tRAHRxLX5AOC6hfE+YVL
kskZsVjPxt6HD+FByNGXeldHAkzMFuNMd/WQQlnYhCT55Jdpuw6Z0UiIFz5k
j/QlKuovjr9nh/cP+bNcaEctVngpRe1i0mGbzrixQuudYe4JWU87rXLGyDnV
1ajgQFcYZIau77ArwDYwE6V2UQuugXt1KNjMwFtclDZrKEWFpdhVhtlReb3i
yxgu0eJeYwkubUczJqcxCco80YIidqFzEODlLAIRsRv/27Ra6OSz5f0q47se
5/rqDOfj59t65zHM1k+1nQfy6mzsPx+bBU0tfczPeJ7kLNLIlSXXS4QNnmHe
ngR0YJiQI+Rc0RnhqOis1GDECWUCRYg4Y/oiL7Pkm6GdD2SIo+9O1aZJZYHT
EO6eKhdDawrFaEWVt8cSrhXCGGPbp188wViW6WpYfc59wHavEWMN8Rttw8dx
GOW1WQApIhJr3OBpljIsMANmvRo8MtdQlDlaRkn+K3vvjqnwbAk0w0tN1JY6
eTROHpMr8YtuYoQ0YHCANcgHVDpVIZlCaASIlxc5++UKuMsaTkdTvemx8DNe
f6UOsTn5HFSQjS9Lj/Vi2wM7n6tMETi6ihJPX569/e71ybPTfx3rB4JEg5g1
+ywMiJ3/D65BBHb7HoWP5uaBGFe3cdgvOgxresxvT87EcDhxBW52jsZkVp/S
tdP+tf9rDZ4Ex7ZkplLXONF/7Y/pxRvnxx0Y9NWkYxgOBYVSqviSMRo05sNE
R5BifV4wABFDBcLfxtWUV+GPGP6HwVeO8vaowslqtRGvsb1R72tmz412SEnw
2bULkrG+qxWRhSTEszfrilyFR2jVuMJdO+FEJETZeMkYP/jUpe54dD0mZLyU
7djvj0aDTbH4ENU5ASmNkWRIGo+YSqOmYYlNi7A8CJIEtJN6UjKaB8LnAaEo
Jpq0Ks2o+nOYONVnYCs69tvOTnSstyTCKgukFbFcGFOQifCt1jFj2nSM7fRt
uxTMwZe8/Axv67EN0TeTXku9JYU6hiYo5sYYdqxqtpLQOhrJp/5V6dqgO8vS
tUDfYl3MyfFfcE0iA3pnOSLzOa4EUPIFnQcJZttECdTOQ9rU2fJ8bBP2aMFi
y//wwf0FalqUQd1BUu5YkujSDUBbRbcu3sDZcHb+gfmSlV9yjPE12QGTRzmI
G7qkDVJHLb7Z3uJ25bCBITmfQWdIzmNABeOz9+scRKKFYutTIFedtaP0/DjI
U9YaiVNLFV6W0SMPvvnqweTBAfwfBs/7uA1x17EpihNZxFtHJMngtV8+nswQ
KwjZJuqE/bhuu5ej4/Xocq+2z0Nk1DAk+FHwF7iJPEKzkmQgl1VpSoPmRZtk
fbYs4fket1MnUmJJY/aBHlJNEQ+9xyiGONsC9wKbktSocSspk/zmOtR20ue9
OupPupPXLSL6FxBe2w/UWei2F2jU8S1pNAIRn+ljRClsUsfE/XK91diDDQcR
aLV4uko4kTdDpJu0qM/RChL73N+GXt9Sr+2DRtAA8pKrvBM/eCBPxj126WFK
jBxavZQYubME2MQ5y95G64QmoT6QKWNlPSDvIWnQdeeKjk+T/j57wYRJAaZS
ccE1Lpl7akxTvsLVG/mTOBBFwE0sf1uXwGAcVNNWRFBPJg7SbfD7e/Vh8m/P
T5+wNnbwzRcPsKDakwqk0Jx/++qbR1RkDfWqfzt781Qkq3eb+SWsy/V2Up3P
v3781deznO+Co2Co2tWtqslcCJHDkqW4mEphE9SPJDhD6iVyMBRn5mhYj8Ge
MVy9ZKtThIr15yxE48ighQHGZurXI55jND/aiIllCIyVllaRPdQapB1qmGTv
gQ3VYg/rvYacq7V7DzlHq9A4+23fdtiAJ+9dZG14AWQZmL/jt+DDXcTj7rpA
R5JoriZ3oJ1TaHuZfHvyr0AW8N9IKC9K4KHlMk3OJCoVRRDQ/vBZckJRaGYF
fp4X7+iPZ7yXeyfPn2FxP/gfpbljRmZ7xc6nZ7l7+fjVM3ob/7dNe5qByDP9
5eSWDOwh4bf3uLpRekMnKTkcBLWklALaqcFUj2O26mDdp6xhAwdNHj1ULECu
QurQjxywNEUcO1h4xEIt0tUsv9iUm9r4Cnnd3jcDJNlxvnfm1nG9D4sCgmLs
AFYCdAaZoCQJrZUVgOl7PckC+LOgkNPHrcf1NTDP7lf4s4DKhAhdF6yZcujk
bNtpr1uWPDoXIHKAQiJh/AYquGMl/cf8cGAPLF6hs/YWrdBZ85DtVxhFSRxy
cFCel521xqy77qLBr7Zm4XPlihZszE6OONh4onfajlu+FSUxTEDyYqIRF8vs
KsNQvmT1w2VHBrxRF0i+N8KTC0nBetuRHXsdON9OYMeQUaYVqzE8Nwv4iJJD
bppVEWbDuHfsJ6FanX0zk+G4qqPduXXewVOGQnf9ju5OZyVHCsI82lwAfvFO
wWrITRYBwPBlIi52LaTbMMpKfgWcm9Q5tXwpP0tJ2cKAc77LtXJ4XJPVauwY
GUrQeKemqejAJMnJIt+4OprdAdzbO+oYKoYCitnrT1hQzHuDC0y8JLqzLSch
KCgMxVZlyzwV/9c/JFebJea7yd/n+fusVth/9swWrZrQWrRutrnoe51rca9b
1ailtGzGsGXqQ2x9ukSvQtXzbQS70yIJxLZCmJBUaycSmALXzUWw4U3jKiVp
EoqgZgWi4XzvEpNIBq2dWmNoIK5pNDq1FB9qneQJcx/oJimu2MJrp0fd9zXc
V18f620lrhWNVKc/qRywpRL2HWLyFlXKfwLKOHo3XeJDJ28xIHp0sMV7jnIo
mMcozBStEt99oekV1RnEAUR9h+pMaNwgEGuPsuuy56MIYv0Z5e4ZodnRC1bq
noOGxlzdFx5w5eilBqW7uvNtq5Z4X8LPhhwuDjZd2pSzbf+FXAlkfJd/Yqcn
f96kS/zN/vEc0xDiZ/wTdGh+pI7xmaQyhajSAvWMAJVWea3fLEi5EPBitQFR
bSHFcw1f4Nqta81dRFQMrXvv8IxMWRRSMcMTufJnXIZQ0mhghNIYZXdkOD2J
kED2iXXYKipPFjGovGXRCohBcxvqOLlDi5X89OMBwZI3VteHUFQlDMNVHQo1
ES0OiY7AARdk7nY3KxGlqb1z2OH4AXRJXOSO7B3+ePAgDCRv/DDsLB9MH0zf
A6cBLhMA0QNFH0wPHlDGBLJVXALK/Y+K2lpTsWNQpZ0xTHOF9brm4U2xA0gt
pWXrOkBCRbDzR8nvaRYPx48QZ4p+nFTz8PPkwD+ZwXEKjx6GB+lyfemePGo9
eewejR8TotUAU9mBwWCHwuOABFkwBKQdeFQ+JX6zTIpsl/6prKykluZTC/8m
DE7yG5F33LJuAsvGqAAyGJMxdbCTvOh0UkdI6a4ODpoA5IakxCC6Dsd0gtrj
mWI4AnYPlF+F3nMFUHXUd2O3do9PMYqB1g20g+ay3epsk2OGsTgWMb8H2MwR
bfve5NH+OHmCtLE3ebjPl/3rDKGus+QYQy7pjt2bHOxbMM6YLYAc1Si3EDG4
lrxhMOwvaC2x5e9ofiIddDA3aw6jSmveNuHOCqOjWKTnOVur+cUWJ9Lw5ofT
B+Pk9fGBK3Xgyr+5t6YPaGC+CB1eXVYccPqe8rrtRL8+xrnC0RLWVVbv6jDC
QzgqD8cP8OgBk9MZELSH657feYCIdmf5KqfAiHEy003AbXNvY49U0Er3q/N8
QO6xoGtFnjctDZ/0KG/4MwoA/Esd8/SAAYECF4ndG2Bby5A6hJEqVxQHiLdE
7eqN90WJK5x/KzlI6nZa+RHLruernPlrK0vVUP0olLEe0Cs7sH4kWwlx0KUL
9yPhdHCwIOHdASu+JNAItfqoDe+KM52KxVLE03pTY9xPp8qtA+VcA5vTMFm8
Xxuz0o6lvkZlnkoRbtHkCKSuGZVVFq5CTs/0rbBxmjIrF9OOuz4sfVvflVJx
RBU0sVoy9Y6eP/e/crg4dFWzWIvj7EnIQotCXmwyoQDfgEiKlhq56Jauj82F
ZOcLKVgnegx7c+FDPjzNlfqcxDrgR+SN8N9n2B5acHbr4O3GKLzJGqFsCD4E
/ADTHbPORwWwQWATfZ/po/4PKUNOHd0hPwMhHCg1TduiFDzSMMStTZqVu0k6
LVMw2cdk0xkQPdgb8jPu9zY0Kc8ni3Tb217c0oMHh/R/u5qZbJr5ZzSFNTg7
zWEz0BpcPu96m1og6im3c7Yp4K9dLQwOqNMKjeV2u0jl15n5eWGxX0Gd0Gaq
3SY6uob0LxAEwZa3w7jmg12V0Xr6kRhH01W8t6Pl7ZN78u0LGuGgoZtSdyI1
2xonjMzdpm6JzHh9yh+110BbciZsUiGDnQyzcv7WVnHJx27hgqDRb7Vuwqwo
YkTmxdMmPY9Km0KLmwrugmpD1wQaQPDh2ODbTNOyFkj2TQl0g1zgqCPTCtF+
Xud0SwN/zbm8kA1DkhmAZqDn6dCOae6IIiy05AVOorKXuwJF/MKw6bOVjUXR
EwP02zFNE05+t9eh0ZB1OuSOeSX9Jhezz/FiaSTKGbNDEcJufSr2BcbeCGaJ
Szi3AmMCrQCbjoxHSNYLyGSDV5B0ThWQesoFWd2Q0hH4hwYDSyQhtSRJCyKA
QSnkRYDDl2B4RWlro9NbGZZ0cZUS3rRDasfFWS6zJUbUsHmTRCI5QRrUG6+T
QCTVCjrBoVJsTRQsimcwgCzAu9iUgh89GImpoGUlAktaoZUYRbRGeOsiRiKr
ragKyjYGqBfqU2sw/4JEvrQC+S5E0tWMZ3Xe5oI8v7eveNP4IYtDvmwKJUms
RYOTbH5CTv2Mtk93PmcBEJkI59ng8vJM1ygXLhxYWa1liiR3wVWJKrgEbwf2
Y4rpQxiwq7s+CeH6Uq9HcaYQ1isuP+lJYNCDGNIeBYXC1TfqbCEqnxiYPYAM
ths0LOl1aIXCOb2eLXuMDfAVGXC8DKaKlJ/xkPJEQn5cHZwVk4GxEsuP0klh
R3hfba/cioRaQ8GKO3aXwdBiEXJSgLDqTmtOyMinxa5VGxxr8KAMLLfUX7hM
l1LSgkokwu5OGEWiNhykXfpGGH9QIAxnydZgfONobrcYHQUrSuvFOBxD1xAx
b1lSHlovWitywZrLJlN1Z6v6R1xwAOCVkvSYxWq4qSRB0TW5aeiAqFzZs+27
T4FiwQx97Uks2vYuiz8qYi+bFExSoBocbtSCXQKK3m3ALLQJmSuKK4DeDvUW
ONGc3EpHeNgGZhHt+K1mQgO6cSrk0hIqqCktKyQY717r3rA2yuTu+IIZxs7C
hDg/17BzXf7VOPK4OYyXAQCcDiFtHN7SnONoXGE5qh1DJ5RAlZjka0FN4/T0
CJXMZRVpUoipIvclWyPoJus0r+I6BloHeeQgbS1HsNHYJuS7CyzfykuBWYBS
tSBAiIlQwUvmXImtqjLbUCIxc/l/eHDWZd1EPzGsTQCcpfwmLZjg4SY5Q0ys
TFadleUwqWMblaM4ovoz1pEWReyCHMbR5R8+dBAZP0VgwKGkQvLLIG48REzH
KdAHdTOQTDnqbH2nvV6cm6HmFN1mR3v9KDdDDTIaDSm53aY4FH0lDzueVffY
WnoJguvO1kCyvalFe6UX5saFKvTA3PQ93QFz47ZhEOZm+J1hhJThOJqeZgcR
Uo5CEEZ38p04jb416IaxtHFSut6unnYCTgpdPN1vU/m58yU9CFAfdkZ7NiCA
fsQ88a18+0nyIVLUZNFY3hLE2c/i+FbeKmAsDHuisjyFRTquoW4ZDyNygVan
psVtScziYjSS0u+eS6qYhTFozECoM9eKHji0QoA0ETzBLNhdlfjbsp29tcpA
a4X7jyDo5v6hCxjos9K7KIX+SAMFzw+v2gWPdc31RwXMdO29KrLJGzR1gvB6
Aau3Yjh7GSlNNQRQ1O+S169eSNiDPpEsNvZF4HuXkiQoeRK2wZb9LpmSfE9e
LMsZQdrxTR2qLqXWkLUOD7HFFk4c1X8CHXux8bnroSHLfmi6kRrR2pEqRx10
Rqo2EY6akTH7VK2JjJ4hHsq2saiLNC+gk5Q3kioYKVcnKxziqwQWhO8qQSgW
ec7hWgbIVhEhPT4/l0BS6RwT7hFAld4MmnXZLdXL8I2izjjlN+9Yhj8Ps1lg
PnumJ3Hv/XCH4iTT6M3g5tO0TrEMOU7gi017nH9nXjqPgsvFQFpbGFddR0Mk
SxdXfB0apuiGLWBGRiFsOL6lzhiSO6YDWaDOmNAgyAVcSTYsmIxtTDtacowy
WaazbGmBOK3QOIn74vPmXPqUOiqh4wpyzLElqF5IW+ZnD42YsG1sOmrWIzI4
TigBQXzxsYDc5YiMGQ6yUVqkvizzApoDPTlSXHbIf+ObJLqowPqwmPbhbr+Q
RrdelQkqDEJiuPeYUYS3D/9ew52yMabv3pWAp2EknCSU0WBT7xLhb7ZG0RKs
rIePPRBSHolCFeKSbNxfHMjI2a6uOIyCXcW3IxXqGcL1kcuByh4H2N2ogamV
v5bnAXcnrn3tF+44ZTOKRAS0SqeE6mAhPMQq5bEpmqEuMNBZnOrR+mNQt6IC
IZYR1o5AzVghA9hJLxtqirNllnLkgNwkdF9bMTfG0bACAhzJzIgfS41jCHtj
fkDoMyj4AQuovek2G6oN8l1gva4QAfCzosQGLeSZGKD6q5w1q57eqGj1kHlX
ucOJDpSkuvFE74gbY0tmDzRPCK3hq6ZiTDdSqnNvQbAFLaOYU5M7xTrXY1YU
5mg7NY3KZ+qlyHfDcCv+cCngUIxkNMBAndpI8XNM1+lQlRJF5TLb5kDieFdW
iIFX980j3OmjXZibKsEhF1HxvwmPI1kBfzfV8l7t5QU2cDC9hpZd6HTXANsl
Wa+A50Ol0XatsqnSt1lp73lShvrXLPivNP1gMdhxnvqWIFgAhmdPYSHQ7pOT
Z69en7QuEXzYGZSzOmiuCdp5xXRFtq20loatOHewxIWwPbnQNBg9FGDQ01R3
R+oJcjiBP3CD7h55s8i+pjGQA+82V3GUm6dxKxxXHYJpohAWmBwMHGa6WnsZ
wTLGDaoMjtOXj7FwSd12UGqXFOaAGAc37Mnn0EjbpNOlFDEHaYGHnfxJ3pVk
/5sgBbqb0zUwaV5/OCq9Pvg6W2IGqMalWnEMPEB1iJpKRXSQgQ6sSScX7QaT
lgQ805hC9j1cHFThNtwzwCDjrDXdsiDZtTOmIlULBH2sJgNSDXLyDasN/ON2
Ms+wyqdLUBoHA7R1i+EjlGyOaCHoibrE5ZAASn4p9xKOPO/Ub6LIv7w2+EJS
Qgg2jKOmcp8pcAffvqNhaG40krqHsXrn51hTRFOSuQ5oCJbs0Ht7BzxrtVzA
m7/pPyg3fShxM50Qw6GMwR1Q0PtDnLttt8Tabpz9dhRFPSp0aeQM0oI5aF0g
QFtrRqkqLTTZCsmoEjCIJSEbFu0KtkOo1D28tQ1Kve/ORijOZC0wARin8XPA
IRpMRRuzlOFISfLTqUXUIsjauVQ38+1ayPCN5uTPZKQakDmUQ2EF6iltBo66
JYUAZ1Xlg8DqBE+AEW5YdtByzedZJTXaLN+JwDIt0k1fZ8hEqgKEeXfdE6Tf
Y9S0y+hRQc5G7e7bkAR2XsbHbSAtr0sgIRetfxHZjC7pfG0j+mj0fWG/Uc4E
ErkCsWgAUZxVoU5O+O5Pm2Juxt5fFlsydIeyiebD3V67/acOScj7AaDmM127
IX0kipY045GcszH6ruvMjEGm4S7w2OGCsX2s3/SmwK++jFQks45dMZtZK9ZO
ZujkMBgeDGu/ByWrjRiV9Hs/dh9HhaqSTRs56O4eLzJdQuIEUcGmCtqg+zg4
Uj/PjxpV9+SSnurx2Q0nYC6kna8hED300K4a2t+FKx2/s4/2e9CJxRx1GrYD
09NYODEjUZf9SDtN9ZSe7mm0+5YsgjOU9E5/7Z/3TtyT36in5Gq3Xa3BeEPj
Pa9ZlYNOm+dZ07+cEt0q31mwdH8DPaUWhqN2RwQK1Wlozr8OoG1QVY3ON9Wm
6PuEUCO4uASKmCeUXNP5mMTJnq85bWnki9z29hzCffqH4ML7RmeICdIlFP51
ACrkdn5XcRHdyuvKMa3eM8FuFOTjxn563BHOwWWl3+z9Wzi1jtulra1itPq0
4lz73cxKLurdrGrUyww98kkEBsMKuZSbxEn5YsGFN/VzWi9Va9CMNI7vCZVc
dXYKVUreA4T+l4zUI3QC1fkFbxZLp3u9VqaEq3+BsLzPQNuzslxmIKTe9Hry
6uXzPyanz5KH5lXrQt5li30F56YKfRhi3RpXffueHt3Qk6L3dmIpXTnmVy9P
vBM47VmoVl3jsIuaYIC3rlHprs4kYluG6shWF5mjJ+9gxOEdszpJXTspSidF
mG/RW+SYCLnfqHJ2BpHu2BHOTc7qG5dghCU7D90RkJyZm4f68tWt1oXiF++E
Je+LiuyVBOSLjn7fd9h/r3GbnIaZ7+qo/e2ufjqD6umIFqtd+zGPK1x2q1pa
4GfTLifLgYC1gI5EaxwVpuTgvfU6SyvTczhWMkxRUyoH3QQ4iNqN7NowBXbP
iNg/ieFyOURTKCmeWUtrGlJmq8kxu9bYsaSmX2lBEko7ibqxz4VIO+2UTd9x
S3Q2tPea6Eibo36RNsK2dBa/v8k9IYEp/19737Ycx5Er+F5fUaE5cSSN2WTd
u4sT3g3eZNMWJY0o2eMz4VDUlSyr2U13dYuiZM3TfsRG7Mt+xnneE+e/FkBe
qyqrb6J8C9Fhm6zMRGYikUgAiQQSucG4E+kK1pdr6UoNLMiU7h5Znt7sbpme
qUfgJet1uC43uetN/quxLSM//kWjvMeCP6/KqvsRPKe5Fr8m11kxqa3YThvm
3fGdNmS8ZmfmHf3RGFUVLwnWIiGm2GuJT/m7S9SvUFNphtiVflOEWGxwj9Sx
nXu2wDZ97Oq794QnuuZdp0bTw0aldt1hnVK35i8HJFIX6D/Orz3Mj0rIro5R
d1iUUx4NaELPZ3hkJvYQUjyrfSmiTGue/kruTOx7MJi9DC9WBvK3e9ojgrOO
xxELLqZg6NBXPLtZyxWORZ4bk/1W7FFOfWlxUU3EC2DCrRroKXsJLbVI/pQr
XxTMu6DzTkh7olXxIEZc1MXXTQKMeIJXy4R3ZkD973DYkz/2JGQ2m3KDnf7Y
omkzH4/Zs05kMCrIEj6cwesA8vegnIDCE1FJueiqd6uG/mBSjR8Kd80k1+x/
0iQkntpyvxd5lnaf7erPitSj7p7HUn1t5eW8eiTRTk7es5kM9qXOtjJYlyzr
pMv/pNeffDGTaWYAqWbnWqZzdioX7UT2EhIyLTh5mcvpCmjm6FzKYzUTFvB7
zJp0ndxiwhDgUiocl+Dq99gU7skZGcZO1NGEtaT+rv2UBSxgxmlB/jsN7t8K
PL10mWi8zAadUX74Xak1dXvHLumo5+5Q6rlOI221lJbMEOQDzEkbypLzuwNT
XwmGZlqClkRQ9xthZDomtu25wajv/bFkNHR2AwO4STDZvPTFQE/5Rc3coumk
FNHexFquPJBahlSjRK8ZOTtxiVrttSxcukwPbKmsLpDb69b5ckGmdk2mRY9E
DLrVTkoqrq3RhYNtt2ldNN7AERr1pdNiX60asno53/Q9uJrmwvNFHzZmE2gQ
iWUdvAE2TC8DdMBaBsWeFBqC6WtvBLmbCnn/LR84baL6dXUtZZ2G3CWyjAn+
LQJVintb7oUnA34Lm7aeByyReofIkKZ5cVKUApbPrIUhhcbdVQSzPfc3meo7
5Gsy1HeGZIIEg8BnfewKD082WEQTRWrrpZ4fk76lVZJXbdXEtCRG4ruesYBV
fCB0AuODBRFYVg3mI+hvDURsv0DsdOksCbv16PTNalc87c6ySGbTFCPmNJ4z
KKJEz3l2ntUs3re8zm6H0mTqArMotEwrqK2IB7JdLLGRogglfI6MI2ln0RTD
6khCDB5IhLOqeCOf4soxIRz6JEfOybGa2G2dmF4GtzSi1nRs3eDGm2FeOoMq
zpXGlmGCX0Ez+RJFTn40yuEpVXZPwwZggCbaDlErqtxXTFXT9VU22WQxn6Ku
xq7/JahTzVkXH/zKkD08asCt+S1M0sGByuViXB7leTBPXtOO0ALaLCbMo2/S
8n7nBwiDIBgkE/UnSq6WTZSCDsPtZFFhUr7RAa8VjKdvDsip2MZCXbhxUACX
YMEauLIskkCwTTkXSVJqrhPozL53d6QFQwDffOKQ0vdEN3ZKKxfNTrv8qJV4
o1NBy5shnj+w2yGNp9F2SnC8LJh5rgkoiZ5/GCj/mltJucbEDYzCPsjzjtAi
ivw6KH7lzERiws0ybqkuec1sU13xmpdYtZdvFCj3rAhYW8sAeuvHXtoBxSIr
rnmyY3QPnKN1Bh+MitRkSE6PK6PntBZJSnPnTKhJI7RVD1royrqDDLqw7qCA
6m55giw/NNo2cvug4+1CBaDVLooPHzr2f/F0Fr0oL8aaI0/SiS5Nr0dZBA7T
9HqPie6Y2w695uPg43kxjKtqs2Ia60dx4RVshjr4zGVMXAZR0z0COPXgCYAi
qB7OrmN+ayUzMVnoWnlhyIUOzjV+z6KdJAqMOnCmPTVYCHhSg9KarqcbVsqy
83ix6abSYRPopNJBBNZcHS5XoFk86Z3KF0OdvDLsPkua7ZmNRL8uMHXBo6eB
5IB5X3Mm5cmuVHyk9lsc0VkzHp7uy2eYrkh61FpFnmGGw+mussxAI2JnzQph
g9CCJKncTmSGoKfjbHu3XUPYY3I9orp0gbxJ2iYwLdgvJfXAvh4DTt7a3xaz
STGWHi+P0fGvKimJLjP4s2rs1ZoyLLUHmnR9V3jsRJH4kwQtelwAw5PHn1SI
2Nr1LLB2T2RYfTwP0OPnqtAWndntO0PlFqBO6O0ewmWER0tNAC6L8TV7Fi3c
i7lN44rpq8wbWXtkad5f5MnV2WDkx2WOVX1XEakpRoK8juJBiZX3Jvr66I7z
6MNz8nbO8mM+wxC/6H/zhAftTZieTI/4MAD7U+JWPPbMI+FGywOJWCF74mNF
7P94jhwnt9ZwF/+Hf31fFK972ZHyXTPxJeW5BkcdvpPlqy29oKU5eUcsHXPs
F1dB7EZnzEOlFnnzWqAvPmXHptQY6EriEiZm3YjBfJR7jP6NC4Re1Ub5zenh
vcQEdsgGI4P1NeMhkHc83gBfFTmlJhKmVs3cviI4WgMFH21xbVw+4YdGcLKG
rW+uTNLLhkQPe3iAO4YlZbvmnUoUNwPiffTNWyeWmpaipme0dB1XL4+Nt6y9
FiGvx2KNHp1dOzX6c3aNjTeUZHO1RnA1fVPoMon0/5B532Q4Q/0br8Yb1RUm
uE0mxXRRo2hNHql0R1FgvgD+yhmNd0of6x7YJKjpKpdpTtI8qXWvoh9KyR9z
4861rOJq5N2zWJgK6Sg+qI2vKXBs8naqK77VNiULw2DORsGtGwq1LWjbIsFm
r6zO5Z1CyIeabsFi+3O+Ut8CS0AeiRPCwDjKX0EFYlY5X5kP0Hqrzq/A2s30
yNeNLnD4G8LnqYFN4I0kvvwNBebrvKCHWUf4qsj+jtmn3/+lEgUD9tzoA+eQ
TOQ8//70eMd+weKVZsxNgscr7Lgbi0Tq7C0wXWXlPKjmVULuGHhspWPmhUIv
DN8oIfJkwh6u8BC7PKIeT76lJSs3Zi/POqnSC0rBwKxmKohnw6OmkI4KPGoD
vQs2DoqHwmi06ExLPdiTXeBlSyM0oAKIs3hd3KpEZYVAgExLS4+WpQGH3yjw
fOONpletKdUiCINx1QFbb9gFRjsGg1yDE+EHYnjRw2c7AEFtnIs08EAFAgsn
YvjAoNuVLetQD9suzcVM52Vx3fVoYqA6o2MJugrJb/hWvOZhrtBZQvK2NrhZ
wdYSkHSPhlfk96S3RsLiX8Kkx5R3Cg71CxUAbQyAsttsjAG6sCV3LdHfUKEg
nl2iHYYbHfAInUunKL2qpAvuacgD/mOvnCXRUOlhoKZcsCHKhpSoiKsAGPCe
Xy5JXyy5kVnOebEcZhRVLCIZ+VTJtMbaEOl2R4lPKiSMRIeG/ysyh6OJWMjo
+ByLnfc9/WtxVmxMZllgOiY8i5PZrXoCB0wMxgHHpHwDWc11CVWELROE075z
xkyHmFeMUjBRXueWhjmZ8mQB+Mp0XF1VwsLF7PcVT09AAboZMcm11ISIaspf
2Y6BG89upV8RPimh81TqoXJv0BvOJvdIbxUZkG7W6WpHZZ2gClJ4ZvoBchqm
/erckWOeZZBoaaPaicgsacyDKGXBpZikMhe3NTpQdRUiH0wHMIG5SMZNHviM
nN7Jg2GW3PA3rHRoz9gDecntKJGlSI/0gHd0CCvycG9kfwHweRYyGSuZI25X
cRye0LIXgoxXLw8i5jkpxyDJ8gqV/lXgVFo0NRjF4WjWVb0jvNAbbiF1Zy2M
OQ30FWInqbQfk/pxnWDQbZV8ydgVMmj7gHypMUblfDYdk6keOTRLQoHvV/Ez
melrpo4CDNxaKvtrZ8h8FbXYXVcwpnHdsGOyRxLWI0wNx2N4k2gCM6baKpod
wz0l89NvDBuUiJtEYgAkeroEhaNQsEXEySU/ISnzAXJ1rqSxiFGz6VS7p0TU
CWW50ZEIdoDjMfh7sKNZvt9mpgh5yDf62OXOnK1pywwScwTKJpbT1sZolFCD
HvzyF814YBFFQk8zSvJWiQCIb1ksogORGK+FVAynffSYz5CLzEq8kU/Udkxo
FvhFDn5LcZEx7QFFbmw05sjHfi5mCXE3Rmyz6uJSpKFWD52lve2Yruo1A5wW
AQqYA6W65QMV191Ug0UqFflwYGgXs+niusYnVrfqIyKYW7pE+ErJffBZEF07
8XOTdA75gfhuYh6YQiwGxgCRTHFpmD8tBEsRyNZBunWox4AsYiKaasmSxfgl
ql2DC35a8M1Y7xPbRbTStmwbgdWglmORb6xJEzWLWiQMQt8n1YF6pzTpertg
hTYUToqp0Fy4Cto0raoAcciL6CixOUM9ksIQf2PPvgMTwhB7IzfkIfbwtw8f
lO+SFKI4gQkJaQe4/BGbWiHVRvESDGOPYlhZ1rUEwa/A5Eh0jioqq5WnR4Z6
vDKZVII3F7KUOvDo/oYbMukSnQUXpyJmCOZx8tV7fc25h98uNTx2tWRrl4Kw
+ZUZYVfFpeIpbOlylo+Rmt1M5bm3r6LcY6tBMr7AGBuXV4Mq57Oj00hvjjIF
HfjCsiCGAOtL8TCPeFBC7sUPmiaGorQsKiSJioKeEDeiPL64WZD9sPEC57aD
kbz84FmgahFm81ZimaYr9aoeOM66gM4k29YAkWGRLbtmLtkjlEm1jXdwRnVf
4DtU2QUCq4v54lqabnlJxRQ6pWNRhrhdM5I4iKQ5chq1PDJ3rfNuD5oHGB3A
GNU2Y6vCMtIhvfMzIqM8vHRki4cgorsdoYI6A8+ns/l8jiH70Th6wG0DXjDw
wpAKT09ePAK+96YqbuB7GA2iMPRZ0clbDCgtC5HCsDBCTnbBEwFjPZIakI+I
X88pOCpmFhTxMPiQcEQwAUeBryiw8BgfOuxAcUC9sAScWOfZjN3JQjFXYBGP
3KZRW9ZjjANr/yJC7JsjQbhQYoqq3x+S3sMwE92w+f0NfChtxrFfEao+gCqN
wPLLg8eHOKBuAPl1wsO7HqU1NAXDWDPOhetzCIZgF+uGsXBxwhS53XJxMlpY
i2XBK9yIVpVF27XcYeOvEfz1iaNbuDGfeiMUxeoQFp4D1cxxLNYMUeEh1T5a
FZDCI0pdHizCw+V7viw4hBdQzs9uXoclOySUFK/nW1gjnYKHS9rNWbBGSgIP
l9+Ul2CtpAPeiNjAGgkGvFjkotQDZvSFxvAduVDSu2qdwB8+LvD58qAXvseX
Tou9sSq6xoTl0jRkO+jJaoDBNQRnVZS6BW89VqPT4021wtk22auxTTtMboPB
coHU0KwZ+7OXxZoDUa5gscsCJHIWq+fhM7TTMxxKpqrfOJraNG75GBNlWDhH
i00vDtCeg/WR5FvPKE2NlAROOYwF39OufHqbZqqOaEu8j7ld9TZbULFsgVSE
m8dUc1YJPnfOrmrUIhkx1vZ3UvzvYHZRm9oo75kmJzTSZifE8kqWtiT4YIOl
PRMx+UxYaIf162Fn3ThvGjfrWwyZvFpwsy4fM7mJtjiNiTg6/IWuqNil1gYM
Rl7UaHmpqT8hUAuNCM3AnL9wpK7Zwtd7+eb86RNBbEvaBHqbHw7OHq/Rpouy
noqAsf/3f4Wwy8l9O+Rx7szrLcXZGVlDVtX0FdDj6RW6565CEoGV1NdTs8l/
11y3qNFI3w49DYbGBs+ZYp/f1dIxYj8Q+rke3FzFyhMnWU+15gJ3lvX86wOP
uBU/1Y/FsefxwjAyFPqs0B+ZWgasMKTjrF0Y8pYDc6+RLDb2OxTF5p5Hotjc
t0KZfiSthbclG+PduErXPdKg3uFsOh9XazZAPL+r5/ma1WmC/MiU09pkLl+f
/GONYxalgcePVlfE0R89fbRGTSKZ5ydHq2uSQbHIFuyau2F04qb3fJrJZzZJ
Sre/6gqAXdOiXXHOL4TZCyqyyOCfl9MbNC0Ir/sdEcOY2S24r6WMv8mjUpPR
rGa+o8zZAa3ozHONXyvV0zFz+izp7RXdHZL5WYDSUkGfTl+IFBUYn4wlcSGH
Pz7vOVpNaI7cSlhOF5Nc+YZllxVOD6XB9+9PB8e7VTEvB4RXvfDDBz4pZurV
Q4YSq2231WoMqAYAENgW906YawHGelHwLOHfF/YN+fSOq9fcyyqZvKYOlVET
/VXRPsVtc9VMxDjDsWFm9AtuhaTLcP5YlayIZ9V4WgPWzwCbSQYfvirQrj63
Hy/KEv48Bvw8n9bw2zfTy8ngWbIYkx0Lesrh49eLi6n9Hd79TObw51Eyq+fF
xD7EaU4m8OW//vftG3wp9fy//pNCTgAtYLtHM5zEwSIHcfDbN8nVfPZf/wmf
v529u63fzWHdjy5ni//+P1n13/+rfl1BycEkn70rfrKfLd7ls+kN+3hWwVQA
z8/x/7McUEAjflPlyCVu8K8TtFAtoM4h3rKMx5WFe9ZOYUcQvnftRwvMPImx
TN//pYTfB1mejz9YjbcZZGQDWqQcMU3Lp9ou7IpdhEMVgQsaHiNkTr3Ce/sL
/tQ9yVlk8mlrRWlA9IxBpTICCvnXv/5FRRYxZmHGffUiubgA+v7S/ku0G4we
NAofNutCpfeWbf9PbpxRN2df/g9mtd7NUuFSdixLd6AJI3918YVUzBxTZ6bG
B42aEoDkJKY2AqlYmz5IPxlZ9OqswNxSNVb5K6vE3HbQDvvqGY/yYCxUtilW
/m//1sTiiUg1y4E/wH3AR/nQwqhcTaQAKv9pf0H/ahM5+v6F/aP9o2XhL1+a
cPHqcDxF8jMUIUjo2+4uBbuLo7K/rsA1h/+jGDATbxjk3nuL/d6ieqfVjl1k
7DNfCh2TrKeBTNlb4xj+RqdmrscOsr9O6sseuaF3FPbel7b+YVBfJiADbdgg
jDZrAHLSZg1Actqwh8HGsyDpbtMmG8+EpEAjlTICwzZHT89PYGtmnAOtUfkc
zqL1awNoZzPYrqhutcYGGyCZ3FrtQeiftd7atV3Dd27R6S9pAbNWsDSo9kBn
zdJ4DyeIkH4MTLP9hmBHweBvNPmL1c3aitwTm7UiBzBDE9SZYcLXWtVsWt8A
42lWzqYTDNJPFjcU6wbiAr3BaJSn5BVDncZzdqyHHNPdcwExzCcniiSO0JFE
Mvv+o4Mvkm2vAUdHgDhlYHRLW1JweHvPXuD/dkFMAOZgNQ7H1mnvPGiUPmzV
5ud96/SViQnED4zY3THUEwbtAU/pCPVwZFpVHv6p+9NDOEwWkFQwE7oUWrQa
jef8eFlLFOhWYmX8TNLrvJzU7VriXOXkJTvQJQJx/huaNzcuCYkoL262cxh9
btQEXyqu2QLntpjQjd2M9o1YYLaBjPunF5lrMqqW4NLHk8zVNPZjriA4jblU
MZdWOSJCYx9NNNT8cNT5iUQHI165n9qzR9eBBv1yaVGLbam30x6J24Z20jbW
aYWxL+Xbn1VbrUEDGoWz0saqK/nWMCEm6TbLb0HIbY1Vn4hqIctfaZeaIBn2
8vrGedlgvRor08iOe+90F9tEo9zNq4NobXAtZKkRGBFmnN6Xtv1PJqf/2CAf
FYNSSPpf2A9aeT7svb3GGgo3C/uh1QImS/b2xMm21Ilgx2YOAwezi4ebAerG
yNkCkH5DumNUc9qsawPgwltB4/QyHcCrF7PbV+jm8Eq8At9w+solgIF//0Xr
0VX9YQOIBk+DJWAtgWmUc/HwbXzAiMWND//8AuvohNIIfcr25QOFpC7ZqSwK
OiEiFGZ0tx7abfDcGi+myt0i+cXTDi3zHp7nezC0PQyoaXX6Vm2X5CumVs+L
61fPKI7WWmC6SY23AtO5cNxuNJr70Q5nlduDkf4cO1uCUTfvYjBbgWldqG49
mra7yHYo5rKtnNGWo2k7GGxJNxRBVx+LAYzV2XdbsvPVIFYy8uUgtmbhy8Fu
xbyXg+z6kfVR02qkrc/+l8PajPGvAZCE6BXEtQYY9kr5o8Ggt9QdgAEaa0HZ
Cgy6U9zBaJoOYzvr7N8uxWrS3jramm3DGWnvrawr5UE1GPtLbjpIKWgRU7F5
9MkBfuNP/psfodW/a2aNGnYM1Mims3zA80rY+7azY64hoiPsN0wIVKO+rfHS
SwPi9VVRUHypcqG7zCvm+Aeyv9An1Nfa/tCpqYtc5FFDEVDkoSIvOyrJR1a2
vSY/6M3aTHgAlc1aUQR6IWqIPJqIL6GuKAiStl5RTJZXzFvqFXelWLdDSiXN
jToP/6YSNG/QHEOl5MmtGKYGicd/gWY8PTR7JSZyQq87RgCOfdxg7JhmJwBc
AD1fTHAQbZDLsSS3pY53dbHR/C7WY19ptirmAgf4ijng/ig3puZyrOa2xCsT
JkcdP3j+6ChwPe/Vy5enx8AJkAcM4CB7+NASvzIDoOt6D5jNcq0O28IwIlPv
6uFaUHQPT7Ek5hurTeDR61exuGu105J9b9SuLdqp1ms1b/lp9mGgFYdj/aHp
Xil9wNtxQNZEmPIF6QOsBepbEx1ouOX22vVG0YmXt9HiCTdRZa1fq1lHf9uO
9NuprTej11be6I0aC5M95xDLGNB6AKW/qQDZJgXFRtflLtwMQGfeHpommNa/
wTLp7tm0wgBkXarSIjXJlutSMAsC24OIl89PX6Ej7kN6Zqn48pe8JnEuN2p3
1joVxGFjVldpOySzqoZf8e3cvtWQWtVrAQH0SNZ/Re/ndtYETm/ANoFOrq6W
NPauGoe99+WaI+GP1z4Z4AGIycn47sF/IrAYEvvTDZpB70vKbsAe0Ku7fm02
bGjjrdFG1PXXqKtjBZoEazeByqG1Bh5ZlB80nGp203YMLe5h0Lzy3zNd9lvG
47l5d6Ef8tLtonElIdoqL9TuDU6jg96riS4ktBL3F79Cf9yPaJ6Sf+7H9F/P
82XjpwESca4cBZHjiq6IDMXVrhR9muvFxabuUvEWvaukQWwskHab3AIgkdMu
efV18XbjNifjcuM2RyATb9zofFZkPVPCgavlMg1RLZNxMLRC/d0SU7Aa5zTt
ZhJI5U2FcECRC/vXJZeTsLzvmwckNVd1vy1ua6rwQbNYUh0q+aB32mwl/Ue0
a2yhBk7QvVz9NHwg9OrkO9yu3V+dQ8/ZI5E1oZNcuA50pUvpycDXqK67oCwZ
O+PuM/EypFudbvQN8F8Xt6ZrfLlKxpVQb0nWmQyX5/W6yxArYP+EhxQPeLi6
9m1yNTbWbk68O11+8625q/LzvM+JV5zdV8p3CFijwemSQBl8KwmEwYWSABk8
JWnrGh0i6fA2+j1CSWQoYb0MDSWsn5HVnJtSpwRW+n2elEzDPUB8YUPVfZek
bNLjEAODMznAwMiaDi92bLX8iGzXsTQfIdvlIyb/H1s4nDKHGNuVQhXzgLHd
wGqNCz07NOFOem+0JqrcTIjD9nldCEAGHwuApwCqC2Hu5WaQRTvWsK4I2rFg
mWRO7ZZV8K+usKlZj2SljnjZMRUxsdJ0yWcbfgj9q26SVWWvU7l10atD9sJ2
5bZxQq8cdabfvm3VKg97pGzTBL2RMWVZ665SosMzVe4kU+KV/XZlmQTTgOjQ
+lurdj41V8bakf03+8XhcafNVXI9KKvxXC2LajPkbVZeNaomoxXp3Brw43Xy
iwm0O+acRYYfqOy2K1PQ5J7KnSVCRtNX2TdHs++p3ZlhKwuPXtnvzJBC95oh
+50ZNoJktyoLvtR/QSQYT/caSHAb02WPYDIrrnQUo+lcxdihsYBfstDht+R+
hE6ZdgjzJWx1ycWAmqjZ7i9x2a60hK0uscBrbLXHGMhBuZ1RNQx/olZnWNod
gxyWPBp7bfu2von7rfT67jVa29UOcDq1dL9nUauzPh2bubZRDbZx0w5daguX
R0+/qVs/Rvpt2vr50TVeNwbWQauySHdZhsFa2+QVnTUyyhpGwwtsB8us6Gtl
/fqB2k/9WoHaTv26gNpN/RqAJostUx0bA+rRFxsD6lESmwMya4Zidy9TBwVb
W6YDCta2TPED9vavf/0Ln24eYtoSCkyM0fJ4jGKKxtp4SCkK7Ly4YjGG6SUn
hc9lsd1k0N9yMclYOEEeFroZyxkvQiicKsIzZUXAt8Qi38fVVAYTrgs94BwN
Tw4KHy7zGNILGXJdDf7k6PicYpVeg+IzczHY6T49AsVHrIPB4clXp0/sZ89P
vzt4cWJ/e/IDfbXOTr/6+uDi5ODs8Oyrw9ufvzo/C2L4+6ujI/77zcnXh185
N8nN6eHB3/9+cXD9Hz/89B9HL796fBY63x0eWUc//XA+/8cXTvzTV1eT22+e
za6PH794t3dZ/ePp5fODJ0cHB+cn4+kJ5tD4+ef4m8vv3lbF8Mn06s3PPz8e
PZ+/sZ59kVbz77/PLvM3B7MXdfnt63l99MPJ25tvn8xnT77+RxU/PfSffHEz
OXg5r99dPff8s2D+bfU9m9bJk+PupGjVX3Re1F4v0nGVURRYPSx6I29PrRBu
wN7Lw8enRxryHr2+Obn54etvp/9x+u4n5+jg7z+c8t+PD/6eHQO6Ti6/SQ6/
+jl4/PPPb85/+C77YbJ4l3wzi36u9k5SK323dxXMvhtPTv+R3nzrDL++vX6c
HlwdnmVHP6XJu+du8ObFRf6urL+5efQ4PQtf5/N3Tx+fT8cXX36pzb81LJo+
i6rPpsLyFfIAEzyGLz+YBR1j4L/pvBAx0xspaEW+57yAg3/Go3eSrDyBTVcC
/YkoxzJCMnvmriGTxQE1AF7UKnxig9Qb0fGbpE65l3B/cDemX2wKuiAiLDDO
oHsdIdvkXkUYkSEbPAMBxlitlIGdsBqGedKqtT2UfrHPb+s2rLaPEqtEkCzu
k6V902Bofeqj1MJG/NKY4DJd+Bfb1f9dqRevqK+ryKtAt4W1X2yH13VU/bYi
wgplRaMCsqLOjKLlNatgWBfO+G1nn8WyKOzD6XTO41eIDaLlbdDIrIAyjBNB
0Q/oFmhesfRWPOnDg/fvRSV2pyTKWcaPDx8eQkOt10YDijAB4i98/0Cu+3MW
MZgeXslsFFywEiNl7/otZnHes3usc3u2t6/dSz94L85ftuuZ15LFC/9p6Sf0
XuNtL0KCf+8xk909e2+nVbnxzHvPurwfZk48LMooSEs/TeM0iINi6BZu6QXu
qCjKUR5EUZbFjldGfpyMwrDI4qT0i7jI8zSO78sOfnwofpMRiOt9uzlafZLu
qDUVNUoegqTIm36SD94b60s0wH/d/cEQEXBybpq/+Pnw0Px9zwYhUevb3N+H
vsbc+tcatHmSctDrrl2z4SdcR/3nx15EyTWG3y/vR04ZZn7u+ImfJMMwTsui
9IoSvpbxMIn91LXKsBgGbjkMIr8M/FGYlKNR6PpJmHlxOEyLxMujLMjKPAcw
fuwlXjRMktQpM6fMQzcMI6fIQ2tU+H6Z5F6UZL6XOF6QhcnQDfzu+H98+FDR
JrvQ4bPZUxLenu3vmylMVZKSLJKXu2Oq0TYr44Z29JrcvNzfnawmDLYIoks6
/7y87zj3f2x8/7G9ydsm3j072F9OkXv2crsUDMbZMe+GPVseZ0CI7v7l/TKJ
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
+aBk5UapxUTqBlnl/wPeSeoXGNICAA==

-->

</rfc>

