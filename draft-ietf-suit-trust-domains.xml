<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-00" category="std">

  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="24"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
enables delegation of different rights to mutually distrustful entities
for use with different purposes or components in the context of firmware
update.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying firmware updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term trust anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software components from multiple software signing authorities.</t>
  <t>a mechanism to remove an uneeded component</t>
  <t>single-object dependencies</t>
  <t>a partly encrypted manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All dependency manifests should be present before any payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All dependencies must be validated prior to loading.</t>
</list></t>

<t>Two steps are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t><strong>Verify delegation chains</strong></t>
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t><strong>Resolve dependencies.</strong></t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>In addition, when multiple manifests are used for an update, each manifest's steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accomodate the additional metadata needed to enable these features, the envelope and manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation chains and Integrated Dependencies
The Common metadata section in the Manifest also gains a list of dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation"><name>Delegation Chains</name>

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Sectino 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info"><name>Delegation Chains</name>

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A dependency is another SUIT_Envelope that describes additional components.</t>

<t>Dependency manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios, for example:</t>

<t><list style="symbols">
  <t>An IoT device may contain a processor in its radio in addition to the primary processor. These two processors may have separate firmware with separate signing authorities. Dependencies allow the firmware for the primary processor to reference a manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of update payloads. The network operator overrides the URI of payload by providing a dependent manifest that references the original manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new firmware version before releasing it. The configuration is delivered as a binary in the same way as a firmware image. The device operator references the firmware manifest from the firmware author in their own manifest which also defines the configuration.</t>
</list></t>

<t>By using dependencies, components such as software, configuration, models, and other resources authenticated by different trust anchors can be delivered to devices.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling dependencies. By default, any signature of a dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different components/commands/parameters), it MAY choose to skip signature verification of dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all components specified in a dependency, then that dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Components that should be treated as dependency manifests are identified in the suit-common metadata. See section <xref target="structure-change"/> for details.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>
With the addition of dependencies, some changes are necessary to the abstract machine, outside the typical scope of added commands. These changes alter the behaviour of an existing command and way that the parser processes manifests:</t>

<t><list style="symbols">
  <t>Two new commands are introduced.  <list style="symbols">
      <t>Process dependency.</t>
      <t>Is Dependency.</t>
    </list></t>
  <t>Dependency manifests are also components. All commands may target dependency manifests as well as components, with one exception: process dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lock-step with the Root Manifest. This means that every dependency's current command sequence must be executed before a dependent's later command sequence may be executed. For example, every dependency's Dependency Resolution step MUST be executed before any dependent's payload fetch step.</t>
  <t>When performing a suit-condition-image-match operation on a component, the manifest processor MUST first determine whether or not the component is a dependency manifest. If identified as a dependency manifest envelope, the manifest processor MUST compute the digest over only the SUIT_Manifest bstr, not the complete SUIT_Manifest_Envelope. This is so that severable elements, added or removed signatures, and delegations do not affect the integrity measurements of the manifest.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies' sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Loads the specified component as a dependency manifest envelope.</t>
  <t>Authenticates the dependency manifest</t>
  <t>Executes the common-sequence section of the dependency manifest</t>
  <t>Executes the section of the dependency manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the commands needed to acquire and process the dependencies of the current manifest. Ideally, all dependency manifests should be fetched before any payload is fetched to ensure that all manifests are available and authenticated before any of the (larger) payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All commands are modified in that they can also target dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similarly to suit-directive-override-parameters, suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. Set Parameters is for use when dependencies are used because it allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This allows dependent manifests to change the behavior of a manifest, a dependency that wishes to enforce a specific value of a parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is "fetch payload," this will execute "common" in the current dependency, then "fetch payload" in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current component index does not have an entry in the suit-dependencies map, then this command MUST Abort.</t>

<t>If the current component is True, then this directive applies to all dependencies. If the current section is "common," then the command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether or not the current component index is present in the dependency list. If the current component is in the dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all dependencies or on all non-dependency components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>suit-directive-unlink applies to manifests. When the components defined by a manifest are no longer needed, the manifest processor unlinks the manifest to inform the manifest processor that they are no longer needed. The unlink command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given manifest more than once, and the manifest processor must enforce this. The manifest processor MAY choose to ignore a Unlink directive depending on device policy.</t>

<t>When the reference counter reaches zero, the suit-uninstall command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in manifest processors.</t>

</section>
</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>Because some operations treat dependency manifests differently from other components, it is necessary to identify them. SUIT_Dependencies identifies which components from suit-components (See Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as dependency manifest envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a component prefix or other metadata may be delivered with the component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The components specified by SUIT_Dependency will contain a Manifest Envelope that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional components, it may be that there is a need to uninstall the components that have been installed by a manifest. Where this is expected, the uninstall command sequence can provide the sequence needed to cleanly remove the components defined by the manifest and its dependencies. In general, suit uninstall will contain primarily unlink directives.</t>

<t>WARNING: This can cause faults where there are loose dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a component can be removed while it is depended upon by another component. To avoid dependency faults, a manifest author MAY use explicit dependencies where possible, or a manifest processor MAY track references to loose dependencies via reference counting in the same way as explicit dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The Uninstall command sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/> of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any dependency is declared, the dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests"><name>Composite Manifests</name>

<t>An implementer MAY choose to place a dependency's envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST be a text string. The URI for the dependency MUST match the text string key of the dependent's envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a dependency manifest that is removed from the envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/></t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-manifest. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all dependency manifests, the following commands are added to the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Fetch</t>
          <t>Condition Image Match</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The image fetch sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no commands, succeeds immediately)
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some components are "installed" or "loaded" it is more productive to use lists of component indices rather than Component Index = True. For example, to install several components, the following commands should be placed in the image install sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument containing list of destination component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index directive, with argument containing list dependency component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-command-sequences"><name>SUIT Command Sequences</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Resolution</c>
      <c>&#160;</c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>7</c>
      <c>Is Dependency</c>
      <c>suit-directive-is-dependency</c>
      <c><xref target="suit-directive-is-dependency"/></c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
      <c>&#160;</c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='RFC8392' target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference anchor='RFC8747' target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='L. Seitz' initials='L.' surname='Seitz'><organization/></author>
<author fullname='G. Selander' initials='G.' surname='Selander'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='March' year='2020'/>
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='7' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-20'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-20.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-update-management-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   establishment is provided by hybrid public-key encryption (HPKE) and
   AES Key Wrap (AES-KW).  HPKE uses public key cryptography while AES-
   KW uses a pre-shared key-encryption key.  Encryption of the plaintext
   is accomplished with conventional symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-09'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-09.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-18'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-18.txt' type='TXT'/>
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= SUIT_Integrated_Dependency

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

SUIT_Integrated_Dependency = (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)
suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution => \
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-delegation = 1
suit-dependency-resolution = 7
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-is-dependency            = 7
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
H4sIAMbHVmMAA+09a3Pb2HXf+Stu7c5EWpO05XWyttJNK1vaRFM/tpbcbZrN
eEDgkkIEAiwASmZk5bf0t/SX9TzvAwBJJ01mkml2JhOZwL333HPP+3ExmUxG
bd4W9thcfDi/NG+SMp/bpjVnn1pbNnlVNmZe1ebNumjzVWHNZb2Gp6fVMsnL
ZpTMZrW9kbHxo6xKy2QJ82Z1Mm8nuW3nk2adt5MWX5tk/NrkyZNRmrR2UdWb
Y9O02WiUr+pjQy89ffLkxZOno6S2CSxh03Wdt5vRbVVfL+pqveJlR9d2Az9l
x+a8bG1d2nZyiiuORk2blNnHpKhKgGJjm9EqPx4ZU89TmzXtppBfjWmrNPgz
LzNbtvpDU9VtbeeN+/dmGf2zrfPUvZxWyyWMdU/zsshLv4z91E6KHDYPk8yq
Al6bVF89gieAq2WyWuXlIoDjY2FvLL70bDRK1u1VVQP0E3iG/wHqjs3LqXlT
1UkpvzG6X9a2zJIyelLVCzjX3yctnOexOamX5nW+zFubyXMLZ1EcmxkPnS5x
6BRP7F8W+GQK+xp11v7XqblMrpNNskyi5f/Vlt0H8eoXZ6/evTGv3k3H5vXl
6TSG4NqW01ZG9wAoq3oJk9xYPMX33736+sXzn8mf3zx9+lz+fP71i6f65zfP
vpE/Xzw5eqF/Hj19hn+eT06nniqXQvjHQIDlPFwpfm+9yoBc8fVkYfGw+6/M
83p5C0Q7sWVab1a07fCl1trVJKnTKziBtF3XsMpoMpmYZAbUlKRAuZdXeWOa
lU3zeZ4S3kxmm7TOZ7Yx1nNmW5n2yjL36QYMA28OEuBBOwf6y+DEzN3d8H7v
7w+JwdeNxdcyuyqqDRGxuc3bq9FSGZ840gjbTs0JvHqTp9ZcJY0BgoEXroDq
gNeiN83tFRBE3o5smcwKgD6zhV3wlqq5yfL53ALVtabOF1ct7Wi5btdJUWzg
YUNTzdeFgVfyNgfWUFgRuGD4al2vqgbmh8dALCuAA7cAACCC0qpE5sMV9XBG
fJBTRv0yz7LCjkYPDUqRusrWKYI4Gp3SJhvcXGsWlZnZTVVmpgFWLeykyRel
BXhoKlPb/1rngAjCBgJR2E+mXuOuEWpGLQx0MMhAwOZ38Nx+SnDIWBALWE02
OidQyFcGBNkCiAe4lzGclCkIBT4nk5ilTeEE8maJSBQ062HALw28C3/gcJCY
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
px87nPjoxZbWrP5/35qvv+ZPrf4vxXddQjCPAAA=

-->

</rfc>

