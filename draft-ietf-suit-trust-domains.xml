<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-02" category="std">

  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="March" day="13"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
enables delegation of different rights to mutually distrusting entities
for use for different purposes or components in the context of firmware
or software update.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Devices that go beyond single-signer update require more complex rules for deploying software updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term trust anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software components from multiple software signing authorities.</t>
  <t>a mechanism to remove an unneeded component</t>
  <t>single-object dependencies</t>
  <t>a partly encrypted manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Software for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about one or more Components for a device, where to
find them, and the devices to which they apply.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient's storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically Firmware/Software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All dependency manifests must be present before any payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All dependencies must be validated prior to loading.</t>
</list></t>

<t>Two steps are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t><strong>Verify delegation chains</strong></t>
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t><strong>Resolve dependencies.</strong></t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>In addition, when multiple manifests are used for an update, each manifest's steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview"><name>Changes to Manifest Metadata Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the envelope and manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation chains and Integrated Dependencies
The Common metadata section in the Manifest also gains a list of dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| CoSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependency Indices      |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation"><name>Delegation Chains</name>

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Sectino 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info"><name>Delegation Chains</name>

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies"><name>Dependencies</name>

<t>A dependency is another SUIT_Envelope that describes additional components.</t>

<t>Dependency manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios, for example:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors may have separate firmware with separate signing authorities. Dependencies allow the firmware for the primary processor to reference a manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of update payloads. The network operator overrides the URI of a payload by providing a dependent manifest that references the original manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new firmware version before releasing it. The configuration is delivered as a binary in the same way as a firmware image. The device operator references the firmware manifest from the firmware author in their own manifest which also defines the configuration.</t>
</list></t>

<t>By using dependencies, components such as Software, configuration, models, and other resources authenticated by different trust anchors can be delivered to devices.</t>

<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling dependencies. By default, any signature of a dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different components/commands/parameters), it MAY choose to skip signature verification of dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all components specified in a dependency, then that dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Components that should be treated as dependency manifests are identified in the suit-common metadata. See section <xref target="structure-change"/> for details.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the root manifest should be stored; this is particularly complex when a system has multiple, independent root manifests. The manifest component ID resolves this contention. The manifest-component-id is intended to be used by the root manifest. When a dependency manifest also declares a component ID, the dependency manifest's component ID is overridden by the component ID declared by the dependent.</t>

<t>The following CDDL describes the manifest component ID:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of component indices that indicate a dependency manifest. The key of the map are the component indices and the values of the map are any extra metadata needed to describe those dependency manifests.</t>

<t>Because some operations treat dependency manifests differently from other components, it is necessary to identify them. SUIT_Dependencies identifies which components from suit-components (See Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as dependency manifest envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a component prefix or other metadata may be delivered with the component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The components specified by SUIT_Dependency will contain a Manifest Envelope that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of dependencies, some changes are necessary to the abstract machine, outside the typical scope of added commands. These changes alter the behaviour of an existing command and way that the parser processes manifests:</t>

<t><list style="symbols">
  <t>Three new commands are introduced.  <list style="symbols">
      <t>Process dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
    </list></t>
  <t>Dependency manifests are also Components. All commands may target dependency manifests as well as Components, with one exception: process dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lock-step with the Root Manifest. This means that every dependency's current command sequence must be executed before a dependent's later command sequence may be executed. For example, every dependency's Dependency Resolution step MUST be executed before any dependent's payload fetch step.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies' sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the dependency has been the target of a dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified component as a dependency manifest envelope.</t>
  <t>Authenticates the dependency manifest.</t>
  <t>Executes the common-sequence section of the dependency manifest.</t>
  <t>Executes the section of the dependency manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

<section anchor="hierarchical-interpreters"><name>Multiple Manifest Processors</name>

<t>When a system has multiple trust domains, each domain might require independent verification of authenticity or security policies. Trust domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Trust domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more trust domains, a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across trust domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the commands needed to acquire and process the dependencies of the current manifest. Ideally, all dependency manifests should be fetched before any payload is fetched to ensure that all manifests are available and authenticated before any of the (larger) payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All commands are modified in that they can also target dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similarly to suit-directive-override-parameters, suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. Set Parameters is for use when dependencies are used because it allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This allows dependent manifests to change the behavior of a manifest, a dependency that wishes to enforce a specific value of a parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is "fetch payload," this will execute "common" in the current dependency, then "fetch payload" in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current component index does not have an entry in the suit-dependencies map, then this command MUST Abort.</t>

<t>If the current component index has not been the target of a suit-condition-dependency-integrity, then this command MUST Abort.</t>

<t>If the current component is True, then this directive applies to all dependencies. If the current section is "common," then the command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether or not the current component index is present in the dependency list. If the current component is in the dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all dependencies or on all non-dependency components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a dependency manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers">
  <t>Evaluate any delegation chains</t>
  <t>Verify the signature of the manifest hash</t>
  <t>Compare the manifest hash to the provided hash</t>
  <t>Verify the manifest against the manifest hash</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current manifest. The Manifest Processor MUST NOT use cached results from any other manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>suit-directive-unlink applies to manifests. When the components defined by a manifest are no longer needed, the manifest processor unlinks the manifest to inform the manifest processor that they are no longer needed. The unlink command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given manifest more than once, and the manifest processor must enforce this. The manifest processor MAY choose to ignore a Unlink directive depending on device policy.</t>

<t>When the reference counter reaches zero, the suit-uninstall command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in manifest processors.</t>

</section>
</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional components, it may be that there is a need to uninstall the components that have been installed by a manifest. Where this is expected, the uninstall command sequence can provide the sequence needed to cleanly remove the components defined by the manifest and its dependencies. In general, suit uninstall will contain primarily unlink directives.</t>

<t>WARNING: This can cause faults where there are loose dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a component can be removed while it is depended upon by another component. To avoid dependency faults, a manifest author MAY use explicit dependencies where possible, or a manifest processor MAY track references to loose dependencies via reference counting in the same way as explicit dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The Uninstall command sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any dependency is declared, the dependent MUST populate all command sequences for the current procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests"><name>Composite Manifests</name>

<t>An implementer MAY choose to place a dependency's envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST be a text string. The URI for the dependency MUST match the text string key of the dependent's envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a dependency manifest that is removed from the envelope can still be fetched.</t>

</section>
</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the dependency's suit-authentication-block (See Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-manifest. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all dependency manifests, the following commands are added to the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The image fetch sequence contains the following commands:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some components are "installed" or "loaded" it is more productive to use lists of component indices rather than Component Index = True. For example, to install several components, the following commands should be placed in the image install sequence:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
    </list></t>
  <t>Set Component Index directive, with argument containing list of destination component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index directive, with argument containing list dependency component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-command-sequences"><name>SUIT Command Sequences</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Delegation</c>
      <c><xref target="ovr-delegation"/></c>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering software updates to devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='RFC8392' target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference anchor='RFC8747' target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='L. Seitz' initials='L.' surname='Seitz'><organization/></author>
<author fullname='G. Selander' initials='G.' surname='Selander'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='March' year='2020'/>
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest' target='https://datatracker.ietf.org/doc/html/draft-ietf-suit-manifest-22'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-update-management' target='https://datatracker.ietf.org/doc/html/draft-ietf-suit-update-management-01'>
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to IoT
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-update-management-01'/>
   
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption' target='https://datatracker.ietf.org/doc/html/draft-ietf-suit-firmware-encryption-11'>
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='David Brown' initials='D.' surname='Brown'>
         <organization>Linaro</organization>
      </author>
      <author fullname='Ken Takayama' initials='K.' surname='Takayama'>
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day='13' month='March' year='2023'/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware
   and personalization data by utilizing the IETF SUIT manifest.  Key
   agreement is provided by ephemeral-static (ES) Diffie-Hellman (DH)
   and AES Key Wrap (AES-KW).  ES-DH uses public key cryptography while
   AES-KW uses a pre-shared key-encryption key.  Encryption of the
   plaintext is accomplished with conventional symmetric key
   cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-11'/>
   
</reference>


<reference anchor='I-D.ietf-teep-architecture' target='https://datatracker.ietf.org/doc/html/draft-ietf-teep-architecture-19'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei' initials='M.' surname='Pei'>
         <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler' initials='D.' surname='Thaler'>
         <organization>Microsoft</organization>
      </author>
      <author fullname='Dave Wheeler' initials='D. M.' surname='Wheeler'>
         <organization>Amazon</organization>
      </author>
      <date day='24' month='October' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-19'/>
   
</reference>




    </references>


<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>


  </back>

<!-- ##markdown-source:
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
/16Z777jN5r/B3aEEHqFlgAA

-->

</rfc>

