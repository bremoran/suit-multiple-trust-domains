<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-moran-suit-manifest-02" category="info">

  <front>
    <title abbrev="Firmware Manifest Format">SUIT CBOR manifest serialisation format</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>ARM Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>

    <date year="2018" month="October" day="18"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available, such as the Lightweight Machine-to-Machine (LwM2M) protocol offering device management of IoT devices. Equally important is the inclusion of meta-data about the conveyed firmware image (in the form of a manifest) and the use of end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. This authorization process is ensured by the use of dedicated symmetric or asymmetric keys installed on the IoT device: for use cases where only integrity protection is required it is sufficient to install a trust anchor on the IoT device. For confidentiality protected firmware images it is additionally required to install either one or multiple symmetric or asymmetric keys on the IoT device. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted respositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="Architecture"/>. This document is structured as follows: In <xref target="the-suit-manifest"/> we describe the main building blocks of the manifest and <xref target="manifest-structure"/> contains the description of the CBOR of the manifest.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

<t><list style="symbols">
  <t>SUIT: Sofware Update for the Internet of Things, the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Processor: A component that transforms one or more Resources into another resource or into a payload.</t>
  <t>Manifest: A piece of information that describes one or more payloads, one or more resources, and the processors needed to transform resources into payloads.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by recipient devices.</t>
</list></t>

</section>
<section anchor="cose-digest-container" title="COSE digest container">
<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest is identical to a COSE_Mac0 structure, so no new container is defined.</t>

<t><spanx style="verb">CDDL
COSE_Digest_Tagged = #6.19(COSE_Digest)   ; 19 is a placeholder. Value TBD
COSE_Digest = COSE_Mac0
</spanx></t>

<section anchor="how-to-compute-and-verify-a-digest" title="How to compute and verify a Digest">
<t>In order to get a consistent encoding of the data to be digested, the Digest_structure is used to have a canonical form. The Digest_structure is a CBOR array.  The fields of the Digest_structure in order are:</t>

<t><list style="numbers">
  <t>A text string that identifies the structure that is being encoded. This string is “Digest”.</t>
  <t>The protected attributes from the COSE_Digest structure. If there are no protected attributes, a zero-length bstr is used.</t>
  <t>The protected attributes from the application encoded as a bstr type.  If this field is not supplied, it defaults to a zero-length binary string.  (See RFC 8152 <xref target="RFC8152"/>, Section 4.3 for application UUIDance on constructing this field.)</t>
  <t>The payload to be digested encoded in a bstr type.  The payload is placed here independent of how it is transported.</t>
</list></t>

<t>The CDDL fragment that corresponds to the above text is:</t>

<t><spanx style="verb">CDDL
Digest_structure = [
    context : "Digest",
    protected : empty_or_serialized_map,
    external_aad : bstr,
    payload : bstr
]
</spanx></t>

<t>The steps to compute a Digest are:</t>

<t><list style="numbers">
  <t>Create a Digest_structure and populate it with the appropriate fields.</t>
  <t>Create the value ToBeDigested by encoding the Digest_structure to a byte stream, using the encoding described in RFC 8152 <xref target="RFC8152"/>, Section 14.</t>
  <t>Call the Digest creation algorithm passing in alg (the algorithm to Digest with), and ToBeDigested (the value to compute the digest on).</t>
  <t>Place the resulting Digest in the ‘tag’ field of the COSE_Digest structure.</t>
</list></t>

<t>The steps to verify a Digest are:</t>

<t><list style="numbers">
  <t>Create a Digest_structure object and populate it with the appropriate fields.</t>
  <t>Create the value ToBeDigested by encoding the Digest_structure to a byte stream, using the encoding described in RFC 8152 <xref target="RFC8152"/>, Section 14.</t>
  <t>Call the digest creation algorithm passing in alg (the algorithm to digest with), and ToBeDigested (the value to compute the Digest on).</t>
  <t>Compare the digest value to the ‘tag’ field of the COSE_Digest structure.</t>
</list></t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Value</ttcol>
      <c>SHA-224</c>
      <c>40</c>
      <c>SHA-256</c>
      <c>41</c>
      <c>SHA-384</c>
      <c>42</c>
      <c>SHA-512</c>
      <c>43</c>
      <c>SHA3-224</c>
      <c>44</c>
      <c>SHA3-256</c>
      <c>45</c>
      <c>SHA3-384</c>
      <c>46</c>
      <c>SHA3-512</c>
      <c>47</c>
</texttable>

<t>N.B. Values are provisional, pending review.</t>

</section>
</section>
<section anchor="distributing-firmware" title="Distributing Firmware">
<t>Distributing firmware in a multi-party environment is a difficult operation. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authority. This topic is covered in more depth in <xref target="Architecture"/></t>

</section>
<section anchor="workflow-of-a-device-applying-a-firmware-update" title="Workflow of a device applying a firmware update">
<t>The manifest is designed to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a device installing a manifest is as follows:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest</t>
  <t>Verify the applicability of the manifest (verify PreConditions)</t>
  <t>Verify that all installation processors are available</t>
  <t>Verify that all dependencies are met</t>
  <t>Run PreInstalation Directives</t>
  <t>Load the descriptor for the next payload to be installed</t>
  <t>Load installation descriptor for the next payload to be installed</t>
  <t>Install the payload</t>
  <t>While there are more payloads to install, go to 5.</t>
  <t>Validate PostInstallation Conditions</t>
  <t>Run PostInstallation Directives</t>
</list></t>

<t>When multiple manifests are used for an update, the pull parser is not possible to orchestrate in the same manner.</t>

</section>
<section anchor="the-suit-manifest" title="The SUIT Manifest">
<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle. The manifest allows:</t>

<t><list style="numbers">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>To verify authenticity at boot time, only the smallest portion of the manifest is required. This core part of the manifest describes only the fully installed firmware and any of its dependencies.</t>

<section anchor="severable-elements" title="Severable Elements">
<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed without affecting later stages of the lifecycle. This is called “Severing.” Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring authenticity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a COSE_Digest of the bstr in the manifest so that they can still be authenticated. The COSE_Digest typically consumes 10 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 10 SHOULD never be severable. Elements larger than (Digest Bits)/8 + 10 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 10 SHOULD be severable.</t>

</section>
<section anchor="conventions" title="Conventions">
<t>The map indices in this encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>CDDL names are lowerCamelCase and CDDL structures are UpperCamelCase so that these names can be directly transcribed into most common programming languages, whereas hyphens require translation and CDDL prefers hyphens to underscores.</t>

</section>
<section anchor="payloads" title="Payloads">
<t>Payloads can take many forms, for example, binary, hex, s-record, elf, binary diff, PEM certificate, CBOR Web Token, serialised configuration. These payloads fall into two broad categories: those that require installation-time processing and those that do not. Binary, PEM certificate, and CBOR Web Token do not require installation-time processing. Hex, s-record, elf, and serialised configuration require installation-time processing. Binary diff is a special case that can be handled either in a pre-processing step or in an installation-time step, depending on the architectural requirements of the application.</t>

<t>Some payloads cannot be directly converted to a writable binary stream. Hex, s-record, and elf may contain gaps and they have no guarantee of monotonic increase of address, which makes pre-processing them into a binary stream difficult on constrained platforms. Serialised configuration may be unpacked into a configuration database, which makes it impossible to preprocess into a binary stream, suitable for direct writing.</t>

<t>This presents two problems for the manifest: first, it must indicate that a specialised installer is needed and, second, it cannot provide a hash of the payload that is checkable after installation. These two problems are resolved in the payloadInstaller and payloadInfo sections, respectively.</t>

<t>Where a specialised installer is needed, a digest is not always calculable over an installed payload. For example, an elf, s-record or hex file may contain gaps that can contain any data, while not changing whether or not an installed payload is valid. Serialised configuration may update only some device data rather than all of it. This means that the digest cannot always be calculated over an installed payload when a specialised installer is used.</t>

</section>
</section>
<section anchor="manifest-structure" title="Manifest Structure">
<t>The manifest is divided into several sections in a hierarchy as follows:</t>

<t><list style="numbers">
  <t>The outer wrapper
  <list style="numbers">
      <t>The authentication wrapper</t>
      <t>The manifest
      <list style="numbers">
          <t>Critical Information</t>
          <t>Pre-installation Information /  Reference</t>
          <t>Payloads</t>
          <t>Installation Information / Reference</t>
          <t>Post-installation Information / Reference</t>
          <t>Text / Reference</t>
          <t>COSWID / Reference</t>
        </list></t>
      <t>Pre-installation Information</t>
      <t>Installation Information</t>
      <t>Post-installation Information</t>
      <t>Text</t>
    </list></t>
</list></t>

<section anchor="outer-wrapper" title="Outer wrapper">
<t>This container is just a holder for the other pieces of the manifest. The CDDL that describes the wrapper is below:</t>

<t>```CDDL
OuterWrapper = {
    authenticationWrapper: AuthenticationWrapper,
    manifest:              bstr .cbor Manifest,
    ? preInstallExt:       bstr .cbor PreInstallationInfo,
    ? installExt:          bstr .cbor InstallationInfo,
    ? postInstallExt:      bstr .cbor PostInstallationInfo,
    ? textInfoExt:         bstr .cbor Text,
    ? coswidExt:           bstr .cbor concise-software-identity
}
authenticationWrapper = 1
manifest = 2
preInstallExt = 3
installExt = 4
postInstallExt = 5
textExt = 6
coswidExt = 7</t>

<t>AuthenticationWrapper = COSE_Mac_Tagged / COSE_Sign_Tagged / COSE_Mac0_Tagged / COSE_Sign1_Tagged
```</t>

<t>The authenticationWrapper contains a cryptographic authentication wrapper for the core part of the manifest. This is implemented as a COSE_Mac_Tagged or COSE_Sign_Tagged block. The Manifest is authenticated by this block in “detached payload” mode. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/> and are beyond the scope of this document. The AuthenticationWrapper MUST come first in the OuterWrapper, regardless of canonical encoding of CBOR. All validators MUST reject any OuterWrapper that begins with any element other than an AuthenticationWrapper.</t>

<t>Every other element must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialisation for integrity and authenticity checks.</t>

<t>manifest contains a Manifest structure, which describes the payload(s) to be installed and any dependencies on other manifests.</t>

<t>PreInstallationInfo provides all the information that a device needs in order to decide whether and when to install an update</t>

<t>InstallationInfo provides all the information that a device needs in order to process one or more resources into one or more payloads.</t>

<t>PostInstallationInfo provides the information that a device needs to verify that a payload has been installed correctly, any instructions for what to do after the payload has been installed, for example migration tools.</t>

<t>Text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s).</t>

</section>
<section anchor="manifest" title="Manifest">
<t>The manifest describes the critical metadata for the referenced payload(s). In addition, it contains:</t>

<t><list style="numbers">
  <t>a version number for the manifest structure itself</t>
  <t>a sequence number</t>
  <t>a list of dependencies</t>
  <t>a list of payloads</t>
  <t>a reference for each of the severable blocks.</t>
</list></t>

<t>The following CDDL fragment defines the manifest.</t>

<t>```CDDL
Manifest = {
    manifestVersion : 1,
    sequence        : SequenceNumber,
    ? preInstall    : PreInstallationInfo / COSE_Digest,
    ? dependencies  : [* DependencyInfo],
    ? payloads      : [* PayloadInfo],
    ? install       : InstallationInfo / COSE_Digest,
    ? postInstall   : PostInstallationInfo / COSE_Digest,
    ? text          : TextInfo / COSE_Digest,
    ? coswid        : concise-software-identity / COSE_Digest
}</t>

<t>manifestVersion = 1
sequence        = 2
preInstall      = 3
dependencies    = 4
payloads        = 5
install         = 6
postInstall     = 7
text            = 8
coswid          = 9</t>

<t>SequenceNumber = uint</t>

<t>```</t>

<t>Several fields in the Manifest can be either a CBOR structure or a COSE_Digest. In each of these cases, the COSE_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, text SHOULD be severable, since most useful text elements occupy more space than a COSE_Digest, but are not needed by recipient devices. Because COSE_Digest is a CBOR Array and each severable element is a CBOR Map, it is straight-forward for a recipient to determine whether an element has been severed.</t>

<t>The manifestVersion indicates the version of serialisation used to encode the manifest. Version 1 is the version described in this document. manifestVersion is MANDATORY.</t>

<t>The sequence number is an anti-rollback counter. It also helps devices to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. SequenceNumber is MANDATORY.</t>

<t>preInstall is a digest that uniquely identifies the content of the PreInstallationInfo that is packaged in the OuterWrapper. preInstall is OPTIONAL within a given Manifest. There MUST be one preInstall in at least one Manifest within an Update because PreInstallationInfo contains the conditions that define the applicability of the Update to specific hardware/firmware versions. preInstall MAY be severable.</t>

<t>dependencies is a list of DependencyInfo blocks that specify manifests that must be present before the current manifest can be processed. dependencies is OPTIONAL.</t>

<t>payloads is a list of PayloadInfo blocks that describe the payloads to be installed. payloads is OPTIONAL.</t>

<t>install is a digest that uniquely identifies the content of the InstallationInfo that is packaged in the OuterWrapper. install is OPTIONAL. install MAY</t>

<t>postInstall is a digest that uniquely identifies the content of the PostInstallationInfo that is packaged in the OuterWrapper. postInstall is OPTIONAL.</t>

<t>text is a digest that uniquely identifies the content of the Text that is packaged in the OuterWrapper. text is OPTIONAL.</t>

<t>coswid is a digest that uniquely identifies the content of the concise-software-identifier that is packaged in the OuterWrapper. coswid is OPTIONAL.</t>

</section>
<section anchor="dependencyinfo" title="DependencyInfo">
<t>DependencyInfo specifies a manifest that describes one or more dependencies of the current manifest.</t>

<t>The following CDDL describes the DependencyInfo structure.</t>

<t>```CDDL
DependencyInfo = {
    depDigest  : COSE_Digest,         ; digest of the resource
    depScope   : ComponentIdentifier, ; where the dependency’s payloads will be
                                      ; applied
    ? depUris  : UriList              ; where to find the resource
}
depDigest = 1
depScope  = 2
depUris   = 3</t>

<t>UriList = [ + [priority: int, uri: tstr] ]
ComponentIdentifier = [* bstr]
```</t>

<t>The depDigest specifies the dependency manifest uniquely by identifying a particular Manifest structure. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This means that a digest may need to be calculated more than once, however this is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing ‘body_protected’ and ‘body_signed’ elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The depUris element describes one or more indications of where to find the dependency. This element is OPTIONAL when the fetch location for a dependency is known implicitly.</t>

<t>The depScope element contains a ComponentIdentifier. This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent devices without those devices needing consistent component hierarchy. This element is MANDATORY.</t>

</section>
<section anchor="payloadinfo" title="PayloadInfo">
<t>Payload Info describes a payload that is ready for installation. When representing a payload that requires a specialised installer, the Update Authority can provide information to regenerate a digest.</t>

<t>The following CDDL describes the PayloadInfo structure.</t>

<t>```CDDL
PayloadInfo = {
    payloadComponent:       ComponentIdentifier,
    payloadSize:            uint / nil,
    payloadDigest:          COSE_Digest,
    ? regenInfo : {
        regenDigest:        COSE_Digest
        regenType:          int
        ? regenParameters:  bstr
    },
}
payloadComponent = 1
payloadSize      = 2
payloadDigest    = 3
regenInfo        = 4
regenDigest      = 5
regenType        = 6
regenParameters  = 7</t>

<t>RegenType = LocationLengthRegenType /
            FileListRegenType /
            KeyListRegenType /
            CustomRegenType</t>

<t>LocationLengthRegenType = 1
FileListRegenType       = 2
KeyListRegenType        = 3
CustomRegenType         = nint</t>

<t>RegenParameters = LocationLengthRegenParameters /
                  FileListRegenParameters /
                  KeyListRegenParameters /
                  CustomRegenParameters
LocationLengthRegenParameters = [ * [ location: uint, length: uint ] ]
FileListRegenParameters       = [ * file: tstr ]
KeyListRegenParameters        = [ * key: tstr ]
CustomRegenParameters         = bstr
```</t>

<t>The payloadComponent element contains a ComponentIdentifier. This specifies the module/component/location in which the payload should be installed. The meaning of ComponentIdentifier is application-specific. In general, the last bstr in the ComponentIdentifier defines where to store a payload within a given storage subsystem in a Heterogeneous Storage Architecture device, the remainder of the elements in the ComponentIdentifier define which storage subsystem to use to store the payload. payloadComponent is MANDATORY. When used on a single-image device payloadComponent MAY contain 0 elements. On multi-image devices, payloadComponent MUST contain at least one element.</t>

<t>payloadSize contains a positive integer that describes the size of the ready-to-install payload. Where the payload requires a specialised installer, this is the payload prior to installation. This element is MANDATORY.</t>

<t>payloadDigest contains a digest of the payload, prior to installation. For payloads that do not require a specialised installer, this is the also the post-installation digest. This element is MANDATORY.</t>

<t>regenInfo describes the mechanism for recreating a message digest of payload that requires a specialised installer. This element is OPTIONAL. This element is OPTIONAL TO IMPLEMENT.</t>

<t>regenDigest is a Digest that contains the message digest that an application should regenerate to verify the installed payload. This element is MANDATORY when regenInfo is present.</t>

<t>regenType is an int that identifies a particular mechanism for creating the regenDigest. This element is MANDATORY when regenInfo is present.</t>

<t>regenParameters is a bstr that provides any additional arguments needed by the specialised installer. This element is OPTIONAL.</t>

<t>When message digest regeneration is in place, regenType implies a regenParameters structure, as described in the following table:</t>

<texttable>
      <ttcol align='left'>regenType</ttcol>
      <ttcol align='left'>RegenParameters</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>-</c>
      <c>Reserved</c>
      <c>1</c>
      <c>[ * [ location: uint, length: uint] ]</c>
      <c>Lists a series of regions to include in the digest</c>
      <c>2</c>
      <c>[ * file: tstr ]</c>
      <c>Lists a series of files to digest</c>
      <c>3</c>
      <c>[ * key: tstr ]</c>
      <c>Lists a series of keys, whose values should be digested</c>
</texttable>

<t>Positive RegenType numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

</section>
<section anchor="preinstallationinfo" title="PreInstallationInfo">
<t>The recipient processes the PreInstallationInfo in order to determine whether the manifest is applicable to it. This check is only needed once, so the PreInstallationInfo is severable.</t>

<t>The following CDDL describes the PreInstallationInfo structure.</t>

<t><spanx style="verb">CDDL
PreInstallationInfo = {
    ? preConditions : [ * PreCondition ],
    ? preDirectives : [ * PreDirective ]
}
preConditions = 1
preDirectives = 2
</spanx></t>

<t>preConditions contains a list of 0 or more PreCondition structures.</t>

<t>preDirectives contains a list of 0 or more PreDirective structures.</t>

</section>
<section anchor="precondition" title="PreCondition">
<t>PreCondition structures describe conditions that must be true in order for a manifest to be installed. The target device MUST check these conditions before any installation is performed. The target device MAY check these conditions prior to fetching any dependency manifests.</t>

<t>All updates MUST contain either a device IdCondition or both a vendor IdCondition and a class IdCondition. This is to ensure that firmware is only ever delivered to compatible devices.</t>

<t>The following CDDL describes the PreCondition structure.</t>

<t>```CDDL
PreCondition    = IdCondition /
                  TimeCondition /
                  ImageCondition /
                  BatteryLevelCondition /
                  CustomCondition
IdCondition     = [ vendor : 1, id: Uuid ] /
                  [ class  : 2, id: Uuid ] /
                  [ device : 3, id: Uuid ]
Uuid = bstr .size 16</t>

<t>TimeCondition   = [useBy: 4,
                   time:       Timestamp]
ImageCondition  = [ currentContent :    6 ,<vspace />
                    digest: COSE_Digest / nil,
                    location: ComponentIdentifier ] /
                  [ notCurrentContent : 7 ,<vspace />
                    digest: COSE_Digest / nil,
                    location: ComponentIdentifier ]
BatteryLevelCondition = [ batteryLevel: 8,
                          level: uint ]
CustomCondition = [nint,
                   parameters: bstr]</t>

<t>Timestamp       = uint
```</t>

<t>All PreConditions are serialised as a list of one integer and one or more parameters. The type of the parameters is dictated by the value of the integer. An update that has contradictory preConditions MUST be rejected.</t>

<t>IdCondition describes three conditions: the vendor ID condition, the class ID condition, and the device ID condition. Each of these conditions present a RFC 4122 <xref target="RFC4122"/> UUID that MUST be matched by the installing device in order to consider the manifest valid.</t>

<t>A device MUST have at least one vendor ID and one class ID. A device MAY have one or more device IDs, more than one vendor ID, and/or more than one class ID.</t>

<t>TimeCondition describes one condition: the useBy condition, which can be used to specify the last time at which an update should be installed. The timestamp is encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size.</t>

<t>ImageCondition describes two conditions: the currentContent and the notCurrentContent conditions. Both of these conditions specify a storage identifier and a digest that the contents of that storage identifier should match.</t>

<t>BatteryLevelCondition provides a mechanism to test a device’s battery level before installing an update. This condition is for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, BatteryLevelDirective is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. BatteryLevelCondition is specified in mWh.</t>

<t>CustomCondition describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer, and a bstr that encodes the parameters passed to system that evaluates the condition matching that integer.</t>

<t>Positive Condition numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives. When a negative number is used, the parameters MUST be wrapped in a bstr.</t>

</section>
<section anchor="identifiers" title="Identifiers">
<t>Many conditions use identifiers to determine whether a manifest matches a given recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are explicitly NOT human-readable. They are for machine-based matching only.</t>

<t>A device may match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a device that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This device might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>A more complete example:
A device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<section anchor="creating-uuids" title="Creating UUIDs:">
<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number</t>
  <t>Hardware revision</t>
  <t>Bootloader version (for immutable bootloaders)</t>
</list></t>

</section>
</section>
<section anchor="predirective" title="PreDirective">
<t>PreDirective structures describe operations that a device MUST execute prior to installing an update. For example, shut down monitored equipment, enter safe mode, sync cached files to disk, wait for another device to be updated, or wait until a specific time. Some PreDirectives may appear similar to PreConditions, however there is one difference: a PreCondition is evaluated at one time. A PreDirective can include a “wait” instruction, that means that the evaluation of the manifest does not immediately fail if the condition in the PreDirective is not met. Instead, the PreDirective remains active, waiting for its condition to be met.</t>

<t>For example, suppose two devices, A and B. Device B has an “other device firmware version” condition, requiring Device A to be at Rev 2. If both devices are updated from Rev 1 to Rev 2 simultaneously, then Device B may fail the PreCondition check if Device A has not finished its installation. If a PreDirective is used instead, then it can be a “wait for other device firmware version” directive. Then, Device B will postpone its update until Device A has finished updating.</t>

<t>The following CDDL describes the PreDirective structure.</t>

<t>```CDDL
PreDirective = WaitUntilDirective /
               DayOfWeekDirective /
               TimeOfDayDirective /
               BatteryLevelDirective /
               ExternalPowerDirective /
               CustomDirective</t>

<t>WaitUntilDirective     = [ 1,
                           timestamp: uint ]
DayOfWeekDirective     = [ 2, day: 0..6 ]
TimeOfDayDirective     = [ 3, hours: 0..23,
                              ? minutes: 0..59,
                              ? seconds: 0..59 ]
BatteryLevelDirective  = [ 4, level: uint]
ExternalPowerDirective = [ 5 ]
NetworkDisconnectDirective = [ 6 ]
CustomDirective        = [ nint,
                           ? parameters: bstr ]
```</t>

<t>WaitUntilDirective instructs the target device to wait until a specific time to install the update. The timestamp is encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size.</t>

<t>DayOfWeekDirective instructs the target device to wait until a specific day of the week to install the update. The day is encoded as days since Sunday, with Sunday being day 0 and Saturday being day 6.</t>

<t>TimeOfDayDirective instructs the target device to wait until a specific time each day to install the update. When combined with DayOfWeekDirective, this can specify a particular time on a particular day of the week to install an update. Leap seconds are not allowed in the TimeOfDayDirective.</t>

<t>BatteryLevelDirective defines a directive to wait until the battery is above the specified value. This is for use in rechargeable battery and energy harvesting devices because it instructs the device to wait for a minimum charge. BatteryLevelCondition should be used in discharge-only devices. BatteryLevelDirective is specified in mWh. Battery Levels MUST be evaluated in 16 bits or more. 32 bit evaluation MUST be used for high battery capacity devices (over 65535 mWh capacity)</t>

<t>ExternalPowerDirective defines a directive to the device to wait until it is connected to an external power source before installing the update.</t>

<t>NetworkDisconnectDirective defines a directive to the device to disconnect from the network before installing the update.</t>

<t>Positive Directive numbers are reserved for IANA registration. Negative numbers are reserved for proprietary, application-specific directives.</t>

</section>
<section anchor="installationinfo" title="InstallationInfo">
<t>InstallationInfo contains the information that a device needs in order to install a payload. As described in [Payloads], some payloads require specialised installers. Where a specialised installer is needed, the InstallationInfo block must represent this requirement.</t>

<t>InstallationInfo is described by the following CDDL.</t>

<t><spanx style="verb">CDDL
InstallationInfo = {
    payloadInstallationInfo : [ * PayloadInstallationInfo ],
}
payloadInstallationInfo = 1
</spanx></t>

<t>installationInfo contains a list of 0 or more PayloadInstallationInfo blocks. PayloadInstallationInfo is described by the following CDDL</t>

<t>```CDDL
PayloadInstallationInfo = {
    installComponent :          ComponentIdentifier
    payloadProcessors :         [ * Processor ],
    ? allowOverride :    bool,
    ? payloadInstaller:  {
        payloadInstallerID:           [ * int ],
        ? payloadInstallerParameters: bstr,
    }
}
installComponent = 1
payloadProcessors = 2
allowOverride = 3
payloadInstaller = 4
payloadInstallerID = 5
payloadInstallerParameters = 6</t>

<t>```</t>

<t>installComponent defines the component identifier of the component to update. This includes both the storage subsystem designator and the path within the storage subsystem as the final element of the component identifier. This element is MANDATORY.</t>

<t>payloadProcessors defines where to obtain a resource and how to transform it into a payload. This element is MANDATORY. Processors MUST be instantiated in a parent-last order.</t>

<t>The payloadInstaller contains a map of elements that are only needed when a specialised payload installer is used. This element is OPTIONAL TO IMPLEMENT.</t>

<t>payloadInstallerID contains an integer that defines which payload installer will be used. Positive integers are reserved for IANA registration. Negative integers are reserved for application-specific payload installers. Default payload installers are listed below. This element is MANDATORY when payloadInstaller is defined.</t>

<texttable>
      <ttcol align='left'>payloadInstallerID</ttcol>
      <ttcol align='left'>Definition</ttcol>
      <c>[ 0 ]</c>
      <c>Binary</c>
      <c>[ 5, 2 ]</c>
      <c>Intel Hex</c>
      <c>[ 5, 3 ]</c>
      <c>Motorola S-Record</c>
      <c>[ 6, 1 ]</c>
      <c>ELF</c>
      <c>[ 7, 1 ]</c>
      <c>CBOR-encoded data</c>
</texttable>

<t>Note that specialised installer 0 (binary) is typically not necessary and SHOULD ONLY be used when one of the other members of the payloadInstaller structure is required for a particular application.</t>

<t>These IDs are chosen to match those chosen for ProcessorIDs.</t>

<t>payloadInstallerParameters contains a bstr that provides any additional arguments needed by the specialised installer. This element is OPTIONAL.</t>

</section>
<section anchor="processor" title="Processor">
<t>Processors define one operation performed in order to modify a Resource in one step towards reconstructing the payload.</t>

<t>All Processors are OPTIONAL to implement.</t>

<t><spanx style="verb">CDDL
Processor       = {
    processorId:       ProcessorID
    parameters:        Digest / COSE_Encrypt / COSE_Encrypt0 / int / tstr / bstr / nil,
    inputs:            UriList / ComponentIdentifier / ProcessorDependencies
}
ProcessorID = [ * int ]
ProcessorDependencies = {int =&gt; int}
</spanx></t>

<t>The form of parameters and inputs depends on the processorId.</t>

<t>ProcessorDependencies is an interger-indexed map of integers. Each processor defines its inputs as integers–these are the indicies of the map. The inputs to the processor are other processors, identified by index in the Processors list. Processors that use the ProcessorDependencies input form MUST have an index in the Processors list greater than any index listed in ProcessorDependencies. The last processor listed in Processors is the processor that generates the payload to be installed in the ComponentIdentifier in PayloadInstallationInfo.</t>

<t>processorID contains a list of ints. This is conceptually similar to an OID, however, unlike an OID, this list is context-sensitive, encoded as a CBOR list, and supports negative numbers. The reasons for these distinctions are as follows. Contextual IDs are smaller because their use is correlated with their context. CBOR is already in use, so it reduces the number of CODECs required. Negative numbers allow for non-standard extension of IDs.</t>

<t>Devices are expected to compare processorIDs, bytewise, as binary blobs.</t>

<t>The first integer represents a broad classification of the processor, as defined in the following table.</t>

<texttable>
      <ttcol align='left'>ID[0]</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>0</c>
      <c>Reserved</c>
      <c>Do not use.</c>
      <c>1</c>
      <c>Resource</c>
      <c>Indicates that the processor sources data by reading a resource.</c>
      <c>2</c>
      <c>Cipher</c>
      <c>Encrypts or Decrypts data.</c>
      <c>3</c>
      <c>Compress</c>
      <c>Compresses or Decompresses data.</c>
      <c>4</c>
      <c>Relocate</c>
      <c>Reserved for Relocation.</c>
      <c>5</c>
      <c>BinText</c>
      <c>Packs or Unpacks Binary-to-text encoding formats.</c>
      <c>6</c>
      <c>Object</c>
      <c>Reserved for object formats, such as elf.</c>
</texttable>

<t>Each of these classifications has a subset</t>

<section anchor="resource" title="Resource">
<t>A resource can be either local or remote. Local resources fetch ComponentIdentifiers. Remote Resources fetch from URIs.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 1, 1 ]</c>
      <c>Remote</c>
      <c>Digest</c>
      <c>UriList</c>
      <c>Fetch a resource from a remote location</c>
      <c>[ 1, 2 ]</c>
      <c>Local</c>
      <c>Digest</c>
      <c>ComponentIdentifier</c>
      <c>Fetch a resource from a local location</c>
</texttable>

</section>
<section anchor="cipher" title="Cipher">
<t>A Cipher, such as one of the many AES modes. These are typically implemented using a cryptographic container such as a COSE_Encrypt structure. Ciphers are typically used in decrypt mode, so this is the default behaviour. If encrypt mode is needed, then this can be achieved by extending the ID as shown in the table below.</t>

<t>Only one input is used, specified using ProcessorDependencies[0], a positive integer index of the data to be processed in the tree.</t>

<t>Only two Cipher modes are defined, the COSE_Encrypt and COSE_Encrypt0 Cipher mode2.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 2, 1 ]</c>
      <c>COSE_Encrypt</c>
      <c>COSE_Encrypt</c>
      <c>{0 : dataIdx}</c>
      <c>Decrypt data enveloped by a COSE_Encrypt structure</c>
      <c>[ 2, 1, 2 ]</c>
      <c>COSE_Encrypt</c>
      <c>COSE_Encrypt</c>
      <c>{0 : dataIdx}</c>
      <c>Encrypt data enveloped by a COSE_Encrypt structure</c>
      <c>[ 2, 2 ]</c>
      <c>COSE_Encrypt0</c>
      <c>COSE_Encrypt0</c>
      <c>{0 : dataIdx}</c>
      <c>Decrypt data enveloped by a COSE_Encrypt0 structure</c>
      <c>[ 2, 2, 2 ]</c>
      <c>COSE_Encrypt0</c>
      <c>COSE_Encrypt0</c>
      <c>{0 : dataIdx}</c>
      <c>Encrypt data enveloped by a COSE_Encrypt0 structure</c>
</texttable>

<t>Mode 1 (decrypt) is implied when mode 2 (encrypt) is not specified.</t>

</section>
<section anchor="compress" title="Compress">
<t>A compression/decompression algorithm. Typically, this means that the input should contain a valid compression container.</t>

<t>Compression algorithms are typically used in decompress mode, so this is the default behaviour.</t>

<t>Only one input is used, specified using ProcessorDependencies[0], a positive integer index of the data to be processed in the tree.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 3, 1 ]</c>
      <c>gzip</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using gzip</c>
      <c>[ 3, 1, 2 ]</c>
      <c>gzip</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using gzip</c>
      <c>[ 3, 2 ]</c>
      <c>bzip2</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using bzip2</c>
      <c>[ 3, 2, 2 ]</c>
      <c>bzip2</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using bzip2</c>
      <c>[ 3, 4 ]</c>
      <c>lz4</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using lz4</c>
      <c>[ 3, 4, 2 ]</c>
      <c>lz4</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using lz4</c>
      <c>[ 3, 7 ]</c>
      <c>lzma</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Decompress using lzma</c>
      <c>[ 3, 7, 2 ]</c>
      <c>lzma</c>
      <c>nil</c>
      <c>{0 : dataIdx}</c>
      <c>Compress using lzma</c>
</texttable>

<t>Mode 1 (decompress) is implied when mode 2 (compress) is not specified.</t>

</section>
<section anchor="relocate" title="Relocate">
<t>Relocation is reserved for future use.</t>

</section>
<section anchor="bintext" title="BinText">
<t>Packs or unpacks a binary-to-text format.</t>

<t>WARNING: Some binary-to-text formats can cause significant difficulty for a resource-constrained device. They also dramatically increase bandwidth over equivalent binary formats, with the worst being hex encoding at a 2:1 inflation. The best is base64 at a 4:3 inflation.</t>

<t>binary-to-text formats are typically used in decode mode, so this is the default behaviour.</t>

<t>Only one input is used, specified using ProcessorDependencies[0], a positive integer index of the data to be processed in the tree.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Parameters</ttcol>
      <ttcol align='left'>Inputs</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>[ 5, 1 ]</c>
      <c>base64</c>
      <c>uint / tstr</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode base64 data in one of several encodings</c>
      <c>[ 5, 1, 2 ]</c>
      <c>base64</c>
      <c>uint / tstr</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode base64 data in one of several encodings</c>
      <c>[ 5, 2 ]</c>
      <c>hex</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode Intel Hex data</c>
      <c>[ 5, 2, 2 ]</c>
      <c>hex</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Encode Intel Hex data</c>
      <c>[ 5, 3 ]</c>
      <c>srecord</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Decode S-Record data</c>
      <c>[ 5, 3, 2 ]</c>
      <c>srecord</c>
      <c>nil</c>
      <c>{ 0 : dataIdx }</c>
      <c>Encode S-Record data</c>
</texttable>

<t>Mode 1 (decode) is implied when mode 2 (encode) is not specified.</t>

<t>When base64 is specified, several choices of parameter are available:</t>

<texttable>
      <ttcol align='left'>Type</ttcol>
      <ttcol align='left'>Value</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>uint</c>
      <c>1</c>
      <c>RFC 4648 standard base64</c>
      <c>uint</c>
      <c>2</c>
      <c>base64url</c>
      <c>tstr</c>
      <c>base64 characterset</c>
      <c>Arbitrary base64, as specified by the character set.</c>
</texttable>

</section>
<section anchor="object" title="Object">
<t>Object packing and unpacking is reserved for future use.</t>

</section>
</section>
<section anchor="postinstallationinfo" title="PostInstallationInfo">
<t>PostInstallationInfo contains information that the recipient needs in order to determine whether an installation has completed successfully and whether anything needs to be done after completion. These checks and instructions are only needed once, so PostInstallationInfo is severable.</t>

<t>The following CDDL describes the PostInstallationInfo structure.</t>

<t>```CDDL
PostInstallationInfo = {
    ? postConditions : [ * PostCondition ],
    ? postDirectives : [ * PostDirective ]
}
postConditions = 1
postDirectives = 2</t>

<t>PostCondition   = ImageCondition / CustomCondition
PostDirective   = CustomDirective
```</t>

<t>postConditions contains a list of 0 or more PostCondition structures. postConditions is OPTIONAL and OPTIONAL to implement.</t>

<t>postDirectives contains a list of 0 or more PostDirective structures. postDirectives is OPTIONAL and OPTIONAL to implement.</t>

<t>PostConditions are used to specify conditions that must be true after an update has completed. The ImageCondition specifies a digest of an image that must match after application of an update.</t>

<t>PostDirectives can be used to specify an action taken by the recipient after application of an update is complete, such as:</t>

<t><list style="symbols">
  <t>Reboot after application</t>
  <t>Restart designated component when installation is complete</t>
</list></t>

</section>
</section>
<section anchor="complete-cddl" title="Complete CDDL">

<t>A small portion of RFC 8152 <xref target="RFC8152"/> is reproduced in this CDDL so that COSE_Digest can be fully defined.</t>

<t>```CDDL
OuterWrapper = {
    authenticationWrapper: AuthenticationWrapper,
    manifest:              bstr .cbor Manifest,
    ? preInstallExt:       bstr .cbor PreInstallationInfo,
    ? installExt:          bstr .cbor InstallationInfo,
    ? postInstallExt:      bstr .cbor PostInstallationInfo,
    ? textInfoExt:         bstr .cbor Text,
    ? coswidExt:           bstr .cbor concise-software-identity
}
authenticationWrapper = 1
manifest = 2
preInstallExt = 3
installExt = 4
postInstallExt = 5
textExt = 6
coswidExt = 7</t>

<t>AuthenticationWrapper = COSE_Mac_Tagged / COSE_Sign_Tagged / COSE_Mac0_Tagged / COSE_Sign1_Tagged</t>

<t>concise-software-identity = any
AuthenticationWrapper = COSE_Mac_Tagged / COSE_Sign_Tagged / COSE_Mac0_Tagged / COSE_Sign1_Tagged</t>

<t>COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt = any
COSE_Encrypt0 = any</t>

<t>COSE_Mac0 = [
      Headers,
      payload : bstr / nil,
      tag : bstr,
   ]</t>

<t>Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)</t>

<t>header_map = {
    Generic_Headers,
    * label =&gt; values
}</t>

<t>empty_or_serialized_map = bstr .cbor header_map / bstr .size 0</t>

<t>Generic_Headers = (
   ? 1 =&gt; int / tstr,  ; algorithm identifier
   ? 2 =&gt; [+label],    ; criticality
   ? 3 =&gt; tstr / int,  ; content type
   ? 4 =&gt; bstr,        ; key identifier
   ? 5 =&gt; bstr,        ; IV
   ? 6 =&gt; bstr,        ; Partial IV
   ? 7 =&gt; COSE_Signature / [+COSE_Signature] ; Counter signature
)
COSE_Digest = COSE_Mac0</t>

<t>Manifest = {
    manifestVersion : 1,
    sequence        : SequenceNumber,
    ? preInstall    : PreInstallationInfo / COSE_Digest,
    ? dependencies  : [* DependencyInfo],
    ? payloads      : [* PayloadInfo],
    ? install       : InstallationInfo / COSE_Digest,
    ? postInstall   : PostInstallationInfo / COSE_Digest,
    ? text          : TextInfo / COSE_Digest,
    ? coswid        : concise-software-identity / COSE_Digest
}</t>

<t>manifestVersion = 1
sequence        = 2
preInstall      = 3
dependencies    = 4
payloads        = 5
install         = 6
postInstall     = 7
text            = 8
coswid          = 9</t>

<t>SequenceNumber = uint</t>

<t>DependencyInfo = {
    depDigest  : COSE_Digest,         ; digest of the resource
    depScope   : ComponentIdentifier, ; where the dependency’s payloads will be
                                      ; applied
    ? depUris  : UriList              ; where to find the resource
                                     ; applied
}
depDigest = 1
depScope  = 2
depUris   = 3</t>

<t>UriList = [ + [priority: int, uri: tstr] ]
ComponentIdentifier = [* bstr]</t>

<t>PayloadInfo = {
    payloadComponent:       ComponentIdentifier,
    payloadSize:            uint / nil,
    payloadDigest:          COSE_Digest,
    ? regenInfo : {
        regenDigest:        COSE_Digest
        regenType:          int
        ? regenParameters:  bstr
    },
}
payloadComponent = 1
payloadSize      = 2
payloadDigest    = 3
regenInfo        = 4
regenDigest      = 5
regenType        = 6
regenParameters  = 7</t>

<t>RegenType = LocationLengthRegenType /
            FileListRegenType /
            KeyListRegenType /
            CustomRegenType</t>

<t>LocationLengthRegenType = 1
FileListRegenType       = 2
KeyListRegenType        = 3
CustomRegenType         = nint</t>

<t>RegenParameters = LocationLengthRegenParameters /
                  FileListRegenParameters /
                  KeyListRegenParameters /
                  CustomRegenParameters
LocationLengthRegenParameters = [ * [ location: uint, length: uint ] ]
FileListRegenParameters       = [ * file: tstr ]
KeyListRegenParameters        = [ * key: tstr ]
CustomRegenParameters         = bstr</t>

<t>PreInstallationInfo = {
    ? preConditions : [ * PreCondition ],
    ? preDirectives : [ * PreDirective ]
}
preConditions = 1
preDirectives = 2</t>

<t>PreCondition    = IdCondition /
                  TimeCondition /
                  ImageCondition /
                  BatteryLevelCondition /
                  CustomCondition</t>

<t>IdCondition     = [ vendor : 1, id: Uuid ] /
                  [ class  : 2, id: Uuid ] /
                  [ device : 3, id: Uuid ]
Uuid = bstr .size 16</t>

<t>TimeCondition   = [useBy: 4,
                   time:       Timestamp]
ImageCondition  = [ currentContent : 6 ,<vspace />
                   digest: COSE_Digest / nil,
                   location: ComponentIdentifier ] /
                  [ notCurrentContent : 7 ,<vspace />
                   digest: COSE_Digest / nil,
                   location: ComponentIdentifier ]
BatteryLevelCondition = [ batteryLevel: 8,
                          level: uint ]
CustomCondition = [nint,
                   parameters: bstr]</t>

<t>Timestamp       = uint</t>

<t>PreDirective = WaitUntilDirective /
               DayOfWeekDirective /
               TimeOfDayDirective /
               BatteryLevelDirective /
               ExternalPowerDirective /
               CustomDirective</t>

<t>WaitUntilDirective     = [ 1,
                           timestamp: uint ]
DayOfWeekDirective     = [ 2, day: 0..6 ]
TimeOfDayDirective     = [ 3, hours: 0..23,
                              ? minutes: 0..59,
                              ? seconds: 0..59 ]
BatteryLevelDirective  = [ 4, level: uint]
ExternalPowerDirective = [ 5 ]
NetworkDisconnectDirective = [ 6 ]
CustomDirective        = [ nint,
                           ? parameters: bstr ]</t>

<t>InstallationInfo = {
   payloadInstallationInfo : [ * PayloadInstallationInfo ],
}
payloadInstallationInfo = 1</t>

<t>PayloadInstallationInfo = {
   installComponent :          ComponentIdentifier
   payloadProcessors :         [ * Processor ],
   ? allowOverride :    bool,
   ? payloadInstaller:  {
       payloadInstallerID:           [ * int ],
       ? payloadInstallerParameters: bstr,
   }
}
installComponent = 1
payloadProcessors = 2
allowOverride = 3
payloadInstaller = 4
payloadInstallerID = 5
payloadInstallerParameters = 6</t>

<t>Processor       = {
    processorId:       ProcessorID
    parameters:        COSE_Digest / COSE_Encrypt / COSE_Encrypt0 / int / tstr / bstr / nil,
    inputs:            UriList / ComponentIdentifier / {int =&gt; int}
}
ProcessorID = [ * int ]</t>

<t>PostInstallationInfo = {
    ? postConditions : [ * PostCondition ],
    ? postDirectives : [ * PostDirective ]
}
postConditions = 1
postDirectives = 2</t>

<t>PostCondition   = ImageCondition / CustomCondition
PostDirective   = CustomDirective</t>

<t>Text = {
    * int =&gt; tstr
}
```</t>

<t>NOTE: COSE structures are specified as “any” to enable CDDL tooling to process this CDDL without including all of the COSE specification. The same consideration applies to concise-software-identifier.</t>

</section>
<section anchor="examples" title="Examples">
<t>## Unsigned manifest with one payload</t>

<t><spanx style="verb">
OuterWrapper = {
    / authenticationWrapper / 1 : F6 / null /,
    / manifest / 2: h'a3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67' / {
        \ manifestVersion \  1 : 1,
        \ sequence \ 2: 1,
        \ payloads \ 5: [
            {
                \ payloadComponent \ 1: [h'30'],
                \ payloadSize \ 2: 37,
                \ payloadDigest \ 3: [
                    \ protected \ "a1011829" \ {
                        \ alg \ 1 : 41 \ sha-256 \
                    } \ ,
                    \ unprotected \ {},
                    \ payload \ F6 \ null,
                    \ tag \ h'8caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67'
                ]
            }
        ]
    } /
}
</spanx></t>

<t>Raw OuterWrapper:
62 bytes
a102583aa3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67</t>

<section anchor="ecdsa-secp256r1-signed-manifest-with-one-payload" title="ECDSA secp256r1-signed manifest with one payload">

<t>A manifest with payload description only, authenticated by an ECDSA signature. Signing key identified by Subject Key Identifier.</t>

<t><spanx style="verb">
OuterWrapper = {
    / authenticationWrapper / 1: #98([
        / protected / h'A103182A' / {
            \ content type \ 3 : 42 \ application octet-stream \
            } / ,
        / unprotected / {},
        / payload / null,
        / signatures / [
            [
                / protected / h'A10126' / {
                    \ alg \ 1 : -7 \ ECDSA 256 \
                },
                / unprotected / {
                    / kid / 4 : h'537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d'
                } / ,
                / signature / h'304502201d65938ec454354a6e866b468e9808db4ef36e97de09f98fda92e9c0e3302fc8022100aff871fe581d3f6b831d74e46f9acd7a015e5548770b2a437970be9272a7fbaa'
            ]
        ]
    ])
    / manifest / 2: h'a3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67' / {
        \ manifestVersion \  1 : 1,
        \ sequence \ 2: 1,
        \ payloads \ 5: [
            {
                \ payloadComponent \ 1: [h'30'],
                \ payloadSize \ 2: 37,
                \ payloadDigest \ 3: [
                    \ protected \ "a1011829" \ {
                        \ alg \ 1 : 41 \ sha-256 \
                    } \ ,
                    \ unprotected \ {},
                    \ payload \ F6 \ null,
                    \ tag \ h'8caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67'
                ]
            }
        ]
    } /
}
</spanx></t>

<t>Raw OuterWrapper:
188 bytes
a201d8628444a103182aa0f6818343a10126a1045820537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d5847304502201d65938ec454354a6e866b468e9808db4ef36e97de09f98fda92e9c0e3302fc8022100aff871fe581d3f6b831d74e46f9acd7a015e5548770b2a437970be9272a7fbaa02583aa3010102020581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67</t>

</section>
<section anchor="a-ecdsa-signed-raw-binary-payload-with-conditions-text-and-installationinfo" title="A ECDSA-signed raw binary payload with conditions, text, and installationInfo">

<t><spanx style="verb">
OuterWrapper = {
    / authenticationWrapper / 1: #98([
        / protected / h'A103182A' / {
            \ content type \ 3 : 42 \ application octet-stream \
            } / ,
        / unprotected / {},
        / payload / null,
        / signatures / [
            [
                / protected / h'A10126' / {
                    \ alg \ 1 : -7 \ ECDSA 256 \
                },
                / unprotected / {
                    / kid / 4 : h'537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d'
                } / ,
                / signature /"3045022100830cf142cc4adf563392dc7e0430000158bf3720b28b7cea388b0f1a5f8918a802201def2df34d6abd3b17c3425573ff2b7cacae3dd085e11dfc23bf0c60be51b7da"
            ]
        ]
    ])
    / manifest / 2: h'a60101020203a10182820150fa6b4a53d5ad5fdfbe9de663e4d41ffe8202506e04d3c2488759e4a597b5e7cd4976530581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d6706a10181a2018141300281a20182010103820076687474703a2f2f666f6f2e6261722f62617a2e62696e088444a1011829a0f658204e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf' / {
        \ manifestVersion \  1 : 1,
        \ sequence \ 2 : 2,
        \ preInstall \ 3 : {
            \ preConditions 1 : [
                [ \ vendorId \ 1, h'fa6b4a53d5ad5fdfbe9de663e4d41ffe'],
                [ \ classId \ 2, h'6e04d3c2488759e4a597b5e7cd497653']
            ]
        },
        \ payloads \ 5: [
            {
                \ payloadComponent \ 1: [h'30'],
                \ payloadSize \ 2: 37,
                \ payloadDigest \ 3: [
                    \ protected \ "a1011829" \ {
                        \ alg \ 1 : 41 \ sha-256 \
                    } \ ,
                    \ unprotected \ {},
                    \ payload \ F6 \ null,
                    \ tag \ h'8caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d67'
                ]
            }
        ],
        \ install \ 6 : {
            \ payloadInstallationInfo \ 1 : [
                {
                    \ installComponent \ 1 : [h'30'],
                    \ payloadProcessors \ 2 : [
                        {
                            \ processorId \ 1 : [1,1] \ remote resource \ ,
                            \ inputs \ 3 : [
                                0, "http://foo.bar/baz.bin"
                            ]
                        }
                    ]
                }
            ]
        },
        \ textInfo \ 8 : [
            \ protected \ "a1011829" \ {
                \ alg \ 1 : 41 \ sha-256 \
            } \ ,
            \ unprotected \ {},
            \ payload \ F6 \ null,
            \ tag \ "4e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf"
        ]
    }
    / textInfoExt / 6 : h'a10178c84c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742e204e756e63207365642074696e636964756e7420616e74652c206120736f64616c6573206c6967756c612e2050686173656c6c757320756c6c616d636f72706572206f64696f20636f6d6d6f646f20697073756d20656765737461732c207669746165206c6163696e6961206c656f206f726e6172652e2053757370656e646973736520706f7375657265207365642e' / {
        \ updateDescription \ 1 : "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc sed tincidunt ante, a sodales ligula. Phasellus ullamcorper odio commodo ipsum egestas, vitae lacinia leo ornare. Suspendisse posuere sed."
    } /
}
</spanx></t>

<t>Raw OuterWrapper:
522 bytes
a301d8628444a103182aa0f6818343a10126a1045820537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d58473045022100830cf142cc4adf563392dc7e0430000158bf3720b28b7cea388b0f1a5f8918a802201def2df34d6abd3b17c3425573ff2b7cacae3dd085e11dfc23bf0c60be51b7da0658cca10178c84c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742e204e756e63207365642074696e636964756e7420616e74652c206120736f64616c6573206c6967756c612e2050686173656c6c757320756c6c616d636f72706572206f64696f20636f6d6d6f646f20697073756d20656765737461732c207669746165206c6163696e6961206c656f206f726e6172652e2053757370656e646973736520706f7375657265207365642e0258b9a60101020203a10182820150fa6b4a53d5ad5fdfbe9de663e4d41ffe8202506e04d3c2488759e4a597b5e7cd4976530581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d6706a10181a2018141300281a20182010103820076687474703a2f2f666f6f2e6261722f62617a2e62696e088444a1011829a0f658204e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf</t>

<t>Text severed (textInfoExt deleted from OuterWrapper):
315 bytes
a201d8628444a103182aa0f6818343a10126a1045820537ac93ac909e79990914caa00fe87eeea637ef89b5512e5cb6e558a136ff98d58473045022100830cf142cc4adf563392dc7e0430000158bf3720b28b7cea388b0f1a5f8918a802201def2df34d6abd3b17c3425573ff2b7cacae3dd085e11dfc23bf0c60be51b7da0258b9a60101020203a10182820150fa6b4a53d5ad5fdfbe9de663e4d41ffe8202506e04d3c2488759e4a597b5e7cd4976530581a301814130021825038444a1011829a0f658208caf9283b13666ca4e50f7a1eee86ba40b5e6a1d2ca39f7498b6a6a7be8d8d6706a10181a2018141300281a20182010103820076687474703a2f2f666f6f2e6261722f62617a2e62696e088444a1011829a0f658204e2714598479d8b6634805df5019ef3420edff0329894acc91de8c8de16fb0cf</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>Several registries will be required for:</t>

<t><list style="symbols">
  <t>standard Conditions</t>
  <t>standard Directives</t>
  <t>standard Processors</t>
  <t>standard text values</t>
</list></t>

<t>Editor’s Note: A few registries would be good to allow easier allocation of new features.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A more detailed discussion about security can be found in the architecture document <xref target="Architecture"/>.</t>

</section>
<section anchor="mailing-list-information" title="Mailing List Information">

<t>The discussion list for this document is located at the e-mail
address <eref target="mailto:suit@ietf.org">suit@ietf.org</eref>. Information on the group and information on how to
subscribe to the list is at <eref target="https://www1.ietf.org/mailman/listinfo/suit">https://www1.ietf.org/mailman/listinfo/suit</eref></t>

<t>Archives of the list can be found at:
<eref target="https://www.ietf.org/mail-archive/web/suit/current/index.html">https://www.ietf.org/mail-archive/web/suit/current/index.html</eref></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like the following persons for their support in designing this mechanism</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC7049" target='https://www.rfc-editor.org/info/rfc7049'>
<front>
<title>Concise Binary Object Representation (CBOR)</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='2013' month='October' />
<abstract><t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.  These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t></abstract>
</front>
<seriesInfo name='RFC' value='7049'/>
<seriesInfo name='DOI' value='10.17487/RFC7049'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="Architecture" >
  <front>
    <title>A Firmware Update Architecture for Internet of Things Devices</title>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>ARM Limited</organization>
    </author>
    <date year="2017" month="July"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIANJ7yFsAA+19a3fbRpLod/wKHM0513aGovgmpdnMriw5G93161pysnNi
Hy8INCmsSYALgFaYxP/91qtfACjJzmyS2bX3ERFodFdXV1VX16sPDw+DKq1W
6iS8fH1xFZ49fvEqXEdZulBlFZaqSKNVWkZVmmfhIi/WURVE83mhPpyE36TF
+iYqVPhMN/+GGyR5nEVr6DEpokV1uM6LKDsstyn8KS0Pe4Mgjiq1zIvdSZhm
izwI0k1xEm4KNR5OZ1fFtqwGvd4xtIMRIgBOxdsirXbBTV68Xxb5dsMAB+/V
Dh4lJ+FFVqkiU9XhOY4aBGUVZcm7aJVnAMlOlcEmPQnCsFjEKimr3UqehmGV
x86faZaorNIPyryoCrUoze/d2vtZFWlsGsf5eg3fmrdptkozO4z6sToEXFaH
0Mk8X0Gzw/yrP8MbwNc62mzSbMlto211nRcA7CG8pH9pBq0fd8NniEr9kHH8
uFBZEmX+q7xYAqZ/omU7CU9fPQufpuu0UoluoNZRujIfd+njf4mKdRfmENQH
/rYbXpXxdb5QWbr0R/82yjJVtry+LwTX1EG3Mh38y3L9YxeWMQgyoqb0g8Jl
e/XN2aDfP5Y/R/3BQP85Gc3kz2lvpBvM+mPdYDY8hj8DJDKnv9MivgZw4mpb
0G9YH+aCU0vXrzcJ0KjXFHnAUFqYL8Kra1i2MjxXH9KYljkMzfLtXTrGXevS
Ad6a6EIwTsL/u13twkGvP6Vn3149ewroq6pNeXJ0VOVAUN1UVYsu9HB0Xa1X
Ry73LbbJYeTM47DXC4Lg8PAwjOZAxFFcBTCTMiw3Kk4XacwMn6gyLtI5LHB1
rYT9cdKRkRBdwKQVFynQbjjfZslKYbO1qiIAPYIx8m3FfWjcIh5h6hf5FYyC
uOuEN9cKXlR5sAAe9Fp36Be3A1hyaJrG12FahcA2q1SVHegrCeNit6nyZRFt
4LVdcJjIpshx4rBU1JOBnlGwThOAOAj+FOLSFnmyjfGrIDi18G6ZFtYqBopN
yzXMFeFXZQkcDzISRCULqHChIkspZnoEdqKg4U1aXYcftqtMFdE8XaUVwN8N
v79OAWkIHKxGVm5A7iAKzfjpOlpyJx4qrtW6VKsP8CfAk67xsygjVMM3+F20
AvGZ7MIPUZHmW/gCJpCl/7WFL6IPwIHRfAXoLbeAzoiX+Wm6vK5uFP5/kOxA
Mpk6rPJD+TN8+PTm2eDZI0JpHucrgHIBuwRgloFC5AKoKAhxAg4GuuGT/9pG
KyBiC2jKY6ZZvNqWuFJCNoc1uonz7IPaqaSGkPBhmhna9CnzEZEEvtuWRI3A
azgP+I9dK00XMDAtD/4I13liWKCkXh7mG/yBsD/ChuvovQphD1QFdK2yJeCF
UQDMBouTLuDz7QqY40nLmNBLfsPTZkmBlJ8D26SrpPSZhObYwRHnCtYIueMa
ODDLwxxXONxEBXT4kLCX4PgbmA6TY5QgdLDoqnwUxkCpIIcqGLpO0WWYZx6Z
Inki1qNEwWoByW+K9APQ5hIXkGQEQy2yHVEInxH9qQxhTML5zsV7ohJEJjyH
fQ/WFnbMEJnf/oItvNTwQbOcl9QCdUK8hN3FUYkgEnXnGVISiOJlfSkBlAKA
TxGWlGis3OKSpEiTgEyNigh4DfQMWGLYfIrmuF1UaJD0FmnCaHUGatBiKWNF
SZJqarFwOMOqlBYP9BLEwxoIJd0A79+KnRbYLitYfVz0NmqOKofACKqwSMv3
IOqqdMkLZyQBKDmNqSDVa04qiX6QAqu84PXZZoQ5+FEokFVlCm+A0v5CInkF
/UG7rQiosIzzjWLmBO0CgFynTBlRhgiSz3c4bVzOYg0Eg4RX7mCEtVA/0Dyo
eSVxAEwPsJAhmUMvoKMSQoLggvFflts1YvxakIACUBESFtEaBG5UsAzGd9cg
5g5XwMkNxgjd7TL8+WdXC/j4UVgBNLctSTqkMUAJvU1Qki5yYnNUS+FjGMpX
gD9+DG+U2V9lUwJZRlIAF3W+yuP3Jc7P3bBoXX7+2ajRZkzoD+i0gi5K2SCw
Z5Jaug/S7Gv9dWnTO0PhmllxdwVrkGb5Kl/uAlALFJIgYh/E08Gz15dXBx3+
b/j8Bf396sn/e33x6sk5/n357enTp+YP3eLy2xevn8L7QP6yX569ePbsyfNz
/hiehrVHz07/dsC7+8GLl1cXL56fPj0ISeiDsmHQH5HigHRCFASniIqXQWM4
wW9AGQxRiQQMijoJCxkEX9FBAo4T+cJV+1DmEM81tD1WRy6eXH2DWHmPy0Un
EvmEaAEgjoqkC52/jHarPEpQs9ykKibKd3UThjtRK9BMgXiAsnYbEJgoPb5x
tSUcc7MtgF0U0QUCjf2/UmW+LWK1fwBkBAAKBCjJISAUphtgow0DR3CyIAfN
FTpCRgUBRaoEshHqJNhjacQW7nR6aJTe0HGU8bZUyGPh6NwfR58Wb4fXqp7u
gNINrID7VI8naiAhSk+mDGFvTnjiZhb2C4ZPd4vg8eqfhC+cAawk9GBrBc32
EZ7yRlnBERe5KL/JUOyTHHQ1VWIvvThlusz01twJtZSdo6CM0w3tYFqdYt59
cfkENI4lCgeRAKoIkNLxCMSUjn+BgACcfICNrLTtSiIsHJJU1k747PSMcagy
AhGWowMyiVSOeVQCrPWhujQ181Njm9R73RhVU9pAgapDIgeE+h1olD0rNTu4
DcEwmbpxukMZq+A8AHwRBP/xH/9xdn7+NKCvz6nvd1fRcgnjfR3+adLtHz90
Xj2CQ9JfQuB22v02qyhW1/kqQZC/i1aw7V09Pne7gj4MWDgUoPdP4bf5DbPM
erPFPQFQA1yaLkCNC/mzAAQ8iEaAFdotVUW7XFbCOR/XCvCYkzwXwUtqrXA8
fa4SliYyHYMOl2Gvow8KuwX+ygiHSMOM+LbPIhb1UVFEOzifXZFGqVC5FCCa
H+kpRHgYDvpdYE00V5B9g85MKEFoCaEn2dXN11q+zBW2pRmTGGNBSB3AXwc8
6gGs44Bht4pUVEEzIDPoegHqAW9XzsqYsbrhxcI53AC5tHUCJBz+pIocNvZs
CRs9nnA1PmH44X2Gp4OlHINlSrifRNxZtdsALAwM6hWIXhwBBCDomnQmhXVN
kVcXESh4JZO9B1SaRaD0MIKgr4eXSoVtfNtB2xfBMeoOmbEc2F6/vjgH/RVl
kRXsvGYasO6jIBgJIYiUqpGgmWGa1WbofgP9ERclIS0AGso2iqxlSFjXwCms
AJsDLGEbe0CuBdRGy7XZUeK8INUxS8yhFk57QOdEd2l5Ytm9Qa5fhz+QCQTF
BLY+McTVoed2ZU9Ctd5Uu3d58U5MmT+p5N062nBD+Bi29mj1LoqwLU5cepAp
87PgLcuDKyJ7tSk9kSDsZHknPAON03njQI7yY5Nvtit8D9gyeigsaZHDSYsU
D2JW5hPdF7b5wFIrf6zO9brBvmAkTCtnE9nNdxXxq4rWHWAC3dh82VCS9pNg
f8QMFJ7hScYOCTuaYoKMVkvc867XgMSSxkrpYfiQ5mneAmTyKSLhEW873uQe
2kk7+CYpyh/m2aMuk/ZLpEtR9ks8UMGw0rsYCB5U0fKBMKpWiFslTFBb55q4
v9cy5/P/REPC/8DVTj5/tZPPXe3z+mqfwUvS+C1A5sNPXetfwufRWiHP/yJq
wS/wDK2C/Az/widwnDkcDEbwZNSzD8YTfNA3D4YzajEwD8b9AT4Y6gdD3cnI
ecK9jO0T6WZin0g/U3gSPO8+FhWmpF2Q9LqSLA6dECUyLkMBSqK6YR3xPC15
g8MX+kwReE/t+R93ALJJHLJ1SWUf0iLP9Ck3suatEI71BZFBN3wSxddijhKT
h24KW0WGm+K85CMUakBdOGutRRlaRzvaNmE7imLU2dP5iikZSA57JPPoM2Ml
0cpqSV/OlTWx0N4tXzCv2fEjrYqLXlLlcMbC+cQ5nbpw3my8Uxv4MM0aJ37E
5Pdw2lvAsZ6VeLF34m68QxxGdRMCCRLHOI6sB+CzUocnR4YSlNMtzxX2KG0G
V4jQUviwbgXQuiGAWcLsgbUV6zTqxw1vfDcaUlHEGVSxQDGwbm+OwYJk23cs
9EjP0wivQ4ECy2knSglZtHcNiB+KGH1ZqDPY88lAVj5C2WK6iCpacoHRMy7i
MY6M2dpijWKg/qHWRuJU+GKtqmDcDV9tMxz2gvrlbs+BXmL0BJXBpBs+JYXI
MZoAyvSBO0P9wleajKEymMq3Hsif2skMdFoxDFZW2QqOHZeAaLveMdMxKHbC
ZY4/x92g3yPJkNLx82VeVhcuaBbzQb8viKm3cVATfH+tMmuftIdgovBSn/L0
cbUjFgpDyloh3uSWqXPgKYUOp0rpnblE+btGN2DB4goJmXzR2lIQmCeGnsQi
aaEgB4diyjNWkuq6yLdLMmenAPcKvo138UqYxRrVHMpHiIzZhQ/wCDfsdyVu
d+SQKNQKfvos30V2wI+fq4pY+wUJx5avcWsDXFtGcTsZcifsTtzfB/lMoJu4
qncw2tsB+2VAJmqxz4LFyCxygIhlYcy9gFqVoRMIP2wBIl0TDmAnR8m9qfgc
smi4GLrIZdZt1TobI6DD/0N/k7mggSB0RvBsXJ7rIife1X9dPLlIm935ucfi
ta+P7zW5PRMC4TXPczTE0hbKcrMkyi7h4L8BmVZiI28zrXAh6yLWUDdZUmj/
uEYLqPlMNkoKUcCDmdVtXfAEIFxd1WEnC3HpGsVVidxc7NuT9E4se2zM8ood
mV5b17gn/S+25Bg0TiCLICSvjNCGPOxK+S6ZaC7RD4ebQvhkxZMLHqs42pbK
H9QVGaBJO7pBXNEGUznPcPYlInLNU2ha4qU7wCdoEIl1m0EPfABHrb/gtTJf
exIoJadZzPM9oGmgKeAg1H/WDaO4UYNKoj7wDEoFkEWVNdA4TY0dQxQOa1Er
c25NgJPCDvPOFYtqht7f9wXUtYoysX+Sn49Yv0bXpVmKdpyxH8qSodkhBco9
tNW1GHEWBJ2w5HNz9xeQbnFUJHvGZ12BDUerPFuSvRIVjKjY2RWx3um50FFa
uV5bdIMhA2pK8oeg7X2J5yNy/6EbLGFHovoxWm+QPWF0tq6lPyFJrFPZU8V2
mi60EcRQl1lOM44RhOI42PHhj01AuNKJdhSCZBG+YC0iSpSzUGRZFkrAaILm
UB3v0Lm2NiI+xKFJiLdC94wlmGfLW+aDrikQHu6IjcoqBaVh7shJdBfzJu12
WhnHCE5zCxwa9nt03i1ZOSLfINPTT0ZAFtGNnBI7rEwtsKnSOGHBVvC3D2Wk
x7Akj45m4Z9xAHFZZYgzcoNq5HWNxAFmL5a3dvLs9G/et6jno3pn4DC0ucZY
jDv7E6A8cEgcOs48OX9s0FSXsrODzYJmQSP2niii2z6xI20c+BFKNK2iWfur
ZhJo/16pjWyO3H0k2MQ/NFPyKi7zaNXylfpRTCUluz6yJVEkrudDsmGTbxjI
m/386LDoHw6GaAf4HlcSF0RlQAiFDtYQzbTDxIU/S3STk5E37OsABuZlDvcQ
ecNYXFEMHzwp80VF248qCtwczOqQQCC232ZpllJQAD5A9RMXAc6qLzXQANkc
YU6zJpSI9eKDaK8Xp89P4ckyJc2YDtTP1TLyOjFKNyo/bIrfuZbgQx26hfKL
iYqHA2SR/RWDzrgbmL0qzuDn6iwqeYelFmaZudlrUD6cZg7bwi/uTTbBhA4N
uJOj6ddYl1DpzMlZRDiFw9yyiNZr3hyz5RZ3RjnvAsVc7zbXqOzI/sB9icZl
QNwA+yI2dGMYYgt0VJSobIhCIA7XMtB/EJgVxuysUZMgP2aHiV2LZLbGd8Jr
9SPs+ocwnbwAKlKrhX5HykEnfPnkWRirouIIIfiS6PR7NQ+v8vcq65iQWd50
F+lyq5f0ihBnDnALPu2izeoGNo0CD4cSEwu6zQngOS+V3qsZJa4Weogqij4g
az3c+SZBbxpsnY9lZg3ACace8PLNvYbrht+2oCqiQKd2BNyz28cW26wvEF0j
Z0Z6akJ1IBsTVJ0knob2JaCPQwcnaMVlL3RoQ6CcgfF9R3RKUrhY3jmhHzCw
qzfrTcVhPCC6S9ZKLLWJQcvwBYWvkRiiXfoGDjq8+xonkIrWDZSSI3a1IEOX
KHDhMtqU2su9Y88gqBPAS8AtleKwyxyGR08hhtUha3GwTZIAhxC/pSThUXuq
oUv2dzYju6C5Rr/MUzJg+6+IoVBJ27PwYqjbZnBgfa8lQ1RrhMbAOcDqA4ge
pbWr4AHEJuKsBVAMZRTcIn/zAhC+kbgCDnLdoPClPfeGHIjQel0aXXRt4hPg
DIJKA8Cw3pIngQPZZDPQhJmyJY4PLmz0YD0OVgnFAUyTfYFCF+KGhw7geKZP
fNY8JM7U+FrF72ke0aIi6nbOuyJKPPBlU8lXH9gw6HR6YYAjhU0/XOTawAhU
gc44Nvysdnp7vXuOHc/JTyeI1U20o1MNUAvBjwZWh/uUgaCmFWM0LcoQTf/I
tyCOYRXI+FRjASMI9FOU7EhDWrFCYDBWd4mEDXsMyQjokoBsgQYn8AFNZ3cQ
skSH0cGVTiNy7idjNrS71mobinc6tDYPUK4nhYlC0DZXGnMoK/ZiDueT3bY6
4un+k03NuNR7e9MonSI5CldqNUgTBktVOHMWKBN3DUMxxbVskUBvCjRWFOQ+
lReOOo/Ya2lhbMmSFIDPz5BZMcrhwp5n3fcvQWZ55hinXXgUhq8UneFj5X2k
dQLn2cX+Ttr7AF3mtpFbP7rCk9yed3C2+f7ivPH2jjkGd4Af3AfcwAGPlKYX
3iKK/caJwvlPCpQNOYLGyEoJQ8YorsZpW85vqLXVIrqwlYzEcSNAT46/n0D5
Xt5/Hf5skiosLcnbE7LQNh6zD9/Kce8fHUm78RxmoJmD2/8z7guC1Cc/ms+c
9saLwPhEdOpP08Z3/qf7vttY+7v91h2yZp93v0UjAf72BnW+xbXVbeO8vEkT
Hzy3Lax1DGLkUJ97DvmIUe2Cj0Er6mFh+oERI1+Hg8DDHjwZBqn7cxT4c4VH
4wCnwH9PAgMi/JoGQevKOjFaOvLriJ9cpsus9ggDuVpa9eWZjelon6CJp62H
67WLNcMTe82enoWJT2g6qKg+KeiqMSuKCGameuYa1FybCZujkKewMQrvAzjl
wone7h0HmN+gHOOKMywdCVrHZf3iztABttZCy7na5RKKacK/KzdimgFoX2SK
LY5xbyUNTGszrlxAhWUZFaD/lyR4bGycG3GHx5tueAob8Qd2iuFRnnovlERo
7LxuWVLN4SSeiQsZW4iNRqQdb+5ZO+xobSNrHLfVX5L+ONdSz4uzgjNymqVr
NFgx9SBt/Oj4UDEyS+yuGOVAORv03CNKmwghn+mh6ayQS24Gh13FLYmdTge0
hq5ll3RRPFxb47flDUOLTiQna/C+wBfye1g+qrtAjYnf8+CiWYZwaPyOAECL
BLZhrdqF2oglNv5vVFpLG+1I1tMYdXGtHyIkpFu5WSLawRkEf9+x9TmmNZSZ
1bH2AOOgbVewsNwHDhvYJG+1Zokuo7lSrtIpNLPadWiVUh1kiOohUs4NqbQ5
Wg/4rOKeZ5r9eZYXIP5loePgMYURJDJqTJbABLHXW6CDQ0zloEPFLfHiCCNR
lMSPNBSTDjmSHHrE1vhIIx+esSXJc0C3eK+YDUVdNdmOeiMotFaXOIOh3mZS
hPhYKFNlhTrCdaFMODb8NY6lTuAtwAwnJvQZRyYORD5DP3AUYrYxp2BZxkLf
rn2jiQo9tJGF2FqCBXeOw4C2Awns5LMASls/xJNjtkt/+7Ma3jOrN/zs6Wrf
ydxPwj5rLmZa8g8TwfnJc5pnU3XjVm2C4sh1JugPPZkDH/7wVXiuH+3ws7dm
CG3fEUB+MKkdXrPUgkHN7geGoxsx/G0c3voluYpCi58r0QrbW7OSZVvv1fv8
z0ELDOprhApgfXl8PVA/GwY+lkNWBz18hqQP+sgLSS/0UROSduhPGp/NAn9q
+Ow4CHxqgWdbkKsBq36XctaV4HjRMp7VHLxiXZSgeifGs/BdXsTYyvPhU7Yi
h8W4biwjqDlwxbIWR2s7Dm2BDBUqJy2KNietQdKwFPSGVgPQiwg1Ld6hDvpX
MD0XLfLbUi22K25rPFB5HG83O95syg0H1FKunUtHlA3CLtRKG7pas1NC7YR3
p26zE04xO4EtnBzppues9Rbb9Fm06eg8TjQ7Lq+rQ0DdDfp5GYV2dMnixfw1
d1c3vZrtiAY0Aep12tamPpZgWiJzsqGjN2l/DIfP15R93VdfJznrbjwtuqYU
NwABffX0+fnp1YtXfxNYa5JeEtEj4NrDAsTxPALFP863mLUGxCH5mNdqtSn9
VHSLJcqlJ3sSh2jaSC+B/KDI8+rAsRph42X6QWnVSAJATQPSsSVtpQ4vplxq
NVrzSyOyAwEXlynZzjO9ukhRUfj66oxDNCrQIjgMMqZUAslhr43Zre0adbQ6
IktCXJcmXGBLObIYm+Lnv1DyQWYOeW0bjrblotk7WlqzrHvi6Ib+4DrJUbtf
NZ6fuVYVrLmCGJYUNLcHSv3F8LSKXhlpprvLdHKajm1oA9xLJY1N1KDWtHBv
bw+qwofSPxoTtUfyGlgVd5cjE9UjvFB606/7yGFlvI2D1kZrLv4urU+pBCGP
u6un7elDmJj/4c9FLlHk8bagsJ96dI+o6BiMUIdELxSSj97JPAAd5cCDzkv6
dcM53TNRN3Q7dcZKfyWdfiaRpk0KtQ9h3QJvm/5sJmrTeu7JRf7wDsZ0LM1n
QUSHkftBoMdxhhaV5HMH36OcQfPinjBZAByo4GDjM09Q4yXhWwrh92On2rNy
/XP7opWj2g8M/lGqDoaTp2Fywfwm+vwAEIiGATqtp67of38xSUMSFSRnPf35
JVmp6HOd+nxhsN2Bz6U6zbUz3d2D0rLpDccwBeG9/v1FKtck9hjyukjpBAL/
fYoipNZeV8cJTXUcM4WPgZ0/auV2OqiPm65JEw9091+HP4R/Dn+gODJKUQbF
uBNui/QkrADzb8O3QQsm8LOvyHLl5MTZ0S3l+IiyZGRIf26oX5InrBLbYlNi
c6F1Nda9ZJ7m7ia2lpWKvCyg8DJdvvPUeDSA1iOcHGedYV3KVFFKh/A7INjg
M+BY0LSv8xvFULG91wQZOpY4PwgzcvIsKALP4TwTnTkvVPTe57aEs57WKTvw
H8zzZPfO5D8+IAWbH3KI5QOj7ltrNCmIHoiYwooFiBBnOgXdluYodqYWi85W
ISel8x5kFY5XeuvS8SINAfPpMs3Q12jzz039GiAQyY1x4nR1NlkHVw1OAmTm
NfZqOgtoi3bXUCbRvlb/2+WXaPuk4gClNDnNErJgzTmkWIWN7IYo41SFEXx5
bI2rkcsL8NH7LL/J6BCHFlbyuAu4zLi6f8fO2sKMOsfaYzo2twNtsV5f40NO
2bKlfGxUq9OI6VuOWFKQJ5fqLU5RCGLDDfv4F5TzweHEJVY6cMy25hAioyHq
a/GyMPgq3zFrmYQTm15cr03EYU76KfIkjuyk3VtIjeu6uXLuCcCGjdGGKH+T
x9Q1LTbCNLi4FtvP3QANSp3BUBVSNbWAc751suRavfgdV5c2hSRIL9UBJLUi
IoVaqoxW14is+2y6rpratuO67/V2KzMxJKmdim1bp/vBZfqT8tyxaI0Jj8Is
XXnteDdxWrZYsmi6BNWJQIX/6Gntc9eO5bW72m1ccNAypP+W/l9GRbTGk3J5
wu5SavCxA1tuHQe08zrz5H7IIOZOKpR92IIf6pajwIFePxwHBlTbchLUoGOr
WPDKNP06fCry5ymVG7BvjjwN5Zt0pVAd2Pf+39TuttdnsDfka/M2CPaNishp
jmVx1BjHvBsGtUFC+y4jY96rGi5a5+68P2rR0TzY7mjrwnpHUwd027INSR74
P4Rfwf/pDeSEuKQTct0I/hWierYPZo0d7AaDp1ihgw/2AO598F7tTPtW6B30
E0MYLbDBEL9iE1vnyXaljowYPzK7KRxz7MamJWoJu8IqqR2gya4Hapz2Bbco
s7gDtkRQk02VhemK5fAK7SluMkNbb9rpYfQHqpfmCP6aSUfnkWBuNJc6o5ff
IppzHB7rNV5KI68Iqa6YyacALByWcGUhx/Fb3g2qYLIJh9jZzBQcXHeb6+xt
pbzzkWE0J5MiBfUfcrVGcUE2ekDDj47j6zka6gtJP/U+LzstHXDEgEQCugYw
6cxaaUg2OyRZTzFoC1by0klwx8eijtr6YRDzvTkh6gW/zyafGiur/qo9x/FW
9cXfYpzZ+YdeadbZNwTGY1qLlI0iN6Hb95oH6Xo0XCMCTdSSW+did0Z/EWzp
VVS3CsU1KDiVHY8uS+XM9pN0rf1K/S3q/tWL8OLZy6dPnj15fqWhdr0c5469
x7On1oDlM2bmFfUReeZodK6/3g2dMMS3F6N8LrFItfHPGmraVNmLkBrd3hqm
vJO5vwhmCZgxDAZ+FTjOVpPagksIlI22QBe/KbMZRsVyyyLPOqSIbT9xsXXG
u79AZhXEHwMShsogdUIHe2sqQ0yuKH8KTlRMvRxh5anmFLR+4i7JL2F96/0l
PLd1Hal0sRQowf8f9PC/9BWnFgV9+HG3LgGqBLRDxYAYRBVixcN8pDyTQgNY
YNZk7DNigoF07+oYrT1hg9KWgAmG8qGja7R+h5VPqThuKZVhSmen17WrKBqG
JbhVEd2kqc/KtPI+4mI9qqI8mtaUq8RUTZCzZNOpQjqSdVRqz0K513vkhynV
fZpeSIjVYyRLwgSdU+gWvqd4dWEPNlKJkG4duvScMHefIVv6aD1LtrTTZ0qK
4bAVKjDAIvzKqxcSvnWiPWydCtvSPAPd9WPgd0enM+8zPHaQ8uo3dDZP7cnp
GUuRB45Nl2MXotP3XZ1YSL1OmHLMCMGe4awLqe6b0y4uaOpU9WMLVM3kUtOU
K0w41ZYW0aeIdiSUwQ4kbjMdCmb2dpTkqkCTxJ4+Uclr79KoI2Q642S2XZv5
GJGE4Zy6drWn95lIDRnwIrHIg+7nOdkTQfNOUBA4LylaLIxByS/d516yq2u1
tcWShK/I2GsquOr6VVjkY2W01nvyUct6+wxkG9AZzJ1H2wn0Kl2r21tcoG59
e5PHUQXyZ/cU6yTf3pKPjJaCXfD0IVNWAGO8QM84CV9v0wR2gLbufpBVgcaD
ezSWhT8Jh27jgP7ztYS7ky7fn8BqeJgh0ODY8hi2pFGnzYuD8QbaWnSlYw/e
BjX00QzF+XUm7jz6ahJ2wrDVO5SIucoNlHFsYvV/di9vO9ntQw1o8Wd1qKa/
EUhBO/0gpubOm5Nw1t69DMJt2PwR1AgNO0NrUGsHG8eKx66rwCygNJHAMNoP
UMB4dao4j9wmhUWuXMdDpj46oiDxQ3b1wCIQdxtlz2KumpukcWUD+HUhPGkq
3XfDUx1vw3IIg5lQ+KEnJKYS6v5WpmNEONidgp1cfnRlT6FcgXwi8UosKc/t
GzY5iKT0nkfGVcKy13kpwUE2LM4V/ByKEVE2Ad7qwtkE+NfHj1TclKeqp7KO
KkpmmHsHIef2CVdrIodAUleWOMkPL/dwNzsOVnItB3b6eln1vLE8rrOp0ae+
P1xwANqr6xp0+iSEHekPzHszQl08+Y4rg0FeKBJb7mKwXccteGOicXbWnkUZ
0MZRZMLc91vTnIir0i+K+/LF5cW/2/cd4x8xcVkUGN4/nvYOe33437DXO6H/
7VpZ6hKGXm+d8kAHpskonKdVWc/90JBwgCaId6RzXyo7pH6TNwi9Jq41KTdF
pv2wGz5GdaKNpjWeI2NYc8I2WNVwj/5O3IcET2AEU/NLWRViAJhgu0i1J2Tn
pI4VBqjMmRDmg1KLXZapWqNzqwPawD6dCigjpKW5jAMPwkW6hlPRYawwUcKe
jMqOEy+hB/O1pbQE+EA/lDRgbsT2X11qg993PPXDas6pFH1xiqnqGNfURqBH
4cFNlFYHeGVFuvLg4cmn+24HIc4SJLRj2zFbcwHJ73Fl6juTn5mw7yxpg+Uc
uan1T4/XMn1elW2hA4iCE3KmZaLRThOENqdkKSY7a0nhDsv6RoQ1XEVYiCG4
Je3ITIxI0ak+xZuUcx63OPgdz+NskHbQZsNmTaUYFwda8jRStbBaLBzQrGJT
Yh7DzmV94gr7fk80st2KeDcrjUfAmgc4UV0n+rt98spSSXw5ye3dOkv9Pf2g
L9WPOuQAr+CoZdVQc66ag2hey+VPWJUhsauNPOxunxgWQy+JvgW7IMh4UOxI
dj00GNL+ltadP6aSK7BkxFy4ud6VlFaDFxToYjzsFirrhQNM6T2tFIH4enHZ
0MZc+YR5R9eVKHHQ5juz2et8m7YOrMnRtLd1I9zu9fUwgiEai+OwOSb6TGtQ
3qldKze3gKA/3DMsLgu14zTCSmksndj1uo70dW76JGpwbfxt5QlfAnCNyQLP
zl5jccvT8Pv0m1TWQCppUO1Or19UJOvrxZ1lul4w1mUh8dLolYOIFph6kBR4
mMbcplPPNh4ElxicpEvB4EScDh6UVvwRIbiyonmHG2IXo6uyB5WJeXIqrNmi
NO5qolqFtxYVWL5uWxidTRK4dKwzpdmujrAOM0Y641xfXOJ83PnW2oxgtu5U
6zE6Ly477uci151NhAUCzzMJnQr9K4x/IbPEPHIq5sFu6VQjTXW2ChCe1fFZ
i6RSGkqyNUhzlIaMZn7NpscyPH15oWut0O6M38g0jAEGtRKyD9UqMXEpXxvv
4/sfXORJfq4pPyuJDDwGHoawzBWmuZgF7zhdYYSZcVXSNSj6Gi1TtRTE/Z+4
JDvSLMmzk4DFmt4lyAOiqAAqHDtoM8xbBXJX5KFk5uBOoWPg0Voxopi2cdNJ
IB2YdJIy7NOqD7RrzpaTqbDYCaXoqQw2iIojI3XWycjeTuQXL0LN3s0ugn3w
Omcjli5wb49CeDGDlZVf06TGD8+fX757+erJNxf/3tFtk5zus8IyYY/uNYYh
OBzCyEc9wnf24ETvDi9lqz90ilrAQPzSlkLzq2eSfCPX9MKvGMyFYxw6PMFr
oZ4hd+qEyq/CbzVnG379Ck4BeYUOOAfRDykabL3eSokn06J8pC28RokN9tiC
nSuGNqZsnJ/HSxSofgSirZplcWs6vLddltdb9OtiiF6epXylGzpIN+gPw2KP
VLY0WrB0gva7DJRSriHgeHLK98BxoFlLEWjO1bY1cK0YIsqmlqyCR1bVRTki
teBfevZzVAhQ/YrwdqJ1ipwPfXpGGTfKVmlbrDLhongfVuQbVFGRNsfJiPd9
huDUt8nzdYns8jLnByftWY63tYI+0nfaUhvXRPACWfDldiB9FhEgI13UlGpx
sXnwSGklYBqu+qIiUVu9VhwIgiVi8ScvDpX2R3Ks3DMcLw92FwQ+aeit9cbU
gu4AclDePO7qmtKPtYp14K15PbXnwDVIsAeebuXg1qcCBODulfoQDuhiH7LQ
a9lv60dL+VNs1yfxih8gXWxXIPIwSgZT0ysU5gZEJCBCcMOsLh6xhYUEp4P4
BZ06LZHK06oM/cCIiwUTk7cmW+1X1uuRSZUvmhjTDWH/DjyZwwrp34AtMwvK
KcAoig1ZGQEsUWGYk7wZGOipia52drfDoUX8+A4H2+Dr8HuY0msc2z5smJvP
o92LxfdKvb+lDdp8Xiyg5S1t2k/9jWZP5A6fl7jb39KOj+VW8gYtc2FL8A86
+XzPP2PmMsbolinrrgYd2Fx2J2Gv251Ay5aJ65ZDlGhbtFFD28HwVhBC9ILC
qRLvrKL24+O724stTtrXzPIOPAjMqOPa298Ge7CMTcfQkxS9P09LGCKDl36T
iTHY+9OWme813FvY6yb8UNJPWhZRC2qmcN8Hifdu7N2J9hl//sFMny3E+Fko
AbLVG9kN9HYbdrCpj5cEq9mxMe5ym8GvDqvr/EOuisO/erS7XGL+h/9iIjbw
Grd8/urSyQV73jMRshPhAYlMKwRtE5US6UZVq42d1zmf0EgU+Og8vAWTjpL2
VEUbSzSSYU+nJhsu1ERIzRRsEWUNoGZ/qSGoZpuV69d03BQZNckNZe2QjuW3
UGyeZR1XeuGbI1WxxMqkBShylfXMlG41dX8Va8sn4QpYFWm7FivwPhOs9VXo
C3GMYfmQjM22HME+I3LDhKubhtR2D0P2J8SQ2jDTDYcDfOBqgfo7c8LEzHeD
K0ydoepKGj0P6bg2GY+HYwTDNIBTwx7pu2eJW1DKC841FERCSy3azFyCx+fl
UK5ubfoEHF4JbhP494IqMR/agvOZ3Jxyx9DGvGyH/L3DvRqxXrdn1H9KkSgj
KGyo52nNRPCDLm751lxYISG8Omy3NRCy1BHL96jyilA35sQ15sh4aTKdWDw6
FZO7LVWzUncC2mvhqamOBro3YMwvbmvfSzjYnrdvndydlq77rFake9evNaBr
T3dSKmnv+7vx0JKGtQcbArENiXezp5pBGS4GX9pLtuxHHFInL2zkHe1HL0BQ
FWhzoubzPF/VaiSZgsPQwOZm1V9enLu5YDggadNWE2z297KmBnLbj7Ckjfk7
6VjOBDHoz58DZhg16iQ79YkccCkdaz9IlJjl0Y+Fxi2IZZMTHfeuSfk3KZa5
74IVg0TJp2Tapht5G3y/HF34ZC7CjqC1d5VD/SPtDqBcXFPqsA5Ow2dzeyaC
g/JGWkw+5zQNe084AnvNNy3bO7pJTajcy8NvGTh0BtT7Li0CZhNX2o2Ht0Zm
1SFFP5CE7XqpS3b9HXbHqzBQ027c0+FG1LbUYzZlpRt1me+dU9BCgRawrJ6w
orGc0k2M9cGlPIFA8LJxr8YnbZ37v2rdLhvQlGhMoouRW97xFRUp33iKpYHv
zCZoLF/q3hregkWMo1/Q7R0cRv8Lhs//ABId49D5AgL4Oe6EA3pyAdNdYXF+
fjikh89y4KR8FYWXh6+oXjm8nHTCPr188vQb+DnVP/F4dqhPR2hrBgUq11Fc
7ZtvL3zIhe0fUQCqufmGy27pXH06O7FH4cXzp38z2iahhfyGzMdSSVOxxuNn
A1m0ebeI22s1SR13jjMN90FJsU4Ss0GhCHTdXEVZemhPlKcLqqEsfIru6ebi
ONLU4cHfMgWELPQCY9AQY4xUbZO3Ac+ezrbOEz4YvtICLuXVoOsoqhzT6hHB
tfu6bY6djkH0Lr80UsIr/+aa6vRurS0rP+vbsAXjid5vnUUQRcBJc+Z/JuiT
QkCfZFRttvazB785gZuSOI54nZw40TTbbKvSy/jW5UeOWkNFjyxo527Nyo+B
A7JkqrLprbU9zh1ff/1XbPXR5qjSxsLFCjSZUfFPglMCzkt9C4iDOCo92zaQ
SZtSeF/TId1pRMESG768jeWkvh/XrJCW1mxppsGj0jQ/POSgMn3HMdWncGrr
QO9sd5FP5XRlu6ftiVjeXqDasVs4cQdfv2TcDYbUUPJ62ylXLJLb9PZgAeFg
5DrBlNmtY/AdabaesoZIJH+atY/FE6cd3M635RubVWla0UR0Rp2fclmvSHxL
6iwO0q6LUxaIpdKWI0Pq1V3B8k5qU21JrjtuLoxeQUen+Lc6cHpfpe+VeU5H
LOqSO8HCU4cgX3lL7/jmSbIMYmO5nIejHMp6OJTglW+uNMElJV8XCqqnjYO2
N0B0wzMefIuXNcgGoK9Tm9srGFMxGpVcSZhL5ui70NNCT6HLsFLEA5fVSMk7
T5lKaSV36fG62SijsxfnT87cqyeb5/uVvgc5Q6UEVMIEK0ei2SPTZR15Mzp3
XE/mJmWdzFG4AgEje/Gespu05MQ+uYQGTnxzk+khtctZSTMnZNrP+LIn9FXz
dUyO09AMIrEAHOnVni6Ih+vzH3qoYkjG4F35gTo3EJty/ABguEuZgmazQoXH
lr8U76ZlI12gmmodU+lPLsRj9fkupQaepRuUQKAM8W5BtrJzJX/TNeCUCYhM
hjcTOX8q3db+5vYjgpPSDZQ7G1xdeU5ayZj1OKre9gvwKxbfgyav6QaiUlQ8
TOLmCqi6ZDybZfC+WvjqBd1MVx+F76vTLdFlirEtqEwsGne4+gtcSqgMX4XO
wSUa58GpPQz5dWdxThQEh7WTyExMD2ydcK421CKpgD9f0TdmFN2YLG6vX12U
RD+WeLxM0wveW24lKY+80G0m+q6M+4vWIn4x2/4v4TcEgnP4k3JXPD+TSsLd
sf7NU3Z6a5PL+3tmFJqOOaqHiBPQzn/YdXSUZros7vTJJcVBmFhK2pSNOu7e
5LCVK6H9wvzOzasyROTrVE7pMQamrI1hLNvMOzosIw/dpPtEzlNzBZtvCvMn
p7XK7Cc1e15mPRnornbulSXJqO/7pPwHyru9McEJEthCZ7MgeIHnYM6CQS3A
xNVauzojpnU7B+HVaSvCIJdD8kKQpOEt2hTkNLAUSmkgMGxBpA4tmRsr65Rh
1og3t10Yddb5ePB35o2BOQu6IDR+/twLT2i+F8mPH2kAfkMoUBkHdNMq7aMi
GUvzzqcNp9986nDNsXotvz93cr3GcJ874n3n544YYBgYLN5D4b9H+gaXVB+0
ibsG4UPhtkc6YMdwgA4llO0MxI7e2YBwjhLl/LJV7rpIeiwCROerBRwxv4kH
zBQ/4fwmdwArgjA7oW2oWySO3pzvKXT+IOLg78m5Q825y5/SDfwHTrfttKxR
xfPD1vK1ptZbOzjb9zl/O4ffg/uPTs3l+/t1cba3gxF9vfppdP/hobF8qwe/
7fOzPR9P5ct19CkjryP52g59SweNseFzl+Pl9X6m91q0cb3WVwOroLJ9zdEq
F1syu5EuTh+J8hoY1XUrqqu+79Ior6yJYu2S01fPL57/6wnHU7a24u2eD2bo
KSDdNKvs7Z47U1CfVajDlvvEJUkEsxkS4Kyo0qqQvmx0DhvrTZpgehxd0Awn
M5BJVHGbT0lGedaHwPAmLygFApcA73y0F1Sjc3Rw0kefqXP5JTTl4y/mpkxG
3Gx0MnSaBcEeFOwXdYn6XyzmxlrMCUp/0cUZybYHjBM6nBNq3kuUbk/gpsbq
rC+S1CtZyhBGGP13jsJDICEZtt/Xr7Hts12eP79fD0+yvT2wi6CUi0zvBEK7
ENweNAx3dyJw+J14MixRtyot+n1delFElCDeDZTp2NvSr/NUrn40JlW2En2I
0pVUNBIC/Y5S2m83URAx/BKSOQKTKCajWWgsNgyJbjMwRLQtVoGQjwCLAUBR
jLygsOlpMU9BiKF9ht6TZcUyqrgKzEd4DYaIYbYBBGIKQAmsb9pmeUwFb2+X
5a1F7dtv8DIWw0aASOXVDmq7xqzlzhOvOgvXCuCkMDQDxihQFlsUgXLpmXy2
qyjLz1wThqWWkNs4jFG6SO0lxHw5nJjRnZvB6i5SU3SodeqfXHGorZPWAOa2
hk7NIXjdLDrkPnSqDsHjZtkh9yHXHfK7pDgE/0sMQgj8QaiUS60QS6OYij8W
flIPauZ6Rj4At4eueFA4xYjqmHHd1LjW+7xRtaneOXhrJaQ6qu87+Esf5qho
Vj+4tWIS07ithOAxDSsetUVyr0qw1QeR+ahipR1CMmR5ACdjj1u7wW0e+tpL
OKDDJGbpEL23md9WQtw+jk6FwmkZyxdlPL1SmK7U/JxeARMVlYkxUYkTHUI7
Sr0alB4C76E+0/moHNV0yn6CEH0RAl3rdaIkW0H7Qcu/vS6J5EEpN4O4JWoE
XSzWbATAl4uFv1ws/FteLBzsv1Xva9xhfwsQ6l3xwI3unMdul7XW/Zbn2pTW
fNSTZ7Zb9NhLVN+3ilIhdZCfdsCeNGIHQpBty9AJ83sbBPIxdPdQhzbwRRfQ
Tq031e5dXryTQk0/qeTdOtpwZ6CtOU2vqRt8GzwKAvvLyIR/RSdxGr/zgP0q
BIUWNP2v/yrFKPFSxD2jmmpjxAPOCEduFbJeENRG0jP7Z1CBOXhBjkYdujJG
2+ucaDxuPcDWP/yZAHxLl978xVxMirxGjYbYSCI1qAooNpLKNliZiluNsNWc
h+R/f8FCnI0hxy3tLr7jd5OWdy8xgAgdxdJmim0MhfHNJ0cwB//RW/jyjC+z
s/eEwKq5Ut/yDSD0y9WiX64W/V2vFv1yQ1XLDVWfOOLvdKHVl7tOvtx18uWu
E+/fl7tOpD0xxB+vgPU/XkXgLyWBOTtrbz3gT6u9+xtUA/67AvSPUwv4S+2L
ln9fal/8IWpf7M2K/W9Kir0r/fQzsk8/Nfn09tzT21NPPzXz9J6Jp3+ovNO/
b/qPL+t/4xwgL3dnf+rP/zLfXkDR7Hp6jAQx6AWS4vT8xdUT3qfdWnJR4Zb0
iMrwIMp2B3ypBUXykj+lAlaS+oVCMo6zRV+8yknI5ANfrbxblXWypxOjQ8VB
dQ129grxAb+U4uz7LjdHvzlublSVrEQf+uuMry+2JdUodAj90sIXnHjd6uE5
avfxwPM+LPQ3E6TWLUznqCPNzSBH4eAkvH4QDXt9+J8B/M941sdfs/6oP+z1
Bv3ZYNwbzkajUQQt4Ndx1FtMxrNBbxZHi+PBbDjvDyeTSRyN1Li3mEZ9pdRs
Mo9GvflYTaJ+Moij4fFiOjqezSfRJJrO1SyZJZPpA+QDsy+8aZgx34QEvbNb
v7EWzTcIt/fKGIHehOMTY4znfz83tp83DasHPOrDd9cPhr0Hb5v71RvX6sHD
D6e3NBPJ8iYc1oFxmhqL/RugWEHvAfxowms/ilZLBBUwM+ojRq6jw8F4Er5p
/eQjtGjfe994HgMY8uO+dtqB8QYJ6Q0R0r6m6M94A+T0q0mj0f9b78nHwH/+
ERRCERCvopvQ5ZGTYDKgRKYyAAwPxrNh9HsQO8XJPDk7vzxFRW0DK1b0D+/m
+NPaS70WiY0wohCUjisAJNw70+Npp0IXL4any0I9bwe1vtxyANC/wZsLV0x9
jsw5Cf90PHtoqf7IofQjII/Tfm8IyD31JQCTkOuuQe5BOh8g2buefuipOgT5
r6J1jfCBEhyCP/KI/Mgj8iODzKMaTR9ZlJXosPEGaPJyy+z6g0lzbnaOloUP
p/AHL1M7E7dwZWNSraMche9TfDtCb+CD8XAaxcdD+L/esZoeH8N/+qM4inq9
hZpNgYijyXCqFrPj+XjcH6hxPJ+o8XgWAbUvFsezpMmQPqJbUEe4GPZG495g
0Osnk/HxcKbi0Xg0HI+iCXDNZD6azNTxrDdL5iO1GE7U8TRRvWMYb5FExwN1
HPfUcNgbLOIZ9NHv9aLFYjbtLxRwbTJcTOazYT+ZjtRosjiO4mQa9fpjgHo0
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
bZP7Z4P/D/OQRs5u6wAA

-->

</rfc>

