<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-00" category="std">

  <front>
    <title abbrev="SUIT Trust Domains">SUIT Manifest Extensions for Multiple Trust Domains</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2022" month="March" day="07"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes extensions to the SUIT manifest format (as
defined in <xref target="I-D.ietf-suit-manifest"/>) for use in deployments with
multiple trust domains. A device has more than one trust domain when it
uses different trust anchors for different purposes or components in the
context of firmware update.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Devices that go beyond single-signer update require more complex rules for deploying firmware updates. For example, devices may require:</t>

<t><list style="symbols">
  <t>long-term trust anchors with a mechanism to delegate trust to short term keys.</t>
  <t>software components from multiple software signing authorities.</t>
  <t>a mechanism to remove an uneeded component</t>
  <t>single-object dependencies</t>
  <t>a partly encrypted manifest so that distribution does not reveal private information</t>
</list></t>

<t>These mechanisms are not part of the core manifest specification, but they are needed for more advanced use cases, such as the architecture described in <xref target="I-D.ietf-teep-architecture"/>.</t>

<t>This specification extends the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>).</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Additionally, the following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severable elements (see: TBD).</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Invocation: A process by which a system ensures that only trusted code is executed, for example secure boot or launching a Trusted Application.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies and images, and installing them.</t>
  <t>Invocation Procedure: A procedure in which a Recipient verifies dependencies and images, loading images, and invokes one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Software that is typically changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: An event in which the Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="changes-to-suit-workflow-model" title="Changes to SUIT Workflow Model">

<t>The use of the features presented for use with multiple trust domains requires some augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All dependency manifests should be present before any payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All dependencies must be validated prior to loading.</t>
</list></t>

<t>Two steps are added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t><spanx style="strong">Verify delegation chains</spanx></t>
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t><spanx style="strong">Resolve dependencies.</spanx></t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>In addition, when multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
<section anchor="metadata-structure-overview" title="Changes to Manifest Metadata Structure">

<t>To accomodate the additional metadata needed to enable these features, the envelope and manifest have several new elements added.</t>

<t>The Envelope gains two more elements: Delegation chains and Integrated Dependencies
The Common metadata section in the Manifest also gains a list of dependencies.</t>

<t>The new metadata structure is shown below.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           --------------> +------------------------------+
| Severable Elements      |          | Manifest                     |
| Human-Readable Text     |          +------------------------------+
| COSWID                  |          | Structure Version            |
| Integrated Dependencies |          | Sequence Number              |
| Integrated Payloads     |          | Reference to Full Manifest   |
+-------------------------+    +------ Common Structure             |
                               | +---- Command Sequences            |
+-------------------------+    | |   | Digests of Envelope Elements |
| Common Structure        | <--+ |   +------------------------------+
+-------------------------+      |
| Dependencies            |      +-> +-----------------------+
| Component IDs           |          | Command Sequence      |
| Common Command Sequence ---------> +-----------------------+
+-------------------------+          | List of ( pairs of (  |
                                     |   * command code      |
                                     |   * argument /        |
                                     |      reporting policy |
                                     | ))                    |
                                     +-----------------------+
]]></artwork></figure>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to establish a chain of trust from a Trust Anchor to the signer of a manifest by validating delegation claims. Each delegation claim is a <xref target="RFC8392"/> CBOR Web Tokens (CWTs). The first claim in each list is signed by a Trust Anchor. Each subsequent claim in a list is signed by the public key claimed in the preceding list element. The last element in each list claims a public key that can be used to verify a signature in the Authentication Block (See Sectino 5.2 of <xref target="I-D.ietf-suit-manifest"/>).</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation element MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with a CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band provisioning of Trust Anchors or intermediary keys.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
</section>
<section anchor="dependencies" title="Dependencies">

<t>A dependency is another SUIT_Envelope that describes additional components.</t>

<t>Dependency manifests enable several additional use cases. In particular, they enable two or more entities who are trusted for different privileges to coordinate. This can be used in many scenarios, for example:</t>

<t><list style="symbols">
  <t>An IoT device may contain a processor in its radio in addition to the primary processor. These two processors may have separate firmware with separate signing authorities. Dependencies allow the firmware for the primary processor to reference a manifest signed by a different authority.</t>
  <t>A network operator may wish to provide local caching of update payloads. The network operator overrides the URI of payload by providing a dependent manifest that references the original manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new firmware version before releasing it. The configuration is delivered as a binary in the same way as a firmware image. The device operator references the firmware manifest from the firmware author in their own manifest which also defines the configuration.</t>
</list></t>

<t>By using dependencies, components such as software, configuration, models, and other resoruces authenticated by different trust anchors can be delivered to devices.</t>

<section anchor="required-checks" title="  Changes to Required Checks">

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling dependencies. By default, any signature of a dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different componetns), it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>If the manifest contains more than one component and/or dependency, each command sequence MUST begin with a Set Component Index or Set Dependency Index command.</t>

<t>If a dependency is specified, then the manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by one update, that is: a single manifest and all its dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="changes-to-abstract-machine-description" title="Changes to Abstract Machine Description">

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>
With the addition of dependencies, some changes are necessary to the abstract machine, outside the typical scope of added commands. These changes alter the behaviour of an existing command and way that the parser processes manifests:</t>

<t><list style="symbols">
  <t>All commands may target dependency manifests as well as components. To support this behaviour, there is a new command instroduced: Set Dependency Index. This change works together with Set Component Index to choose the object on which the manifest is operating.</t>
  <t>Dependencies are processed in lock-step with the Root Manifest. This means that every dependency’s current command sequence must be executed before a dependent’s later command sequence may be executed. For example, every dependency’s Dependency Resolution step MUST be executed before any dependent’s payload fetch step.</t>
</list></t>

<t>The logic of Set Componment Index is modified as below:</t>

<t>As in <xref target="I-D.ietf-suit-manifest"/>, To simplify the logic describing the command semantics, the object “current” is used. It represents the component identified by the Component Index or the dependency identified by the Dependency Index:</t>

<figure><artwork><![CDATA[
current := components\[component-index\]
    if component-index is not false
    else dependencies\[dependency-index\]
]]></artwork></figure>

<t>As a result, Set Component Index is described as current := components[arg]. The actual operation performed for Set Component Index is described by the following pseudocode, however, because of the definition of current (above), these are semantically equivalent.</t>

<figure><artwork><![CDATA[
component-index := arg
dependency-index := false
]]></artwork></figure>

<t>Similarly, Set Dependency Index is semantically equivalent to current := dependencies[arg], but the actual operation performed is:</t>

<figure><artwork><![CDATA[
dependency-index := arg
component-index := false
]]></artwork></figure>

<t>Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies.</t>

</section>
<section anchor="index-true" title="Changes to Special Cases of Component Index and Dependency Index">

<t>The considerations that apply in Special Cases of Component Index and Dependency Index (Section 6.5) of <xref target="I-D.ietf-suit-manifest"/> are augmented to include Dependency Index as well as Component Index.</t>

<t>The target(s) assigned for each command are defined by the following pseudocode.</t>

<figure><artwork><![CDATA[
if component-index is true:
    current-list = components
else if component-index is array:
    current-list = [ components[idx] for idx in component-index ]
else if component-index is integer:
    current-list = [ components[component-index] ]
else if dependency-index is true:
    current-list = dependencies
else if dependency-index is array:
    current-list = [ dependencies[idx] for idx in dependency-index ]
else:
    current-list = [ dependencies[dependency-index] ]
for current in current-list:
    cmd(current)
]]></artwork></figure>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies’ sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>If the specified dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The Manifest Processor MUST also support a Dependency Index of True, which applies to every dependency, as described in <xref target="index-true"/></t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains, each domain might require independent verification of authenticity or security policies. Security domains might be divided by separation technology such as Arm TrustZone, Intel SGX, or another TEE technology. Security domains might also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module might require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains (see <xref target="I-D.ietf-teep-architecture"/>), a manifest processor might be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

<t>This mechanism ensures that the two or more manifest processors do not need to trust each other, except in a very limited case. When parameter setting across security domains is used, it must be very carefully considered. Only parameters that do not have an effect on security properties should be allowed. The dependency manifest MAY control which parameters are allowed to be set by using the Override Parameters directive. The second manifest processor MAY also control which parameters may be set by the first manifest processor by means of an ACL that lists the allowed parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the manifest.</t>

</section>
</section>
<section anchor="added-and-modified-commands" title="Added and Modified Commands">

<t>All commands are modified in that they can also target dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be one of three types:</t>

<t><list style="numbers">
  <t>An unsigned integer (REQUIRED to implement in parser)</t>
  <t>A boolean (REQUIRED to implement in parser ONLY IF 2 or more components supported)</t>
  <t>An array of unsigned integers (REQUIRED to implement in parser ONLY IF 3 or more components supported)</t>
</list></t>

<t>If the following commands apply to ONE component, an unsigned integer index into the component list is used. If the following commands apply to ALL components, then the boolean value “True” is used instead of an index. If the following commands apply to more than one, but not all components, then an array of unsigned integer indices into the component list is used.
See <xref target="index-true"/> for more details.</t>

<t>If the following commands apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

<t>If component index is set to True when a command is invoked, then the command applies to all components, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the component index is set to True, it must execute the command once for each possible component index, ensuring that the command receives the parameters corresponding to that component index.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies, or an array of unsigned integer indices into the list of dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>If dependency index is set to True when a command is invoked, then the command applies to all dependencies, in the order they appear in suit-common-components. When the Manifest Processor invokes a command while the dependency index is set to True, the Manifest Processor MUST execute the command once for each possible dependency index, ensuring that the command receives the parameters corresponding to that dependency index. If the dependency index is set to an array of unsigned integers, then the Manifest Processor MUST execute the command once for each listed dependency index, ensuring that the command receives the parameters corresponding to that dependency index.</t>

<t>See <xref target="index-true"/> for more details.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” then the command sequence MUST be terminated with an error.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
</section>
<section anchor="suit-directive-unlink" title="suit-directive-unlink">

<t>suit-directive-unlink marks the current component as unused in the current manifest. This can be used to remove temporary storage or remove components that are no longer needed. Example use cases:</t>

<t><list style="symbols">
  <t>Temporary storage for encrypted download</t>
  <t>Temporary storage for verifying decompressed file before writing to flash</t>
  <t>Removing Trusted Service no longer needed by Trusted Application</t>
</list></t>

<t>Once the current Command Sequence is complete, the manifest processors checks each marked component to see whether any other manifests have referenced it. Those marked components with no other references are deleted. The manifest processor MAY choose to ignore a Unlink directive depending on device policy.</t>

<t>suit-directive-unlink is OPTIONAL to implement in manifest processors.</t>

</section>
</section>
<section anchor="SUIT_Dependency" title="SUIT_Dependency Manifest Element">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>This section details a set of templates for creating manifests. These templates explain which parameters, commands, and orders of commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency" title="Dependency Template">

<t>The goal of the Dependency template is to obtain, verify, and process a dependency manifest as appropriate.</t>

<t>The following commands are placed into the dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/> of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementer MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a manifest so that it can be used as a dependency. To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/></t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a composite manifest (<xref target="composite-manifests"/>).</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>&#160;</ttcol>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>&#160;</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>&#160;</c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
      <c>&#160;</c>
</texttable>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format protecting and describing how to retrieve, install, and invoke firmware images and as such it is part of a larger solution for delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC3986' target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author fullname='T. Berners-Lee' initials='T.' surname='Berners-Lee'><organization/></author>
<author fullname='R. Fielding' initials='R.' surname='Fielding'><organization/></author>
<author fullname='L. Masinter' initials='L.' surname='Masinter'><organization/></author>
<date month='January' year='2005'/>
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference anchor='RFC7228' target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='M. Ersue' initials='M.' surname='Ersue'><organization/></author>
<author fullname='A. Keranen' initials='A.' surname='Keranen'><organization/></author>
<date month='May' year='2014'/>
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference anchor='RFC8392' target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='E. Wahlstroem' initials='E.' surname='Wahlstroem'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference anchor='RFC8747' target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='L. Seitz' initials='L.' surname='Seitz'><organization/></author>
<author fullname='G. Selander' initials='G.' surname='Selander'><organization/></author>
<author fullname='S. Erdtman' initials='S.' surname='Erdtman'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<date month='March' year='2020'/>
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg'>
	 <organization>Inria</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-16'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-16.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.ietf-suit-information-model'>
   <front>
      <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date day='8' month='July' year='2021'/>
      <abstract>
	 <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.

 One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-13'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-information-model-13.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-suit-firmware-encryption'>
   <front>
      <title>Firmware Encryption with SUIT Manifests</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This document specifies a firmware update mechanism where the
   firmware image is encrypted.  Firmware encryption uses the IETF SUIT
   manifest with key establishment provided by the hybrid public-key
   encryption (HPKE) scheme and the AES Key Wrap (AES-KW) with a pre-
   shared key-encryption key.  Encryption of the firmware image is
   encrypted using AES-GCM or AES-CCM.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-firmware-encryption-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-firmware-encryption-03.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-teep-architecture'>
   <front>
      <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
      <author fullname='Mingliang Pei'>
	 <organization>Broadcom</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Dave Thaler'>
	 <organization>Microsoft</organization>
      </author>
      <author fullname='David Wheeler'>
	 <organization>Amazon</organization>
      </author>
      <date day='28' month='February' year='2022'/>
      <abstract>
	 <t>   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-16'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-teep-architecture-16.txt' type='TXT'/>
</reference>




    </references>


<section anchor="full-cddl" title="A. Full CDDL">

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><artwork type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= SUIT_Integrated_Dependency

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

SUIT_Integrated_Dependency = (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)
suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution => \
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
        suit-dependencies => SUIT_Dependencies
)

SUIT_Dependencies         = [ + SUIT_Dependency ]

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Directive //= (
    suit-directive-set-dependency-index, IndexArg)
SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-delegation = 1
suit-dependency-resolution = 7

suit-dependencies = 1

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-directive-set-dependency-index     = 13
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></artwork></figure>

</section>


  </back>

<!-- ##markdown-source:
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
q/f/fWMeP+brl/4PgGg/5juFAAA=

-->

</rfc>

