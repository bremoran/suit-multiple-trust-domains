<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-manifest-08" category="std">

  <front>
    <title abbrev="CBOR-based SUIT Manifest">A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="K." surname="Zandberg" fullname="Koen Zandberg">
      <organization>Inria</organization>
      <address>
        <email>koen.zandberg@inria.fr</email>
      </address>
    </author>

    <date year="2020" month="July" day="10"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification describes the format of a manifest.  A manifest is
a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest. Firmware updates and secure boot
both tend to use sequences of common operations, so the manifest encodes
those sequences of operations, rather than declaring the metadata. The
manifest also serves as a building block for secure boot.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>A firmware update mechanism is an essential security feature for IoT devices to deal with vulnerabilities. While the transport of firmware images to the devices themselves is important there are already various techniques available. Equally important is the inclusion of metadata about the conveyed firmware image (in the form of a manifest) and the use of a security wrapper to provide end-to-end security protection to detect modifications and (optionally) to make reverse engineering more difficult. End-to-end security allows the author, who builds the firmware image, to be sure that no other party (including potential adversaries) can install firmware updates on IoT devices without adequate privileges. For confidentiality protected firmware images it is additionally required to encrypt the firmware image. Starting security protection at the author is a risk mitigation technique so firmware images and manifests can be stored on untrusted repositories; it also reduces the scope of a compromise of any repository or intermediate system to be no worse than a denial of service.</t>

<t>A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, the devices to which it applies, and cryptographic
information protecting the manifest.</t>

<t>This specification defines the SUIT manifest format and it is intended to meet several goals:</t>

<t><list style="symbols">
  <t>Meet the requirements defined in <xref target="I-D.ietf-suit-information-model"/>.</t>
  <t>Simple to parse on a constrained node</t>
  <t>Simple to process on a constrained node</t>
  <t>Compact encoding</t>
  <t>Comprehensible by an intermediate system</t>
  <t>Expressive enough to enable advanced use cases on advanced nodes</t>
  <t>Extensible</t>
</list></t>

<t>The SUIT manifest can be used for a variety of purposes throughout its lifecycle, such as:</t>

<t><list style="symbols">
  <t>the Firmware Author to reason about releasing a firmware.</t>
  <t>the Network Operator to reason about compatibility of a firmware.</t>
  <t>the Device Operator to reason about the impact of a firmware.</t>
  <t>the Device Operator to manage distribution of firmware to devices.</t>
  <t>the Plant Manager to reason about timing and acceptance of firmware updates.</t>
  <t>the device to reason about the authority &amp; authenticity of a firmware prior to installation.</t>
  <t>the device to reason about the applicability of a firmware.</t>
  <t>the device to reason about the installation of a firmware.</t>
  <t>the device to reason about the authenticity &amp; encoding of a firmware at boot.</t>
</list></t>

<t>Each of these uses happens at a different stage of the manifest lifecycle, so each has different requirements.</t>

<t>It is assumed that the reader is familiar with the high-level firmware update architecture <xref target="I-D.ietf-suit-architecture"/> and the threats, requirements, and user stories in <xref target="I-D.ietf-suit-information-model"/>.</t>

<t>The design of this specification is based on an observation that the vast majority of operations that a device can perform during an update or secure boot are composed of a small group of operations:</t>

<t><list style="symbols">
  <t>Copy some data from one place to another</t>
  <t>Transform some data</t>
  <t>Digest some data and compare to an expected value</t>
  <t>Compare some system parameters to an expected value</t>
  <t>Run some code</t>
</list></t>

<t>In the SUIT manifest specification, these operations are called commands. Commands are classed as either conditions or directives. Conditions have no side-effects, while directives do have side-effects. Conceptually, a sequence of commands is like a script but the used language is tailored to software updates and secure boot.</t>

<t>The available commands support simple steps, such as copying a firmware image from one place to another, checking that a firmware image is correct, verifying that the specified firmware is the correct firmware for the device, or unpacking a firmware. By using these steps in different orders and changing the parameters they use, a broad range of use cases can be supported. The SUIT manifest uses this observation to optimize metadata for consumption by constrained devices.</t>

<t>While the SUIT manifest is informed by and optimized for firmware update and secure boot use cases, there is nothing in the <xref target="I-D.ietf-suit-information-model"/> that restricts its use to only those use cases. Other use cases include the management of trusted applications in a Trusted Execution Environment (TEE), see <xref target="I-D.ietf-teep-architecture"/>.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>The following terminology is used throughout this document:</t>

<t><list style="symbols">
  <t>SUIT: Software Update for the Internet of Things, also the IETF working group for this standard.</t>
  <t>Payload: A piece of information to be delivered. Typically Firmware for the purposes of SUIT.</t>
  <t>Resource: A piece of information that is used to construct a payload.</t>
  <t>Manifest: A manifest is a bundle of metadata about the firmware for an IoT device, where to
find the firmware, and the devices to which it applies.</t>
  <t>Envelope: A container with the manifest, an authentication wrapper with cryptographic information protecting the manifest, authorization information, and severed fields.</t>
  <t>Update: One or more manifests that describe one or more payloads.</t>
  <t>Update Authority: The owner of a cryptographic key used to sign updates, trusted by Recipients.</t>
  <t>Recipient: The system, typically an IoT device, that receives and processes a manifest.</t>
  <t>Manifest Processor: A component of the Recipient that consumes Manifests and executes the commands in the Manifest.</t>
  <t>Component: An updatable logical block of the Firmware, Software, configuration, or data of the Recipient.</t>
  <t>Component Set: A group of interdependent Components that must be updated simultaneously.</t>
  <t>Command: A Condition or a Directive.</t>
  <t>Condition: A test for a property of the Recipient or its Components.</t>
  <t>Directive: An action for the Recipient to perform.</t>
  <t>Trusted Execution: A process by which a system ensures that only trusted code is executed, for example secure boot.</t>
  <t>A/B images: Dividing a Recipient’s storage into two or more bootable images, at different offsets, such that the active image can write to the inactive image(s).</t>
  <t>Record: The result of a Command and any metadata about it.</t>
  <t>Report: A list of Records.</t>
  <t>Procedure: The process of invoking one or more sequences of commands.</t>
  <t>Update Procedure: A procedure that updates a Recipient by fetching dependencies, software images, and installing them.</t>
  <t>Boot Procedure: A procedure that boots a Recipient by verifying dependencies and images, loading images, and invoking one or more image.</t>
  <t>Software: Instructions and data that allow a Recipient to perform a useful function.</t>
  <t>Firmware: Instructions and data that allow a Recipient to perform a useful function. Typically, changed infrequently, stored in nonvolatile memory, and small enough to apply to <xref target="RFC7228"/> Class 0-2 devices.</t>
  <t>Image: Information that a Recipient uses to perform its function, typically firmware/software, configuration, or resource data such as text or images. Also, a Payload, once installed is an Image.</t>
  <t>Slot: One of several possible storage locations for a given Component, typically used in A/B image systems</t>
  <t>Abort: The Manifest Processor immediately halts execution of the current Procedure. It creates a Record of an error condition.</t>
</list></t>

</section>
<section anchor="how-to-use-this-document" title="How to use this Document">

<t>This specification covers five aspects of firmware update:</t>

<t><list style="symbols">
  <t><xref target="background"/> describes the device constraints, use cases, and design principles that informed the structure of the manifest.</t>
  <t><xref target="metadata-structure-overview"/> gives a general overview of the metadata structure to inform the following sections</t>
  <t><xref target="interpreter-behavior"/> describes what actions a Manifest processor should take.</t>
  <t><xref target="creating-manifests"/> describes the process of creating a Manifest.</t>
  <t><xref target="metadata-structure"/> specifies the content of the Envelope and the Manifest.</t>
</list></t>

<t>To implement an updatable device, see <xref target="interpreter-behavior"/> and <xref target="metadata-structure"/>.
To implement a tool that generates updates, see <xref target="creating-manifests"/> and <xref target="metadata-structure"/>.</t>

<t>The IANA consideration section, see <xref target="iana"/>, provides instructions to IANA to create several registries. This section also provides the CBOR labels for the structures defined in this document.</t>

<t>The complete CDDL description is provided in <xref target="full-cddl"/>, examples are given in <xref target="examples"/> and a design rational is offered in <xref target="design-rationale"/>. Finally, <xref target="implementation-matrix"/> gives a summarize of the mandatory-to-implement features of this specification.</t>

</section>
<section anchor="background" title="Background">

<t>Distributing firmware updates to diverse devices with diverse trust anchors in a coordinated system presents unique challenges. Devices have a broad set of constraints, requiring different metadata to make appropriate decisions. There may be many actors in production IoT systems, each of whom has some authority. Distributing firmware in such a multi-party environment presents additional challenges. Each party requires a different subset of data. Some data may not be accessible to all parties. Multiple signatures may be required from parties with different authorities. This topic is covered in more depth in <xref target="I-D.ietf-suit-architecture"/>. The security aspects are described in <xref target="I-D.ietf-suit-information-model"/>.</t>

<section anchor="iot-firmware-update-constraints" title="IoT Firmware Update Constraints">

<t>The various constraints of IoT devices and the range of use cases that need to be supported create a broad set of urequirements. For example, devices with:</t>

<t><list style="symbols">
  <t>limited processing power and storage may require a simple representation of metadata.</t>
  <t>bandwidth constraints may require firmware compression or partial update support.</t>
  <t>bootloader complexity constraints may require simple selection between two bootable images.</t>
  <t>small internal storage may require external storage support.</t>
  <t>multiple microcontrollers may require coordinated update of all applications.</t>
  <t>large storage and complex functionality may require parallel update of many software components.</t>
  <t>extra information may need to be conveyed in the manifest in the earlier stages of the device lifecycle before those data items are stripped when the manifest is delivery to a constrained device.</t>
</list></t>

<t>Supporting the requirements introduced by the constraints on IoT devices requires the flexibility to represent a diverse set of possible metadata, but also requires that the encoding is kept simple.</t>

</section>
<section anchor="suit-workflow-model" title="SUIT Workflow Model">

<t>There are several fundamental assumptions that inform the model of Update Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependency manifests should be present before any payload is fetched.</t>
  <t>In some applications, payloads must be fetched and validated prior to installation.</t>
</list></t>

<t>There are several fundamental assumptions that inform the model of the Boot Procedure workflow:</t>

<t><list style="symbols">
  <t>Compatibility must be checked before any other operation is performed.</t>
  <t>All dependencies and payloads must be validated prior to loading.</t>
  <t>All loaded images must be validated prior to execution.</t>
</list></t>

<t>Based on these assumptions, the manifest is structured to work with a pull parser, where each section of the manifest is used in sequence. The expected workflow for a Recipient installing an update can be broken down into five steps:</t>

<t><list style="numbers">
  <t>Verify the signature of the manifest.</t>
  <t>Verify the applicability of the manifest.</t>
  <t>Resolve dependencies.</t>
  <t>Fetch payload(s).</t>
  <t>Install payload(s).</t>
</list></t>

<t>When installation is complete, similar information can be used for validating and running images in a further three steps:</t>

<t><list style="numbers">
  <t>Verify image(s).</t>
  <t>Load image(s).</t>
  <t>Run image(s).</t>
</list></t>

<t>If verification and running is implemented in a bootloader, then the bootloader MUST also verify the signature of the manifest and the applicability of the manifest in order to implement secure boot workflows. The bootloader may add its own authentication, e.g. a MAC, to the manifest in order to prevent further verifications.</t>

<t>When multiple manifests are used for an update, each manifest’s steps occur in a lockstep fashion; all manifests have dependency resolution performed before any manifest performs a payload fetch, etc.</t>

</section>
</section>
<section anchor="metadata-structure-overview" title="Metadata Structure Overview">

<t>This section provides a high level overview of the manifest structure. The full description of the manifest structure is in <xref target="manifest-structure"/></t>

<t>The manifest is structured from several key components:</t>

<t><list style="numbers">
  <t>The Envelope (see <xref target="ovr-envelope"/>) contains Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any Integrated Payloads or Dependencies.</t>
  <t>Delegation Chains (see <xref target="ovr-delegation"/>) allow a Recipient to work from one of its Trust Anchors to an authority of the Authentication Block.</t>
  <t>The Authentication Block (see <xref target="ovr-auth"/>) contains a list of signatures or MACs of the manifest..</t>
  <t>The Manifest (see <xref target="ovr-manifest"/>) contains all critical, non-severable metadata that the Recipient requires. It is further broken down into:  <list style="numbers">
      <t>Critical metadata, such as sequence number.</t>
      <t>Common metadata, including lists of dependencies and affected components.</t>
      <t>Command sequences, directing the Recipient how to install and use the payload(s).</t>
      <t>Integrity check values for severable fields.</t>
    </list></t>
  <t>Severable fields (see <xref target="ovr-severable"/>).</t>
  <t>Integrated dependencies (see <xref target="ovr-integrated"/>).</t>
  <t>Integrated payloads (see <xref target="ovr-integrated"/>).</t>
</list></t>

<t>The diagram below illustrates the hierarchy of the Envelope.</t>

<figure><artwork><![CDATA[
+-------------------------+
| Envelope                |
+-------------------------+
| Delegation Chains       |
| Authentication Block    |
| Manifest           ------------> +------------------------------+
| Severable Elements      |        | Manifest                     |
| Human-Readable Text     |        +------------------------------+
| COSWID                  |        | Structure Version            |
| Integrated Dependencies |        | Sequence Number              |
| Integrated Payloads     |        | Reference to Full Manifest   |
+-------------------------+  +------ Common Structure             |
                             | +---- Commands                     |
+-----------------------+    | |   | Digests of Envelope Elements |
| Common Structure      | <--+ |   +------------------------------+
+-----------------------+      |
| Dependencies          |      +-> +-----------------------+
| Components IDs        |          | Commands              |
| Common Commands ---------------> +-----------------------+
+-----------------------+          | List of ( pairs of (  |
                                   |   * command code      |
                                   |   * argument          |
                                   | ))                    |
                                   +-----------------------+
]]></artwork></figure>

<section anchor="ovr-envelope" title="Envelope">

<t>The SUIT Envelope is a container that encloses Delegation Chains, the Authentication Block, the Manifest, any Severable Elements, and any integrated payloads or dependencies. The Envelope is used instead of conventional cryptographic envelopes, such as COSE_Envelope because it allows modular processing, severing of elements, and integrated payloads in a way that would add substantial complexity with existing solutions. See <xref target="design-rationale-envelope"/> for a description of the reasoning for this.</t>

<t>See <xref target="envelope"/> for more detail.</t>

</section>
<section anchor="ovr-delegation" title="Delegation Chains">

<t>Delegation Chains allow a Recipient to validate intermediate Update Authorities against long-term a Trust Anchor. These are lists of CWTs, where the first in the list is signed by a Trust Anchor.</t>

<t>See <xref target="delegation-info"/> for more detail.</t>

</section>
<section anchor="ovr-auth" title="Authentication Block">

<t>The Authentication Block contains one or more COSE authentication blocks. These blocks are one of:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The payload element in each of these COSE elements is a SUIT_Digest <xref target="SUIT_Digest"/>.</t>

<t>See <xref target="authentication-info"/> for more detail.</t>

</section>
<section anchor="ovr-manifest" title="Manifest">

<t>The Manifest contains most metadata about one or more images. The Manifest is divided into Critical Metadata, Common Metadata, Command Sequences, and Integrity Check Values.</t>

<t>See <xref target="manifest-structure"/> for more detail.</t>

<section anchor="ovr-critical" title="Critical Metadata">

<t>Some metadata needs to be accessed before the manifest is processed. This metadata can be used to determine which the newest manifest is and whether the structure version is supported. It also MAY provide a URI for obtaining a canonical copy of the manifest and Envelope.</t>

<t>See <xref target="manifest-version"/>, <xref target="manifest-seqnr"/>, <xref target="manifest-reference-uri"/> for more detail.</t>

</section>
<section anchor="ovr-common" title="Common">

<t>Some metadata is used repeatedly and in more than one command sequence. In order to reduce the size of the manifest, this metadata is collected into the Common section. Common is composed of three parts: a list of dependencies, a list of components referenced by the manifest, and a command sequence to execute prior to each other command sequence. The common command sequence is typically used to set commonly used values and perform compatibility checks. The common command sequence MUST NOT have any side-effects outside of setting parameter values.</t>

<t>See <xref target="manifest-common"/>, <xref target="SUIT_Dependency"/> for more detail.</t>

</section>
<section anchor="ovr-commands" title="Command Sequences">

<t>Command sequences provide the instructions that a Recipient requires in order to install or use an image. These sequences tell a device to set parameter values, test system parameters, copy data from one place to another, transform data, digest data, and run code.</t>

<t>Command sequences are broken up into three groups: Common Command Sequence (see <xref target="ovr-common"/>), update commands, and secure boot commands.</t>

<t>Update Command Sequences are: Dependency Resolution, Payload Fetch, and Payload Installation. An Update Procedure is the complete set of each Update Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Boot Command Sequences are: System Validation, Image Loading, and Image Invocation. A Boot Procedure is the complete set of each Boot Command Sequence, each preceded by the Common Command Sequence.</t>

<t>Command Sequences are grouped into these sets to ensure that there is common coordination between dependencies and dependents on when to execute each command.</t>

<t>See <xref target="manifest-commands"/> for more detail.</t>

</section>
<section anchor="ovr-integrity" title="Integrity Check Values">

<t>To enable <xref target="ovr-severable"/>, there needs to be a mechanism to verify integrity of any metadata outside the manifest. Integrity Check Values are used to verify the integrity of metadata that is not contained in the manifest. This MAY include Severable Command Sequences, CoSWID, or Text data. Integrated Dependencies and Integrated Payloads are integrity-checked using Command Sequences, so they do not have Integrity Check Values present in the Manifest.</t>

<t>See <xref target="integrity-checks"/> for more detail.</t>

</section>
<section anchor="ovr-text" title="Human-Readable Text">

<t>Text is typically a <xref target="ovr-severable">Severable Element</xref>. It contains all the text that describes the update. Because text is explicitly for human consumption, it is all grouped together so that it can be Severed easily. The text section has space both for describing the manifest as a whole and for describing each individual component.</t>

<t>See <xref target="manifest-digest-text"/> for more detail.</t>

</section>
</section>
<section anchor="ovr-severable" title=" Severable Elements">

<t>Severable Elements are elements of the <xref target="ovr-envelope">Envelope</xref> that have <xref target="ovr-integrity">Integrity Check Values</xref> in the <xref target="ovr-manifest">Manifest</xref>.</t>

<t>Because of this organisation, these elements can be discarded or “Severed” from the Envelope without changing the signature of the Manifest. This allows savings based on the size of the Envelope in several scenarios, for example:</t>

<t><list style="symbols">
  <t>A management system Severs the Text and CoSWID sections before sending an Envelope to a constrained Recipient, which saves Recipient bandwidth.</t>
  <t>A Recipient Severs the Installation section after installing the Update, which saves storage space.</t>
</list></t>

<t>See <xref target="severable-fields"/> for more detail.</t>

</section>
<section anchor="ovr-integrated" title="Integrated Dependencies and Payloads">

<t>In some cases, it is beneficial to include a dependency or a payload in the Envelope of a manifest. For example:</t>

<t><list style="symbols">
  <t>When an update is delivered via a comparatively unconstrained medium, such as a removable mass storage device, it may be beneficial to bundle updates into single files.</t>
  <t>When a manifest requires encryption, it must be referenced as a dependency, so a trivial manifest may be used to enclose the encrypted manifest. The encrypted manifest may be contained in the dependent manifest’s envelope.</t>
  <t>When a manifest transports a small payload, such as an encrypted key, that payload may be placed in the manifest’s envelope.</t>
</list></t>

<t>See <xref target="composite-manifests"/>, <xref target="encrypted-manifests"/> for more detail.</t>

</section>
</section>
<section anchor="interpreter-behavior" title="Interpreter Behavior">

<t>This section describes the behavior of the manifest interpreter and focuses primarily on interpreting commands in the manifest. However, there are several other important behaviors of the interpreter: encoding version detection, rollback protection, and authenticity verification are chief among these.</t>

<section anchor="interpreter-setup" title="Interpreter Setup">

<t>Prior to executing any command sequence, the interpreter or its host application MUST inspect the manifest version field and fail when it encounters an unsupported encoding version. Next, the interpreter or its host application MUST extract the manifest sequence number and perform a rollback check using this sequence number. The exact logic of rollback protection may vary by application, but it has the following properties:</t>

<t><list style="symbols">
  <t>Whenever the interpreter can choose between several manifests, it MUST select the latest valid, authentic manifest.</t>
  <t>If the latest valid, authentic manifest fails, it MAY select the next latest valid, authentic manifest.</t>
</list></t>

<t>Here, valid means that a manifest has a supported encoding version and it has not been excluded for other reasons. Reasons for excluding typically involve first executing the manifest and may include:</t>

<t><list style="symbols">
  <t>Test failed (e.g. Vendor ID/Class ID).</t>
  <t>Unsupported command encountered.</t>
  <t>Unsupported parameter encountered.</t>
  <t>Unsupported component ID encountered.</t>
  <t>Payload not available.</t>
  <t>Dependency not available.</t>
  <t>Application crashed when executed.</t>
  <t>Watchdog timeout occurred.</t>
  <t>Dependency or Payload verification failed.</t>
  <t>Missing component from a set.</t>
</list></t>

<t>These failure reasons MAY be combined with retry mechanisms prior to marking a manifest as invalid.</t>

<t>Following these initial tests, the interpreter clears all parameter storage. This ensures that the interpreter begins without any leaked data.</t>

</section>
<section anchor="required-checks" title=" Required Checks">

<t>The RECOMMENDED process is to verify the signature of the manifest prior to parsing/executing any section of the manifest. This guards the parser against arbitrary input by unauthenticated third parties, but it costs extra energy when a Recipient receives an incompatible manifest.</t>

<t>When validating authenticity of manifests, the interpreter MAY use an ACL (see <xref target="access-control-lists"/>) to determine the extent of the rights conferred by that authenticity. Where a device supports only one level of access, it MAY choose to skip signature verification of dependencies, since they are referenced by digest. Where a device supports more than one trusted party, it MAY choose to defer the verification of signatures of dependencies until the list of affected components is known so that it can skip redundant signature verifications. For example, a dependency signed by the same author as the dependent does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the dependency.</t>

<t>Once a valid, authentic manifest has been selected, the interpreter MUST examine the component list and verify that its maximum number of components is not exceeded and that each listed component ID is supported.</t>

<t>For each listed component, the interpreter MUST provide storage for the supported parameters. If the interpreter does not have sufficient temporary storage to process the parameters for all components, it MAY process components serially for each command sequence. See <xref target="serial-processing"/> for more details.</t>

<t>The interpreter SHOULD check that the common section contains at least one vendor ID check and at least one class ID check.</t>

<t>If the manifest contains more than one component, each command sequence MUST begin with a Set Current Component command.</t>

<t>If a dependency is specified, then the interpreter MUST perform the following checks:</t>

<t><list style="numbers">
  <t>At the beginning of each section in the dependent: all previous sections of each dependency have been executed.</t>
  <t>At the end of each section in the dependent: The corresponding section in each dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support dependencies and a manifest specifies a dependency, then the interpreter MUST reject the manifest.</t>

<t>If a Recipient supports groups of interdependent components (a Component Set), then it SHOULD require that all Components in the Component Set are specified by one manifest and its dependencies. This manifest is called the Root Manifest.</t>

<section anchor="minimal-sigs" title="Minimizing Signature Verifications">

<t>Signature verification can be energy and time expensive on a constrained device. MAC verification is typically unaffected by these concerns. A Recipient MAY choose to parse and execute only the SUIT_Common section of the manifest prior to signature verification, if all of the below apply:</t>

<t><list style="symbols">
  <t>The Authentication Block contains a COSE_Sign_Tagged or COSE_Sign1_Tagged</t>
  <t>The Recipient can receive many incompatible or inapplicable manifests, and</t>
  <t>The Recipient has a power budget that makes signature verification undesirable</t>
</list></t>

<t>The guidelines in <xref target="creating-manifests">Creating Manifests</xref> require that the common section contains the applicability checks, so this section is sufficient for applicability verification. The parser MUST restrict acceptable commands to: Conditions, Override Parameters, Set Parameters, Try-Each, and Run Sequence ONLY. The manifest parser MUST NOT execute any command with side-effects outside the parser (for example, Run, Copy, Swap, or Fetch commands) prior to authentication and any such command MUST Abort. The Common Sequence MUST be executed again in its entirety after authenticity validation.</t>

<t>When executing Common prior to authenticity validation, the Manifest Processor MUST evaluate the integrity of the manifest using the SUIT_Digest present in the authentication block.</t>

<t>Alternatively, a Recipient MAY rely on network infrastructure to filter inapplicable manifests.</t>

</section>
</section>
<section anchor="interpreter-fundamental-properties" title="Interpreter Fundamental Properties">

<t>The interpreter has a small set of design goals:</t>

<t><list style="numbers">
  <t>Executing an update MUST either result in an error, or a verifiably correct system state.</t>
  <t>Executing a secure boot MUST either result in an error, or a booted system.</t>
  <t>Executing the same manifest on multiple Recipients MUST result in the same system state.</t>
</list></t>

<t>NOTE: when using A/B images, the manifest functions as two (or more) logical manifests, each of which applies to a system in a particular starting state. With that provision, design goal 3 holds.</t>

</section>
<section anchor="command-behavior" title="Abstract Machine Description">

<t>The heart of the manifest is the list of commands, which are processed by an interpreter. This interpreter can be modeled as a simple abstract machine. This machine consists of several data storage locations that are modified by commands.</t>

<t>There are two types of commands, namely those that modify state (directives) and those that perform tests (conditions). Parameters are used as the inputs to commands. Some directives offer control flow operations. Directives target a specific component or dependency. A dependency is another SUIT_Envelope that describes additional components. Dependencies are identified by digest, but referenced in commands by Dependency Index, the index into the array of Dependencies. A component is a unit of code or data that can be targeted by an update. Components are identified by Component Identifiers, i.e. arrays of binary strings, but referenced in commands by Component Index, the index into the array of Component Identifiers.</t>

<t>Conditions MUST NOT have any side-effects other than informing the interpreter of success or failure. The Interpreter does not Abort if the Soft Failure flag is set when a Condition reports failure.</t>

<t>Directives MAY have side-effects in the parameter table, the interpreter state, or the current component. The Interpreter MUST Abort if a Directive reports failure regardless of the Soft Failure flag.</t>

<t>The following table describes the behavior of each command. “params” represents the parameters for the current component or dependency. Most commands operate on either a component or a dependency. Setting the Component Index clears the Dependency Index. Setting the Dependency Index clears the Component Index.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Check Vendor Identifier</c>
      <c>assert(binary-match(current, current.params[vendor-id]))</c>
      <c>Check Class Identifier</c>
      <c>assert(binary-match(current, current.params[class-id]))</c>
      <c>Verify Image</c>
      <c>assert(binary-match(digest(current), current.params[digest]))</c>
      <c>Set Component Index</c>
      <c>current := components[arg]</c>
      <c>Override Parameters</c>
      <c>current.params[k] := v for k,v in arg</c>
      <c>Set Dependency Index</c>
      <c>current := dependencies[arg]</c>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in params for k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Run</c>
      <c>run(current)</c>
      <c>Fetch</c>
      <c>store(current, fetch(current.params[uri]))</c>
      <c>Use Before</c>
      <c>assert(now() &lt; arg)</c>
      <c>Check Component Offset</c>
      <c>assert(offsetof(current) == arg)</c>
      <c>Check Device Identifier</c>
      <c>assert(binary-match(current, current.params[device-id]))</c>
      <c>Check Image Not Match</c>
      <c>assert(not binary-match(digest(current), current.params[digest]))</c>
      <c>Check Minimum Battery</c>
      <c>assert(battery &gt;= arg)</c>
      <c>Check Update Authorized</c>
      <c>assert(isAuthorized())</c>
      <c>Check Version</c>
      <c>assert(version_check(current, arg))</c>
      <c>Abort</c>
      <c>assert(0)</c>
      <c>Try Each</c>
      <c>break if exec(seq) is not error for-each seq in arg</c>
      <c>Copy</c>
      <c>store(current, current.params[src-component])</c>
      <c>Swap</c>
      <c>swap(current, current.params[src-component])</c>
      <c>Wait For Event</c>
      <c>until event(arg), wait</c>
      <c>Run Sequence</c>
      <c>exec(arg)</c>
      <c>Run with Arguments</c>
      <c>run(current, arg)</c>
</texttable>

</section>
<section anchor="serial-processing" title="Serialized Processing Interpreter">

<t>In highly constrained devices, where storage for parameters is limited, the manifest processor MAY handle one component at a time, traversing the manifest tree once for each listed component. In this mode, the interpreter ignores any commands executed while the component index is not the current component. This reduces the overall volatile storage required to process the update so that the only limit on number of components is the size of the manifest. However, this approach requires additional processing power.</t>

<t>In order to operate in this mode, the manifest processor loops on each section for every supported component, simply ignoring commands when the current component is not selected.</t>

</section>
<section anchor="parallel-processing" title="Parallel Processing Interpreter">

<t>Advanced Recipients MAY make use of the Strict Order parameter and enable parallel processing of some Command Sequences, or it may reorder some Command Sequences. To perform parallel processing, once the Strict Order parameter is set to False, the Recipient may fork a process for each command until the Strict Order parameter is returned to True or the Command Sequence ends. Then, it joins all forked processes before continuing processing of commands. To perform out-of-order processing, a similar approach is used, except the Recipient consumes all commands after the Strict Order parameter is set to False, then it sorts these commands into its preferred order, invokes them all, then continues processing.</t>

<t>Under each of these scenarios the parallel processing must halt:</t>

<t><list style="symbols">
  <t>Set Parameters.</t>
  <t>Override Parameters.</t>
  <t>Set Strict Order = True.</t>
  <t>Set Dependency Index.</t>
  <t>Set Component Index.</t>
</list></t>

<t>To perform more useful parallel operations, sequences of commands may be collected in a suit-directive-run-sequence. Then, each of these sequences may be run in parallel. Each sequence defaults to Strict Order = True. To isolate each sequence from each other sequence, each sequence MUST begin with a Set Component Index directive. The interpreter MUST track each Set Component Index directive, and cause an Abort if more than one Set Component Index directive targets the same Component Index. When Strict Order = False, each suit-directive-run-sequence MUST begin with a Set Component Index directive. Any further Set Component Index directives MUST cause an Abort. This allows the interpreter that forks suit-directive-run-sequence processes to check that the first element is correct, then fork a process to handle the remainder of the sequence.</t>

</section>
<section anchor="processing-dependencies" title="Processing Dependencies">

<t>As described in <xref target="required-checks"/>, each manifest must invoke each of its dependencies sections from the corresponding section of the dependent. Any changes made to parameters by the dependency persist in the dependent.</t>

<t>When a Process Dependency command is encountered, the interpreter loads the dependency identified by the Current Dependency Index. The interpreter first executes the common-sequence section of the identified dependency, then it executes the section of the dependency that corresponds to the currently executing section of the dependent.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the dependency correctly.</t>

</section>
<section anchor="hierarchical-interpreters" title="Multiple Manifest Processors">

<t>When a system has multiple security domains they MAY require independent verification of authenticity or security policies. Security domains may be divided by separation technology such as Arm TrustZone, or Intel SGX. Security domains may also be divided into separate processors and memory spaces, with a communication interface between them.</t>

<t>For example, an application processor may have an attached communications module that contains a processor. The communications module may require metadata signed by a specific Trust Authority for regulatory approval. This may be a different Trust Authority than the application processor.</t>

<t>When there are two or more security domains, a manifest processor MAY be required in each. The first manifest processor is the normal manifest processor as described for the Recipient in Abstract Machine. The second manifest processor only executes sections when the first manifest processor requests it. An API interface is provided from the second manifest processor to the first. This allows the first manifest processor to request a limited set of operations from the second. These operations are limited to: setting parameters, inserting an Envelope, invoking a Manifest Command Sequence. The second manifest processor declares a prefix to the first, which tells the first manifest processor when it should delegate to the second. These rules are enforced by underlying separation of privilege infrastructure, such as TEEs, or physical separation.</t>

<t>When the first manifest processor encounters a dependency prefix, that informs the first manifest processor that it should provide the second manifest processor with the corresponding dependency Envelope. This is done when the dependency is fetched. The second manifest processor immediately verifies any authentication information in the dependency Envelope. When a parameter is set for any component that matches the prefix, this parameter setting is passed to the second manifest processor via an API. As the first manifest processor works through the Procedure (set of command sequences) it is executing, each time it sees a Process Dependency command that is associated with the prefix declared by the second manifest processor, it uses the API to ask the second manifest processor to invoke that dependency section instead.</t>

</section>
</section>
<section anchor="creating-manifests" title="Creating Manifests">

<t>Manifests are created using tools for constructing COSE structures, calculating cryptographic values and compiling desired system state into a sequence of operations required to achieve that state. The process of constructing COSE structures and the calculation of cryptographic values is covered in <xref target="RFC8152"/>.</t>

<t>Compiling desired system state into a sequence of operations can be accomplished in many ways. Several templates are provided below to cover common use-cases. These templates can be combined to produce more complex behavior.</t>

<t>NOTE: On systems that support only a single component, Set Current Component has no effect and can be omitted.</t>

<t>NOTE: <spanx style="strong">A digest MUST always be set using Override Parameters, since this prevents a less-privileged dependent from replacing the digest.</spanx></t>

<section anchor="compatibility-check-template" title="Compatibility Check Template">

<t>The compatibility check ensures that Recipients only install compatible images.
In this template all information is contained in the common block and the following sequence of operations are used:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Vendor ID and Class ID (see <xref target="secparameters"/>)</t>
  <t>Check Vendor Identifier condition (see <xref target="identifiers"/>)</t>
  <t>Check Class Identifier condication (see <xref target="identifiers"/>)</t>
</list></t>

</section>
<section anchor="secure-boot-template" title="Secure Boot Template">

<t>This template performs a secure boot operation.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the run block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Run directive (see <xref target="suit-directive-run-sequence"/>)</t>
</list></t>

<t>According to <xref target="command-behavior"/>, the Run directive applies to the component referenced by the current Component Index. Hence, the Set Component Index directive has to be used to target a specific component.</t>

</section>
<section anchor="firmware-download-template" title="Firmware Download Template">

<t>This template triggers the download of firmware.</t>

<t>The following operations are placed into the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest and Image Size (see <xref target="secparameters"/>)</t>
</list></t>

<t>Then, the install block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
</list></t>

<t>The Fetch directive needs the URI parameter to be set to determine where the image is retrieved from. Additionally, the destination of where the component shall be stored has to be configured. The URI is configured via the Set Parameters directive while the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="integrated-payload-template" title="Integrated Payload Template">

<t>This template triggers the installation of a payload included in the manifest envelope. It is identical to <xref target="firmware-download-template"/> except that it places an added restriction on the URI passed to the Set Parameters directive.</t>

<t>An implementor MAY choose to place a payload in the envelope of a manifest. The payload envelope key MAY be a positive or negative integer. The payload envelope key MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the manifest. The payload MUST be serialized in a bstr element.</t>

<t>The URI for a payload enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the payload. For example, an envelope that contains a payload a key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
<section anchor="load-from-external-storage-template" title="Load from External Storage Template">

<t>This directive loads an firmware image from external storage.</t>

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Component Index (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>As outlined in <xref target="command-behavior"/>, the Copy directive needs a source and a destination to be configured. The source is configured via Component Index (with the Set Parameters directive) and the destination is configured via the Set Component Index directive.</t>

</section>
<section anchor="load-decompress-from-external-storage-template" title="Load &amp; Decompress from External Storage Template">

<t>The following operations are placed into the load block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for Source Component Index and Compression Info (see <xref target="secparameters"/>)</t>
  <t>Copy directive (see <xref target="suit-directive-copy"/>)</t>
</list></t>

<t>This example is similar to the previous case but additionally performs decompression. Hence, the only difference is in setting the Compression Info parameter.</t>

</section>
<section anchor="template-dependency" title="Dependency Template">

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for URI (see <xref target="secparameters"/>)</t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>NOTE: Any changes made to parameters in a dependency persist in the dependent.</t>

<section anchor="composite-manifests" title="Composite Manifests">

<t>An implementor MAY choose to place a dependency’s envelope in the envelope of its dependent. The dependent envelope key for the dependency envelope MUST NOT be a value between 0 and 24 and it MUST NOT be used by any other envelope element in the dependent manifest.</t>

<t>The URI for a dependency enclosed in this way MUST be expressed as a fragment-only reference, as defined in <xref target="RFC3986"/>, Section 4.4. The fragment identifier is the stringified envelope key of the dependency. For example, an envelope that contains a dependency at key 42 would use a URI “#42”, key -73 would use a URI “#-73”.</t>

</section>
</section>
<section anchor="template-encrypted-manifest" title="Encrypted Manifest Template">

<t>To use an encrypted manifest, create a plaintext dependent, and add the encrypted manifest as a dependency. The dependent can include very little information.</t>

<t>The following operations are placed into the dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Set Parameters directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see <xref target="secparameters"/>)</t>
      <t>Encryption Info (see <xref target="secparameters"/>)</t>
    </list></t>
  <t>Fetch directive (see <xref target="suit-directive-fetch"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Dependency Index directive (see <xref target="suit-directive-set-dependency-index"/>)</t>
  <t>Check Image Match condition (see <xref target="suit-condition-image-match"/>)</t>
  <t>Process Dependency directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext manifest and its encrypted dependency may also form a <xref target="composite-manifests">composite manifest</xref>.</t>

</section>
<section anchor="a-b-template" title="A/B Image Template">

<t>The following operations are placed in the common block:</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest A and Image Size A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>) for Image Digest B and Image Size B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
</list></t>

<t>The following operations are placed in the fetch block or install block</t>

<t><list style="symbols">
  <t>Set Component Index directive (see <xref target="suit-directive-set-component-index"/>)</t>
  <t>Try Each
  <list style="symbols">
      <t>First Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset A</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI A (see <xref target="secparameters"/>)</t>
        </list></t>
      <t>Second Sequence:
      <list style="symbols">
          <t>Override Parameters directive (see <xref target="suit-directive-override-parameters"/>, <xref target="secparameters"/>) for Offset B</t>
          <t>Check Offset Condition (see <xref target="suit-condition-component-offset"/>)</t>
          <t>Set Parameters directive (see <xref target="suit-directive-override-parameters"/>) for URI B (see <xref target="secparameters"/>)</t>
        </list></t>
    </list></t>
  <t>Fetch</t>
</list></t>

</section>
</section>
<section anchor="metadata-structure" title="Metadata Structure">

<t>The metadata for SUIT updates is composed of several primary constituent parts: the Envelope, Delegation Chains, Authentication Information, Manifest, and Severable Elements.</t>

<t>For a diagram of the metadata structure, see <xref target="metadata-structure-overview"/>.</t>

<section anchor="encoding-considerations" title="Encoding Considerations">

<t>The map indices in the envelope encoding are reset to 1 for each map within the structure. This is to keep the indices as small as possible. The goal is to keep the index objects to single bytes (CBOR positive integers 1-23).</t>

<t>Wherever enumerations are used, they are started at 1. This allows detection of several common software errors that are caused by uninitialised variables. Positive numbers in enumerations are reserved for IANA registration. Negative numbers are used to identify application-specific implementations.</t>

<t>All elements of the envelope must be wrapped in a bstr to minimize the complexity of the code that evaluates the cryptographic integrity of the element and to ensure correct serialization for integrity and authenticity checks.</t>

</section>
<section anchor="envelope" title="Envelope">

<t>The Envelope contains each of the other primary constituent parts of the SUIT metadata. It allows for modular processing of the manifest by ordering components in the expected order of processing.</t>

<t>The Envelope is encoded as a CBOR Map. Each element of the Envelope is enclosed in a bstr, which allows computation of a message digest against known bounds.</t>

</section>
<section anchor="delegation-info" title="Delegation Chains">

<t>The suit-delegation field MAY carry one or more CBOR Web Tokens (CWTs) <xref target="RFC8392"/>, with <xref target="RFC8747"/> cnf claims. They can be used to perform enhanced authorization decisions. The CWTs are arranged into a list of lists. Each list starts with CWT authorized by a Trust Anchor, and finishes with a key used to authenticate the Manifest (see <xref target="authentication-info"/>). This allows an Update Authority to delegate from a long term Trust Anchor, down through intermediaries, to a delegate without any out-of-band updates Trust Anchors.</t>

<t>A Recipient MAY choose to cache intermediaries and/or delegates. If an Update Distributor knows that a targeted Recipient has cached some intermediaries or delegates, it MAY choose to strip any cached intermediaries or delegates from the Delegation Chains in order to reduce bandwidth and energy.</t>

</section>
<section anchor="authentication-info" title="Authenticated Manifests">

<t>The suit-authentication-wrapper contains a list of one or more cryptographic authentication wrappers for the Manifest. These are implemented as COSE_Mac_Tagged or COSE_Sign_Tagged blocks. Each of these blocks contains a SUIT_Digest of the Manifest. This enables modular processing of the manifest. The COSE_Mac_Tagged and COSE_Sign_Tagged blocks are described in RFC 8152 <xref target="RFC8152"/>. The suit-authentication-wrapper MUST come before any element in the SUIT_Envelope, except for the OPTIONAL suit-delegation, regardless of canonical encoding of CBOR. All validators MUST reject any SUIT_Envelope that begins with any element other than a suit-authentication-wrapper or suit-delegation.</t>

<t>A SUIT_Envelope that has not had authentication information added MUST still contain the suit-authentication-wrapper element, but the content MUST be an empty list.</t>

</section>
<section anchor="encrypted-manifests" title="Encrypted Manifests">

<t>To use an encrypted manifest, it must be a dependency of a plaintext manifest. This allows fine-grained control of what information is accessible to intermediate systems for the purposes of management, while still preserving the confidentiality of the manifest contents. This also means that a Recipient can process an encrypted manifest in the same way as an encrypted payload, allowing code reuse.</t>

<t>A template for using an encrypted manifest is covered in <xref target="template-encrypted-manifest">Encrypted Manifest Template</xref>.</t>

</section>
<section anchor="manifest-structure" title="Manifest">

<t>The manifest contains:</t>

<t><list style="symbols">
  <t>a version number (see <xref target="manifest-version"/>)</t>
  <t>a sequence number (see <xref target="manifest-seqnr"/>)</t>
  <t>a reference URI (see <xref target="manifest-reference-uri"/>)</t>
  <t>a common structure with information that is shared between command sequences (see <xref target="manifest-common"/>)</t>
  <t>one or more lists of commands that the Recipient should perform (see <xref target="manifest-commands"/>)</t>
  <t>a reference to the full manifest (see <xref target="manifest-reference-uri"/>)</t>
  <t>human-readable text describing the manifest found in the SUIT_Envelope (see <xref target="manifest-digest-text"/>)</t>
  <t>a Concise Software Identifier found in the SUIT_Envelope (see <xref target="manifest-digest-coswid"/>)</t>
</list></t>

<t>The CoSWID, Text section, or any Command Sequence of the Update Procedure (Dependency Resolution, Image Fetch, Image Installation) can be either a CBOR structure or a SUIT_Digest. In each of these cases, the SUIT_Digest provides for a severable field. Severable fields are RECOMMENDED to implement. In particular, the human-readable text SHOULD be severable, since most useful text elements occupy more space than a SUIT_Digest, but are not needed by the Recipient. Because SUIT_Digest is a CBOR Array and each severable element is a CBOR bstr, it is straight-forward for a Recipient to determine whether an element has been severed. The key used for a severable element is the same in the SUIT_Manifest and in the SUIT_Envelope so that a Recipient can easily identify the correct data in the envelope. See <xref target="integrity-checks"/> for more detail.</t>

<section anchor="manifest-version" title="suit-manifest-version">

<t>The suit-manifest-version indicates the version of serialization used to encode the manifest. Version 1 is the version described in this document. suit-manifest-version is REQUIRED to implement.</t>

</section>
<section anchor="manifest-seqnr" title="suit-manifest-sequence-number">

<t>The suit-manifest-sequence-number is a monotonically increasing anti-rollback counter. It also helps Recipients to determine which in a set of manifests is the “root” manifest in a given update. Each manifest MUST have a sequence number higher than each of its dependencies. Each Recipient MUST reject any manifest that has a sequence number lower than its current sequence number. It MAY be convenient to use a UTC timestamp in seconds as the sequence number. suit-manifest-sequence-number is REQUIRED to implement.</t>

</section>
<section anchor="manifest-reference-uri" title="suit-reference-uri">

<t>suit-reference-uri is a text string that encodes a URI where a full version of this manifest can be found. This is convenient for allowing management systems to show the severed elements of a manifest when this URI is reported by a Recipient after installation.</t>

</section>
<section anchor="manifest-digest-text" title="suit-text">

<t>suit-text SHOULD be a severable element. suit-text is a map of pairs. It MAY contain two different types of pair:</t>

<t><list style="symbols">
  <t>integer =&gt; text mappings</t>
  <t>SUIT_Component_Identifier =&gt; map mappings</t>
</list></t>

<t>Each SUIT_Component_Identifier =&gt; map entry contains a map of integer =&gt; text values. All SUIT_Component_Identifiers present in suit-text MUST also be present in <xref target="manifest-common">suit-common</xref> or the suit-common of a dependency.</t>

<t>suit-text contains all the human-readable information that describes any and all parts of the manifest, its payload(s) and its resource(s). The text section is typically severable, allowing manifests to be distributed without the text, since end-nodes do not require text. The meaning of each field is described below.</t>

<t>Each section MAY be present. If present, each section MUST be as described. Negative integer IDs are reserved for application-specific text values.</t>

<t>The following table describes the text fields available in suit-text:</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-manifest-description</c>
      <c>Free text description of the manifest</c>
      <c>suit-text-update-description</c>
      <c>Free text description of the update</c>
      <c>suit-text-manifest-json-source</c>
      <c>The JSON-formatted document that was used to create the manifest</c>
      <c>suit-text-manifest-yaml-source</c>
      <c>The yaml-formatted document that was used to create the manifest</c>
</texttable>

<t>The following table describes the text fields available in each map identified by a SUIT_Component_Identifier.</t>

<texttable>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-text-vendor-name</c>
      <c>Free text vendor name</c>
      <c>suit-text-model-name</c>
      <c>Free text model name</c>
      <c>suit-text-vendor-domain</c>
      <c>The domain used to create the vendor-id condition</c>
      <c>suit-text-model-info</c>
      <c>The information used to create the class-id condition</c>
      <c>suit-text-component-description</c>
      <c>Free text description of each component in the manifest</c>
      <c>suit-text-component-version</c>
      <c>A text version number</c>
      <c>suit-text-version-required</c>
      <c>A text expression of the required version number</c>
</texttable>

<t>suit-text is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="text-version-required" title="text-version-required">

<t>suit-text-version-required is used to represent a version-based dependency on suit-parameter-version as described in <xref target="suit-parameter-version"/> and <xref target="suit-condition-version"/>. To describe a version dependency, a Manifest Author should populate the suit-text map with a SUIT_Component_Identifier key for the dependency component, and place in the corresponding map a suit-text-version-required key with a text expression that is representative of the version constraints placed on the dependency.</t>

<t>For example, to express a dependency on a component “[‘x’, ‘y’]”, where the version should be any v1.x later than v1.2.5, but not v2.0 or above, the author would add the following structure to the suit-text element. Note that this text is in cbor-diag notation.</t>

<t><spanx style="verb">
[h'78',h'79'] : {
    7 : "&gt;=1.2.5,&lt;2"
}
</spanx></t>

<section anchor="manifest-digest-coswid" title="suit-coswid">

<t>suit-coswid contains a Concise Software Identifier. This element SHOULD be made severable so that it can be discarded by the Recipient or an intermediary if it is not required by the Recipient.</t>

<t>suit-coswid is OPTIONAL to implement.</t>

</section>
<section anchor="manifest-common" title="suit-common">

<t>suit-common encodes all the information that is shared between each of the command sequences, including: suit-dependencies, suit-components, and suit-common-sequence. suit-common is REQUIRED to implement.</t>

<t>suit-dependencies is a list of <xref target="SUIT_Dependency"></xref> blocks that specify manifests that must be present before the current manifest can be processed. suit-dependencies is OPTIONAL to implement.</t>

<t>suit-components is a list of <xref target="suit-component-identifier">SUIT_Component_Identifier</xref> blocks that specify the component identifiers that will be affected by the content of the current manifest. suit-components is REQUIRED to implement; at least one manifest in a dependency tree MUST contain a suit-components block.</t>

<t>suit-common-sequence is a SUIT_Command_Sequence to execute prior to executing any other command sequence. Typical actions in suit-common-sequence include setting expected Recipient identity and image digests when they are conditional (see <xref target="suit-directive-try-each"/> and <xref target="a-b-template"/> for more information on conditional sequences). suit-common-sequence is RECOMMENDED to implement. It is REQUIRED if the optimizations described in <xref target="minimal-sigs"/> will be used. Whenever a parameter or try-each is required by more than one Command Sequence, suit-common-sequence results in a smaller encoding.</t>

<section anchor="SUIT_Dependency" title="Dependencies">

<t>SUIT_Dependency specifies a manifest that describes a dependency of the current manifest. The Manifest is identified, however the Recipient should expect an Envelope when it acquires the dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>The suit-dependency-digest specifies the dependency manifest uniquely by identifying a particular Manifest structure. This is identical to the digest that would be present as the payload of any suit-authentication-block in the dependency’s Envelope. The digest is calculated over the Manifest structure instead of the COSE Sig_structure or Mac_structure. This is necessary to ensure that removing a signature from a manifest does not break dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see <xref target="suit-component-identifier"/>). This specifies the scope at which the dependency operates. This allows the dependency to be forwarded on to a component that is capable of parsing its own manifests. It also allows one manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent component hierarchy. This element is OPTIONAL.</t>

<t>A dependency prefix can be used with a component identifier. This allows complex systems to understand where dependencies need to be applied. The dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the dependency.</t>

<t>A dependency prefix can also be used to indicate when a dependency manifest needs to be processed by a secondary manifest processor, as described in <xref target="hierarchical-interpreters"/>.</t>

</section>
<section anchor="suit-component-identifier" title="SUIT_Component_Identifier">

<t>A component is a unit of code or data that can be targeted by an update. To facilitate composite devices, components are identified by a list of CBOR byte strings, which allows construction of hierarchical component structures. A dependency MAY declare a prefix to the components defined in the dependency manifest. Components are identified by Component Identifiers, i.e. arrays of binary strings, but referenced in commands</t>

<t>A Component Identifier can be trivial, such as the simple array [h’00’]. It can also represent a filesystem path by encoding each segment of the path as an element in the list. For example, the path “/usr/bin/env” would encode to [‘usr’,’bin’,’env’].</t>

<t>This hierarchical construction allows a component identifier to identify any part of a complex, multi-component system.</t>

</section>
</section>
<section anchor="manifest-commands" title="SUIT_Command_Sequence">

<t>A SUIT_Command_Sequence defines a series of actions that the Recipient MUST take to accomplish a particular goal. These goals are defined in the manifest and include:</t>

<t><list style="numbers">
  <t>Dependency Resolution: suit-dependency-resolution is a SUIT_Command_Sequence to execute in order to perform dependency resolution. Typical actions include configuring URIs of dependency manifests, fetching dependency manifests, and validating dependency manifests’ contents. suit-dependency-resolution is REQUIRED to implement and to use when suit-dependencies is present.</t>
  <t>Payload Fetch: suit-payload-fetch is a SUIT_Command_Sequence to execute in order to obtain a payload. Some manifests may include these actions in the suit-install section instead if they operate in a streaming installation mode. This is particularly relevant for constrained devices without any temporary storage for staging the update. suit-payload-fetch is OPTIONAL to implement.</t>
  <t>Payload Installation: suit-install is a SUIT_Command_Sequence to execute in order to install a payload. Typical actions include verifying a payload stored in temporary storage, copying a staged payload from temporary storage, and unpacking a payload. suit-install is OPTIONAL to implement.</t>
  <t>Image Validation: suit-validate is a SUIT_Command_Sequence to execute in order to validate that the result of applying the update is correct. Typical actions involve image validation and manifest validation. suit-validate is REQUIRED to implement. If the manifest contains dependencies, one process-dependency invocation per dependency or one process-dependency invocation targeting all dependencies SHOULD be present in validate.</t>
  <t>Image Loading: suit-load is a SUIT_Command_Sequence to execute in order to prepare a payload for execution. Typical actions include copying an image from permanent storage into RAM, optionally including actions such as decryption or decompression. suit-load is OPTIONAL to implement.</t>
  <t>Run or Boot: suit-run is a SUIT_Command_Sequence to execute in order to run an image. suit-run typically contains a single instruction: either the “run” directive for the bootable manifest or the “process dependencies” directive for any dependents of the bootable manifest. suit-run is OPTIONAL to implement. Only one manifest in an update may contain the “run” directive.</t>
</list></t>

<t>Goals 1,2,3 form the Update Procedure. Goals 4,5,6 form the Boot Procedure.</t>

<t>Each Command Sequence follows exactly the same structure to ensure that the parser is as simple as possible.</t>

<t>Lists of commands are constructed from two kinds of element:</t>

<t><list style="numbers">
  <t>Conditions that MUST be true–any failure is treated as a failure of the update/load/boot</t>
  <t>Directives that MUST be executed.</t>
</list></t>

<t>Each condition is a command code identifier, followed by a <xref target="reporting-policy">SUIT_Reporting_Policy</xref>.</t>

<t>Each directive is composed of:</t>

<t><list style="numbers">
  <t>A command code identifier</t>
  <t>An argument block or a reporting policy</t>
</list></t>

<t>Argument blocks are consumed only by flow-control directives:</t>

<t><list style="symbols">
  <t>Set Component/Dependency Index</t>
  <t>Set/Override Parameters</t>
  <t>Try Each</t>
  <t>Run Sequence</t>
</list></t>

<t>Reporting policies provide a hint to the manifest processor of whether or not to add the success or failure of a command to any report that it generates.</t>

<t>Many conditions and directives apply to a given component, and these generally grouped together. Therefore, a special command to set the current component index is provided with a matching command to set the current dependency index. This index is a numeric index into the component ID tables defined at the beginning of the document. For the purpose of setting the index, the two component ID tables are considered to be concatenated together.</t>

<t>To facilitate optional conditions, a special directive, <xref target="suit-directive-try-each"/>, is provided. It runs several new lists of conditions/directives, one after another, that are contained as an argument to the directive. By default, it assumes that a failure of a condition should not indicate a failure of the update/boot, but a parameter is provided to override this behavior. See <xref target="suit-parameter-soft-failure"/>.</t>

</section>
<section anchor="reporting-policy" title="Reporting Policy">

<t>TODO: Records, bitfield</t>

<t>To facilitate construction of Reports that describe the success, or failure of a given Procedure, each command is given a Reporting Policy. This is an integer bitfield that follows the command and indicates what the Recipient should do with the Record of executing the command. The options are summarized in the table below.</t>

<texttable>
      <ttcol align='left'>Policy</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-send-record-on-success</c>
      <c>Record when the command succeeds</c>
      <c>suit-send-record-on-failure</c>
      <c>Record when the command fails</c>
      <c>suit-send-sysinfo-success</c>
      <c>Add system information when the command succeeds</c>
      <c>suit-send-sysinfo-failure</c>
      <c>Add system information when the command fails</c>
</texttable>

<t>Any or all of these policies may be enabled at once.</t>

<t>SUIT does NOT REQUIRE a particular format of Records or Reports. SUIT only defines hints to the Reporting engine for which Records it should aggregate into the Report.</t>

<t>An OPTIONAL Record format, SUIT_Record is defined in <xref target="full-cddl"/>. It is encoded as a map, with the following elements.</t>

<texttable>
      <ttcol align='left'>Element</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-record-success</c>
      <c>The boolean or integer success or failure code of the command.</c>
      <c>suit-record-component-id</c>
      <c>The current component when the record was generated.</c>
      <c>suit-record-dependency-id</c>
      <c>The current dependency digest when the record was generated.</c>
      <c>suit-record-command-sequence-id</c>
      <c>The label of the Command Sequence that was executing when the record was generated.</c>
      <c>suit-record-command-id</c>
      <c>The label of the command that was in progress when the record was generated.</c>
      <c>suit-record-params</c>
      <c>The set of parameters that was consumed by the current command.</c>
      <c>suit-record-actual</c>
      <c>The value against which a suit-condition compared a parameter.</c>
</texttable>

<t>In Secure Boot operations, the Reporting engine MAY aggregate the Records produced in a Procedure into the evidence used for an attestation report.</t>

</section>
<section anchor="secparameters" title="SUIT_Parameters">

<t>Many conditions and directives require additional information. That information is contained within parameters that can be set in a consistent way. This allows reduction of manifest size and replacement of parameters from one manifest to the next.</t>

<t>Most parameters are scoped to a specific component. This means that setting a parameter for one component has no effect on the parameters of any other component. The only exceptions to this are two Manifest Processor parameters: Strict Order and Soft Failure.</t>

<t>The defined manifest parameters are described below.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor ID</c>
      <c>suit-parameter-vendor-identifier</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>Class ID</c>
      <c>suit-parameter-class-identifier</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>Image Digest</c>
      <c>suit-parameter-image-digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>Image Size</c>
      <c>suit-parameter-image-size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>Use Before</c>
      <c>suit-parameter-use-before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-parameter-component-offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>Encryption Info</c>
      <c>suit-parameter-encryption-info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>Compression Info</c>
      <c>suit-parameter-compression-info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>Unpack Info</c>
      <c>suit-parameter-unpack-info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>URI</c>
      <c>suit-parameter-uri</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>Source Component</c>
      <c>suit-parameter-source-component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>Run Args</c>
      <c>suit-parameter-run-args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>Device ID</c>
      <c>suit-parameter-device-identifier</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>Minimum Battery</c>
      <c>suit-parameter-minimum-battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>Update Priority</c>
      <c>suit-parameter-update-priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>Version</c>
      <c>suit-parameter-version</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>Wait Info</c>
      <c>suit-parameter-wait-info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>URI List</c>
      <c>suit-parameter-uri-list</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>Fetch Arguments</c>
      <c>suit-parameter-fetch-arguments</c>
      <c><xref target="suit-parameter-fetch-arguments"/></c>
      <c>Strict Order</c>
      <c>suit-parameter-strict-order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>Soft Failure</c>
      <c>suit-parameter-soft-failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>Custom</c>
      <c>suit-parameter-custom</c>
      <c><xref target="suit-parameter-custom"/></c>
</texttable>

<t>CBOR-encoded object parameters are still wrapped in a bstr. This is because it allows a parser that is aggregating parameters to reference the object with a single pointer and traverse it without understanding the contents. This is important for modularization and division of responsibility within a pull parser. The same consideration does not apply to Directives because those elements are invoked with their arguments immediately</t>

<section anchor="identifiers" title="Constructing Identifiers">

<t>Several conditions use identifiers to determine whether a manifest matches a given Recipient or not. These identifiers are defined to be RFC 4122 <xref target="RFC4122"/> UUIDs. These UUIDs are not human-readable and are therefore used for machine-based processing only.</t>

<t>A Recipient MAY match any number of UUIDs for vendor or class identifier. This may be relevant to physical or software modules. For example, a Recipient that has an OS and one or more applications might list one Vendor ID for the OS and one or more additional Vendor IDs for the applications. This Recipient might also have a Class ID that must be matched for the OS and one or more Class IDs for the applications.</t>

<t>Identifiers are used for compatibility checks. They MUST NOT be used as assertions of identity. They are evaluated by <xref target="identifier-conditions">identifier conditions</xref>.</t>

<t>A more complete example: Imagine a device has the following physical components:
1. A host MCU
2. A WiFi module</t>

<t>This same device has three software modules:
1. An operating system
2. A WiFi module interface driver
3. An application</t>

<t>Suppose that the WiFi module’s firmware has a proprietary update mechanism and doesn’t support manifest processing. This device can report four class IDs:</t>

<t><list style="numbers">
  <t>Hardware model/revision</t>
  <t>OS</t>
  <t>WiFi module model/revision</t>
  <t>Application</t>
</list></t>

<t>This allows the OS, WiFi module, and application to be updated independently. To combat possible incompatibilities, the OS class ID can be changed each time the OS has a change to its API.</t>

<t>This approach allows a vendor to target, for example, all devices with a particular WiFi module with an update, which is a very powerful mechanism, particularly when used for security updates.</t>

<t>UUIDs MUST be created according to RFC 4122 <xref target="RFC4122"/>. UUIDs SHOULD use versions 3, 4, or 5, as described in RFC4122. Versions 1 and 2 do not provide a tangible benefit over version 4 for this application.</t>

<t>The RECOMMENDED method to create a vendor ID is:
Vendor ID = UUID5(DNS_PREFIX, vendor domain name)</t>

<t>The RECOMMENDED method to create a class ID is:
Class ID = UUID5(Vendor ID, Class-Specific-Information)</t>

<t>Class-specific information is composed of a variety of data, for example:</t>

<t><list style="symbols">
  <t>Model number.</t>
  <t>Hardware revision.</t>
  <t>Bootloader version (for immutable bootloaders).</t>
</list></t>

</section>
<section anchor="suit-parameter-vendor-identifier" title="suit-parameter-vendor-identifier">

<t>A RFC 4122 UUID representing the vendor of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-class-identifier" title="suit-parameter-class-identifier">

<t>A RFC 4122 UUID representing the class of the device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-device-identifier" title="suit-parameter-device-identifier">

<t>A RFC 4122 UUID representing the specific device or component. The UUID is encoded as a 16 byte bstr, containing the raw bytes of the UUID. It MUST be constructed as described in <xref target="identifiers"/></t>

</section>
<section anchor="suit-parameter-image-digest" title="suit-parameter-image-digest">

<t>A fingerprint computed over the component itself, encoded in the <xref target="SUIT_Digest"></xref> structure. The SUIT_Digest is wrapped in a bstr, as required in <xref target="secparameters"/>.</t>

</section>
<section anchor="suit-parameter-image-size" title="suit-parameter-image-size">

<t>The size of the firmware image in bytes. This size is encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-use-before" title="suit-parameter-use-before">

<t>An expiry date for the use of the manifest encoded as a POSIX timestamp; a positive integer. Implementations that use this parameter MUST use a 64-bit internal representation of the integer.</t>

</section>
<section anchor="suit-parameter-component-offset" title="suit-parameter-component-offset">

<t>This parameter sets the offset in a component. Some components support multiple possible Slots (offsets into a storage area). This parameter describes the intended Slot to use, identified by its offset into the component’s storage area. This offset MUST be encoded as a positive integer.</t>

</section>
<section anchor="suit-parameter-encryption-info" title="suit-parameter-encryption-info">

<t>Encryption Info defines the mechanism that Fetch or Copy should use to decrypt the data they transfer. SUIT_Parameter_Encryption_Info is encoded as a COSE_Encrypt_Tagged or a COSE_Encrypt0_Tagged, wrapped in a bstr.</t>

</section>
<section anchor="suit-parameter-compression-info" title="suit-parameter-compression-info">

<t>Compression Info defines any information that is required for a Recipient to perform decompression operations. Typically, this includes the algorithm identifier. This document defines the use of ZLIB <xref target="RFC1950"/>, Brotli <xref target="RFC7932"/>, and ZSTD <xref target="I-D.kucherawy-rfc8478bis"/>.</t>

<t>Additional compression formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-unpack-info" title="suit-parameter-unpack-info">

<t>SUIT_Unpack_Info defines the information required for a Recipient to interpret a packed format. This document defines the use of the following binary encodings: Intel HEX <xref target="HEX"/>, Motorola S-record <xref target="SREC"/>,  Executable and Linkable Format (ELF) <xref target="ELF"/>, and Common Object File Format (COFF) <xref target="COFF"/>.</t>

<t>Additional packing formats can be registered through the IANA-maintained registry.</t>

</section>
<section anchor="suit-parameter-uri" title="suit-parameter-uri">

<t>A URI from which to fetch a resource.</t>

</section>
<section anchor="suit-parameter-source-component" title="suit-parameter-source-component">

<t>This parameter sets the source component to be used with either <xref target="suit-directive-copy"></xref> or with <xref target="suit-directive-swap"></xref>. The current Component, as set by suit-directive-set-component-index defines the destination, and suit-parameter-source-component defines the source.</t>

</section>
<section anchor="suit-parameter-run-args" title="suit-parameter-run-args">

<t>This parameter contains an encoded set of arguments for <xref target="suit-directive-run"></xref>. The arguments MUST be provided as an implementation-defined bstr.</t>

</section>
<section anchor="suit-parameter-minimum-battery" title="suit-parameter-minimum-battery">

<t>This parameter sets the minimum battery level in mWh. This parameter is encoded as a positive integer. Used with <xref target="suit-condition-minimum-battery"></xref>.</t>

</section>
<section anchor="suit-parameter-update-priority" title="suit-parameter-update-priority">

<t>This parameter sets the priority of the update. This parameter is encoded as an integer. It is used along with <eref target="suit-condition-update-authorized">suit-condition-update-authorized</eref> to ask an application for permission to initiate an update. This does not constitute a privilege inversion because an explicit request for authorization has been provided by the Update Authority in the form of the suit-condition-update-authorized command.</t>

<t>Applications MAY define their own meanings for the update priority. For example, critical reliability &amp; vulnerability fixes MAY be given negative numbers, while bug fixes MAY be given small positive numbers, and feature additions MAY be given larger positive numbers, which allows an application to make an informed decision about whether and when to allow an update to proceed.</t>

</section>
<section anchor="suit-parameter-version" title="suit-parameter-version">

<t>Indicates allowable versions for the specified component. Allowable versions can be specified, either with a list or with range matching. This parameter is compared with version asserted by the current component when <xref target="suit-condition-version"></xref> is invoked. The current component may assert the current version in many ways, including storage in a parameter storage database, in a metadata object, or in a known location within the component itself.</t>

<t>The component version can be compared as:</t>

<t><list style="symbols">
  <t>Greater.</t>
  <t>Greater or Equal.</t>
  <t>Equal.</t>
  <t>Lesser or Equal.</t>
  <t>Lesser.</t>
</list></t>

<t>Versions are encoded as a CBOR list of integers. Comparisons are done on each integer in sequence. Comparison stops after all integers in the list defined by the manifest have been consumed OR after a non-equal match has occurred. For example, if the manifest defines a comparison, “Equal [1]”, then this will match all version sequences starting with 1. If a manifest defines both “Greater or Equal [1,0]” and “Lesser [1,10]”, then it will match versions 1.0.x up to, but not including 1.10.</t>

<t>While the exact encoding of versions is application-defined, semantic versions map conveniently. For example,</t>

<t><list style="symbols">
  <t>1.2.3 = [1,2,3].</t>
  <t>1.2-rc3 = [1,2,-1,3].</t>
  <t>1.2-beta = [1,2,-2].</t>
  <t>1.2-alpha = [1,2,-3].</t>
  <t>1.2-alpha4 = [1,2,-3,4].</t>
</list></t>

<t>suit-condition-version is OPTIONAL to implement.</t>

<t>Versions SHOULD be provided as follows:</t>

<t><list style="numbers">
  <t>The first integer represents the major number. This indicates breaking changes to the component.</t>
  <t>The second integer represents the minor number. This is typically reserved for new features or large, non-breaking changes.</t>
  <t>The third integer is the patch version. This is typically reserved for bug fixes.</t>
  <t>The fourth integer is the build number.</t>
</list></t>

<t>Where Alpha (-3), Beta (-2), and Release Candidate (-1) are used, they are inserted as a negative number between Minor and Patch numbers. This allows these releases to compare correctly with final releases. For example, Version 2.0, RC1 should be lower than Version 2.0.0 and higher than any Version 1.x. By encoding RC as -1, this works correctly: [2,0,-1,1] compares as lower than [2,0,0]. Similarly, beta (-2) is lower than RC and alpha (-3) is lower than RC.</t>

</section>
<section anchor="suit-parameter-wait-info" title="suit-parameter-wait-info">

<t>suit-directive-wait <xref target="suit-directive-wait"/> directs the manifest processor to pause until a specified event occurs. The suit-parameter-wait-info encodes the parameters needed for the directive.</t>

<t>The exact implementation of the pause is implementation-defined. For example, this could be done by blocking on a semaphore, registering an event handler and suspending the manifest processor, polling for a notification, or aborting the update entirely, then restarting when a notification is received.</t>

<t>suit-parameter-wait-info is encoded as a map of wait events. When ALL wait events are satisfied, the Manifest Processor continues. The wait events currently defined are described in the following table.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Encoding</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>suit-wait-event-authorization</c>
      <c>int</c>
      <c>Same as <xref target="suit-parameter-update-priority"/></c>
      <c>suit-wait-event-power</c>
      <c>int</c>
      <c>Wait until power state</c>
      <c>suit-wait-event-network</c>
      <c>int</c>
      <c>Wait until network state</c>
      <c>suit-wait-event-other-device-version</c>
      <c>See below</c>
      <c>Wait for other device to match version</c>
      <c>suit-wait-event-time</c>
      <c>uint</c>
      <c>Wait until time (POSIX timestamp)</c>
      <c>suit-wait-event-time-of-day</c>
      <c>uint</c>
      <c>Wait until seconds since 00:00:00</c>
      <c>suit-wait-event-day-of-week</c>
      <c>uint</c>
      <c>Wait until days since Sunday</c>
</texttable>

<t>suit-wait-event-other-device-version reuses the encoding of suit-parameter-version-match. It is encoded as a sequence that contains an implementation-defined bstr identifier for the other device, and a list of one or more SUIT_Parameter_Version_Match.</t>

</section>
<section anchor="suit-parameter-uri-list" title="suit-parameter-uri-list">

<t>Indicates a list of URIs from which to fetch a resource. The URI list is encoded as a list of tstr, in priority order. The Recipient should attempt to fetch the resource from each URI in turn, ruling out each, in order, if the resource is inaccessible or it is otherwise undesirable to fetch from that URI. suit-parameter-uri-list is consumed by <xref target="suit-directive-fetch-uri-list"/>.</t>

</section>
<section anchor="suit-parameter-fetch-arguments" title="suit-parameter-fetch-arguments">

<t>An implementation-defined set of arguments to <xref target="suit-directive-fetch"></xref>. Arguments are encoded in a bstr.</t>

</section>
<section anchor="suit-parameter-strict-order" title="suit-parameter-strict-order">

<t>The Strict Order Parameter allows a manifest to govern when directives can be executed out-of-order. This allows for systems that have a sensitivity to order of updates to choose the order in which they are executed. It also allows for more advanced systems to parallelize their handling of updates. Strict Order defaults to True. It MAY be set to False when the order of operations does not matter. When arriving at the end of a command sequence, ALL commands MUST have completed, regardless of the state of SUIT_Parameter_Strict_Order. If SUIT_Parameter_Strict_Order is returned to True, ALL preceding commands MUST complete before the next command is executed.</t>

<t>See <xref target="parallel-processing"/> for behavioral description of Strict Order.</t>

</section>
<section anchor="suit-parameter-soft-failure" title="suit-parameter-soft-failure">

<t>When executing a command sequence inside <xref target="suit-directive-try-each"></xref> or <xref target="suit-directive-run-sequence"></xref> and a condition failure occurs, the manifest processor aborts the sequence. For suit-directive-try-each, if Soft Failure is True, the next sequence in Try Each is invoked, otherwise suit-directive-try-each fails with the condition failure code. In suit-directive-run-sequence, if Soft Failure is True the suit-directive-run-sequence simply halts with no side-effects and the Manifest Processor continues with the following command, otherwise, the suit-directive-run-sequence fails with the condition failure code.</t>

<t>suit-parameter-soft-failure is scoped to the enclosing SUIT_Command_Sequence. Its value is discarded when SUIT_Command_Sequence terminates. It MUST NOT be set outside of suit-directive-try-each or suit-directive-run-sequence.</t>

<t>When suit-directive-try-each is invoked, Soft Failure defaults to True. An Update Author may choose to set Soft Failure to False if they require a failed condition in a sequence to force an Abort.</t>

<t>When suit-directive-run-sequence is invoked, Soft Failure defaults to False. An Update Author may choose to make failures soft within a suit-directive-run-sequence.</t>

</section>
<section anchor="suit-parameter-custom" title="suit-parameter-custom">

<t>This parameter is an extension point for any proprietary, application specific conditions and directives.</t>

</section>
</section>
<section anchor="suitcondition" title="SUIT_Condition">

<t>Conditions are used to define mandatory properties of a system in order for an update to be applied. They can be pre-conditions or post-conditions of any directive or series of directives, depending on where they are placed in the list. All Conditions specify a Reporting Policy as described <xref target="reporting-policy"/>. Conditions include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Vendor Identifier</c>
      <c>suit-condition-vendor-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Class Identifier</c>
      <c>suit-condition-class-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Device Identifier</c>
      <c>suit-condition-device-identifier</c>
      <c><xref target="identifier-conditions"/></c>
      <c>Image Match</c>
      <c>suit-condition-image-match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>Image Not Match</c>
      <c>suit-condition-image-not-match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>Use Before</c>
      <c>suit-condition-use-before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>Component Offset</c>
      <c>suit-condition-component-offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>Minimum Battery</c>
      <c>suit-condition-minimum-battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>Update Authorized</c>
      <c>suit-condition-update-authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>Version</c>
      <c>suit-condition-version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>Custom Condition</c>
      <c>SUIT_Condition_Custom</c>
      <c><xref target="SUIT_Condition_Custom "/></c>
</texttable>

<t>The abstract description of these conditions is defined in <xref target="command-behavior"/>.</t>

<t>Conditions compare parameters against properties of the system. These properties may be asserted in many different ways, including: calculation on-demand, volatile definition in memory, static definition within the manifest processor, storage in known location within an image, storage within a key storage system, storage in One-Time-Programmable memory, inclusion in mask ROM, or inclusion as a register in hardware. Some of these assertion methods are global in scope, such as a hardware register, some are scoped to an individual component, such as storage at a known location in an image, and some assertion methods can be either global or component-scope, based on implementation.</t>

<t>Each condition MUST report a result code on completion. If a condition reports failure, then the current sequence of commands MUST terminate. A subsequent command or command sequence MAY continue executing if <xref target="suit-parameter-soft-failure"></xref> is set. If a condition requires additional information, this MUST be specified in one or more parameters before the condition is executed. If a Recipient attempts to process a condition that expects additional information and that information has not been set, it MUST report a failure. If a Recipient encounters an unknown condition, it MUST report a failure.</t>

<t>Condition labels in the positive number range are reserved for IANA registration while those in the negative range are custom conditions reserved for proprietary use. See <xref target="iana"/> for more details.</t>

<section anchor="identifier-conditions" title="suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier">

<t>There are three identifier-based conditions: suit-condition-vendor-identifier, suit-condition-class-identifier, and suit-condition-device-identifier. Each of these conditions match a RFC 4122 <xref target="RFC4122"/> UUID that MUST have already been set as a parameter. The installing Recipient MUST match the specified UUID in order to consider the manifest valid. These identifiers are scoped by component in the manifest. The Recipient MAY treat them as scoped by component or as global identifiers.</t>

<t>The Recipient uses the ID parameter that has already been set using the Set Parameters directive. If no ID has been set, this condition fails. suit-condition-class-identifier and suit-condition-vendor-identifier are REQUIRED to implement. suit-condition-device-identifier is OPTIONAL to implement.</t>

<t>Each identifier condition compares the corresponding identifier parameter to a parameter asserted to the Manifest Processor by the Recipient. Identifiers MUST be known to the Manifest Processor in order to evaluate compatibility.</t>

<t>Globally-scoped identifiers MUST match, regardless of current component index. Component-scoped identifiers match only when the current component index resolves to the component associated with the component-scoped identifier.</t>

</section>
<section anchor="suit-condition-image-match" title="suit-condition-image-match">

<t>Verify that the current component matches the <xref target="suit-parameter-image-digest"></xref> for the current component. The digest is verified against the digest specified in the Component’s parameters list. If no digest is specified, the condition fails. suit-condition-image-match is REQUIRED to implement.</t>

</section>
<section anchor="suit-condition-image-not-match" title="suit-condition-image-not-match">

<t>Verify that the current component does not match the <xref target="suit-parameter-image-digest"></xref>. If no digest is specified, the condition fails. suit-condition-image-not-match is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-use-before" title="suit-condition-use-before">

<t>Verify that the current time is BEFORE the specified time. suit-condition-use-before is used to specify the last time at which an update should be installed. The recipient evaluates the current time against the <xref target="suit-parameter-use-before">suit-parameter-use-before parameter</xref>, which must have already been set as a parameter, encoded as a POSIX timestamp, that is seconds after 1970-01-01 00:00:00. Timestamp conditions MUST be evaluated in 64 bits, regardless of encoded CBOR size. suit-condition-use-before is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-component-offset" title="suit-condition-component-offset">

<t>Verify that the offset of the current component matches the offset set in <xref target="suit-parameter-component-offset"></xref>. This condition allows a manifest to select between several images to match a target offset.</t>

</section>
<section anchor="suit-condition-minimum-battery" title="suit-condition-minimum-battery">

<t>suit-condition-minimum-battery provides a mechanism to test a Recipient’s battery level before installing an update. This condition is primarily for use in primary-cell applications, where the battery is only ever discharged. For batteries that are charged, suit-directive-wait is more appropriate, since it defines a “wait” until the battery level is sufficient to install the update. suit-condition-minimum-battery is specified in mWh. suit-condition-minimum-battery is OPTIONAL to implement. suit-condition-minimum-battery consumes <xref target="suit-parameter-minimum-battery"></xref>.</t>

</section>
<section anchor="suit-condition-update-authorized" title="suit-condition-update-authorized">

<t>Request Authorization from the application and fail if not authorized. This can allow a user to decline an update. <xref target="suit-parameter-update-priority"></xref> provides an integer priority level that the application can use to determine whether or not to authorize the update. Priorities are application defined. suit-condition-update-authorized is OPTIONAL to implement.</t>

</section>
<section anchor="suit-condition-version" title="suit-condition-version">

<t>suit-condition-version allows comparing versions of firmware. Verifying image digests is preferred to version checks because digests are more precise. suit-condition-version examines a component’s version against the version info specified in <xref target="suit-parameter-version"></xref></t>

</section>
<section anchor="SUIT_Condition_Custom" title="SUIT_Condition_Custom">

<t>SUIT_Condition_Custom describes any proprietary, application specific condition. This is encoded as a negative integer, chosen by the firmware developer. If additional information must be provided to the condition, it should be encoded in a custom parameter (a nint) as described in <xref target="secparameters"/>. SUIT_Condition_Custom is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="suitdirective" title="SUIT_Directive">
<t>Directives are used to define the behavior of the recipient. Directives include:</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>CDDL Structure</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>Set Component Index</c>
      <c>suit-directive-set-component-index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>Set Dependency Index</c>
      <c>suit-directive-set-dependency-index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>Abort</c>
      <c>suit-directive-abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>Try Each</c>
      <c>suit-directive-try-each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>Process Dependency</c>
      <c>suit-directive-process-dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>Set Parameters</c>
      <c>suit-directive-set-parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>Override Parameters</c>
      <c>suit-directive-override-parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>Fetch</c>
      <c>suit-directive-fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>Copy</c>
      <c>suit-directive-copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>Run</c>
      <c>suit-directive-run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>Wait For Event</c>
      <c>suit-directive-wait</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>Run Sequence</c>
      <c>suit-directive-run-sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>Swap</c>
      <c>suit-directive-swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>Fetch URI list</c>
      <c>suit-directive-fetch-uri-list</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
</texttable>

<t>The abstract description of these commands is defined in <xref target="command-behavior"/>.</t>

<t>When a Recipient executes a Directive, it MUST report a result code. If the Directive reports failure, then the current Command Sequence MUST terminate.</t>

<section anchor="suit-directive-set-component-index" title="suit-directive-set-component-index">

<t>Set Component Index defines the component to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into suit-components. If the following directives apply to ALL components, then the boolean value “True” is used instead of an index. If the following directives apply to NO components, then the boolean value “False” is used. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied.</t>

</section>
<section anchor="suit-directive-set-dependency-index" title="suit-directive-set-dependency-index">

<t>Set Dependency Index defines the manifest to which successive directives and conditions will apply. The supplied argument MUST be either a boolean or an unsigned integer index into the dependencies. If the following directives apply to ALL dependencies, then the boolean value “True” is used instead of an index. If the following directives apply to NO dependencies, then the boolean value “False” is used. When suit-directive-set-component-index is used, suit-directive-set-dependency-index = False is implied. When suit-directive-set-dependency-index is used, suit-directive-set-component-index = False is implied.</t>

<t>Typical operations that require suit-directive-set-dependency-index include setting a source URI or Encryption Information, invoking “Fetch,” or invoking “Process Dependency” for an individual dependency.</t>

</section>
<section anchor="suit-directive-abort" title="suit-directive-abort">

<t>Unconditionally fail. This operation is typically used in conjunction with suit-directive-try-each.</t>

</section>
<section anchor="suit-directive-try-each" title="suit-directive-try-each">

<t>This command runs several SUIT_Command_Sequence, one after another, in a strict order. Use this command to implement a “try/catch-try/catch” sequence. Manifest processors MAY implement this command.</t>

<t><xref target="suit-parameter-soft-failure"></xref> is initialized to True at the beginning of each sequence. If one sequence aborts due to a condition failure, the next is started. If no sequence completes without condition failure, then suit-directive-try-each returns an error. If a particular application calls for all sequences to fail and still continue, then an empty sequence (nil) can be added to the Try Each Argument.</t>

<t>The argument to suit-directive-try-each is a list of SUIT_Command_Sequence. suit-directive-try-each does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency" title="suit-directive-process-dependency">

<t>Execute the commands in the common section of the current dependency, followed by the commands in the equivalent section of the current dependency. For example, if the current section is “fetch payload,” this will execute “common” in the current dependency, then “fetch payload” in the current dependency. Once this is complete, the command following suit-directive-process-dependency will be processed.</t>

<t>If the current dependency is False, this directive has no effect. If the current dependency is True, then this directive applies to all dependencies. If the current section is “common,” this directive MUST have no effect.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the dependency.</t>

</section>
<section anchor="suit-directive-set-parameters" title="suit-directive-set-parameters">

<t>suit-directive-set-parameters allows the manifest to configure behavior of future directives by changing parameters that are read by those directives. When dependencies are used, suit-directive-set-parameters also allows a manifest to modify the behavior of its dependencies.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>If a parameter is already set, suit-directive-set-parameters will skip setting the parameter to its argument. This provides the core of the override mechanism, allowing dependent manifests to change the behavior of a manifest.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-override-parameters" title="suit-directive-override-parameters">

<t>suit-directive-override-parameters replaces any listed parameters that are already set with the values that are provided in its argument. This allows a manifest to prevent replacement of critical parameters.</t>

<t>Available parameters are defined in <xref target="secparameters"/>.</t>

<t>suit-directive-override-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-fetch" title="suit-directive-fetch">

<t>suit-directive-fetch instructs the manifest processor to obtain one or more manifests or payloads, as specified by the manifest index and component index, respectively.</t>

<t>suit-directive-fetch can target one or more manifests and one or more payloads. suit-directive-fetch retrieves each component and each manifest listed in component-index and dependency-index, respectively. If component-index or dependency-index is True, instead of an integer, then all current manifest components/manifests are fetched. The current manifest’s dependent-components are not automatically fetched. In order to pre-fetch these, they MUST be specified in a component-index integer.</t>

<t>suit-directive-fetch typically takes no arguments unless one is needed to modify fetch behavior. If an argument is needed, it must be wrapped in a bstr and set in suit-parameter-fetch-arguments.</t>

<t>suit-directive-fetch reads the URI parameter to find the source of the fetch it performs.</t>

<t>The behavior of suit-directive-fetch can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-fetch.</t>

</section>
<section anchor="suit-directive-fetch-uri-list" title="suit-directive-fetch-uri-list">

<t>suit-directive-fetch-uri-list uses the same semantics as <xref target="suit-directive-fetch"></xref>, however it iterates over the <xref target="suit-parameter-uri-list">URI List</xref> to select a URI to fetch from.</t>

</section>
<section anchor="suit-directive-copy" title="suit-directive-copy">

<t>suit-directive-copy instructs the manifest processor to obtain one or more payloads, as specified by the component index. suit-directive-copy retrieves each component listed in component-index, respectively. If component-index is True, instead of an integer, then all current manifest components are copied. The current manifest’s dependent-components are not automatically copied. In order to copy these, they MUST be specified in a component-index integer.</t>

<t>The behavior of suit-directive-copy can be modified by setting one or more of SUIT_Parameter_Encryption_Info, SUIT_Parameter_Compression_Info, SUIT_Parameter_Unpack_Info. These three parameters each activate and configure a processing step that can be applied to the data that is transferred during suit-directive-copy.</t>

<t>suit-directive-copy reads its source from <xref target="suit-parameter-source-component"></xref>.</t>

</section>
<section anchor="suit-directive-run" title="suit-directive-run">

<t>suit-directive-run directs the manifest processor to transfer execution to the current Component Index. When this is invoked, the manifest processor MAY be unloaded and execution continues in the Component Index. Arguments are provided to suit-directive-run through <xref target="suit-parameter-run-args">suit-parameter-run-arguments</xref> and are forwarded to the executable code located in Component Index in an application-specific way. For example, this could form the Linux Kernel Command Line if booting a Linux device.</t>

<t>If the executable code at Component Index is constructed in such a way that it does not unload the manifest processor, then the manifest processor may resume execution after the executable completes. This allows the manifest processor to invoke suitable helpers and to verify them with image conditions.</t>

</section>
<section anchor="suit-directive-wait" title="suit-directive-wait">

<t>suit-directive-wait directs the manifest processor to pause until a specified event occurs. Some possible events include:</t>

<t><list style="numbers">
  <t>Authorization</t>
  <t>External Power</t>
  <t>Network availability</t>
  <t>Other Device Firmware Version</t>
  <t>Time</t>
  <t>Time of Day</t>
  <t>Day of Week</t>
</list></t>

</section>
<section anchor="suit-directive-run-sequence" title="suit-directive-run-sequence">

<t>To enable conditional commands, and to allow several strictly ordered sequences to be executed out-of-order, suit-directive-run-sequence allows the manifest processor to execute its argument as a SUIT_Command_Sequence. The argument must be wrapped in a bstr.</t>

<t>When a sequence is executed, any failure of a condition causes immediate termination of the sequence.</t>

<t>When suit-directive-run-sequence completes, it forwards the last status code that occurred in the sequence. If the Soft Failure parameter is true, then suit-directive-run-sequence only fails when a directive in the argument sequence fails.</t>

<t><xref target="suit-parameter-soft-failure"></xref> defaults to False when suit-directive-run-sequence begins. Its value is discarded when suit-directive-run-sequence terminates.</t>

</section>
<section anchor="suit-directive-swap" title="suit-directive-swap">

<t>suit-directive-swap instructs the manifest processor to move the source to the destination and the destination to the source simultaneously. Swap has nearly identical semantics to suit-directive-copy except that suit-directive-swap replaces the source with the current contents of the destination in an application-defined way. If SUIT_Parameter_Compression_Info or SUIT_Parameter_Encryption_Info are present, they MUST be handled in a symmetric way, so that the source is decompressed into the destination and the destination is compressed into the source. The source is decrypted into the destination and the destination is encrypted into the source. suit-directive-swap is OPTIONAL to implement.</t>

</section>
</section>
<section anchor="integrity-checks" title="Integrity Check Values">

<t>When the CoSWID, Text section, or any Command Sequence of the Update Procedure is made severable, it is moved to the Envelope and replaced with a SUIT_Digest. The SUIT_Digest is computed over the entire bstr enclosing the Manifest element that has been moved to the Envelope. Each element that is made severable from the Manifest is placed in the Envelope with an identical key, so that it matches the key of the corresponding Integrity Check Value.</t>

<t>Each Integrity Check Value covers the corresponding Envelope Element as described in <xref target="severable-fields"/>.</t>

</section>
</section>
<section anchor="severable-fields" title="Severable Elements">

<t>Because the manifest can be used by different actors at different times, some parts of the manifest can be removed or “Severed” without affecting later stages of the lifecycle. Severing of information is achieved by separating that information from the signed container so that removing it does not affect the signature. This means that ensuring integrity of severable parts of the manifest is a requirement for the signed portion of the manifest. Severing some parts makes it possible to discard parts of the manifest that are no longer necessary. This is important because it allows the storage used by the manifest to be greatly reduced. For example, no text size limits are needed if text is removed from the manifest prior to delivery to a constrained device.</t>

<t>Elements are made severable by removing them from the manifest, encoding them in a bstr, and placing a SUIT_Digest of the bstr in the manifest so that they can still be authenticated. The SUIT_Digest typically consumes 4 bytes more than the size of the raw digest, therefore elements smaller than (Digest Bits)/8 + 4 SHOULD NOT be severable. Elements larger than (Digest Bits)/8 + 4 MAY be severable, while elements that are much larger than (Digest Bits)/8 + 4 SHOULD be severable.</t>

<t>Because of this, all command sequences in the manifest are encoded in a bstr so that there is a single code path needed for all command sequences.</t>

</section>
</section>
<section anchor="access-control-lists" title="Access Control Lists">

<t>To manage permissions in the manifest, there are three models that can be used.</t>

<t>First, the simplest model requires that all manifests are authenticated by a single trusted key. This mode has the advantage that only a root manifest needs to be authenticated, since all of its dependencies have digests included in the root manifest.</t>

<t>This simplest model can be extended by adding key delegation without much increase in complexity.</t>

<t>A second model requires an ACL to be presented to the Recipient, authenticated by a trusted party or stored on the Recipient. This ACL grants access rights for specific component IDs or component ID prefixes to the listed identities or identity groups. Any identity may verify an image digest, but fetching into or fetching from a component ID requires approval from the ACL.</t>

<t>A third model allows a Recipient to provide even more fine-grained controls: The ACL lists the component ID or component ID prefix that an identity may use, and also lists the commands that the identity may use in combination with that component ID.</t>

</section>
<section anchor="SUIT_Digest" title="SUIT Digest Container">

<t>RFC 8152 <xref target="RFC8152"/> provides containers for signature, MAC, and encryption, but no basic digest container. The container needed for a digest requires a type identifier and a container for the raw digest data. Some forms of digest may require additional parameters. These can be added following the digest.</t>

<t>The SUIT digest is a CBOR List containing two elements: a suit-digest-algorithm-id and a bstr containing the bytes of the digest.</t>

</section>
<section anchor="iana" title="IANA Considerations">

<t>IANA is requested to allocate a CBOR tag for the SUIT Envelope and another for the SUIT Manifest.</t>

<t>IANA is requested to setup a registry for SUIT manifests.
Several registries defined in the subsections below need to be created.</t>

<t>For each registry, values 0-23 are Standards Action, 24-255 are IETF Review, 256-65535 are Expert Review, and 65536 or greater are First Come First Served.</t>

<t>Negative values -23 to 0 are Experimental Use, -24 and lower are Private Use.</t>

<section anchor="suit-commands" title="SUIT Commands">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor Identifier</c>
      <c>2</c>
      <c>Class Identifier</c>
      <c>3</c>
      <c>Image Match</c>
      <c>4</c>
      <c>Use Before</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>12</c>
      <c>Set Component Index</c>
      <c>13</c>
      <c>Set Dependency Index</c>
      <c>14</c>
      <c>Abort</c>
      <c>15</c>
      <c>Try Each</c>
      <c>16</c>
      <c>Reserved</c>
      <c>17</c>
      <c>Reserved</c>
      <c>18</c>
      <c>Process Dependency</c>
      <c>19</c>
      <c>Set Parameters</c>
      <c>20</c>
      <c>Override Parameters</c>
      <c>21</c>
      <c>Fetch</c>
      <c>22</c>
      <c>Copy</c>
      <c>23</c>
      <c>Run</c>
      <c>24</c>
      <c>Device Identifier</c>
      <c>25</c>
      <c>Image Not Match</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>27</c>
      <c>Update Authorized</c>
      <c>28</c>
      <c>Version</c>
      <c>29</c>
      <c>Wait For Event</c>
      <c>30</c>
      <c>Run Sequence</c>
      <c>32</c>
      <c>Swap</c>
      <c>nint</c>
      <c>Custom Condition</c>
</texttable>

</section>
<section anchor="suit-parameters" title="SUIT Parameters">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Vendor ID</c>
      <c>2</c>
      <c>Class ID</c>
      <c>3</c>
      <c>Image Digest</c>
      <c>4</c>
      <c>Use Before</c>
      <c>5</c>
      <c>Component Offset</c>
      <c>12</c>
      <c>Strict Order</c>
      <c>13</c>
      <c>Soft Failure</c>
      <c>14</c>
      <c>Image Size</c>
      <c>18</c>
      <c>Encryption Info</c>
      <c>19</c>
      <c>Compression Info</c>
      <c>20</c>
      <c>Unpack Info</c>
      <c>21</c>
      <c>URI</c>
      <c>22</c>
      <c>Source Component</c>
      <c>23</c>
      <c>Run Args</c>
      <c>24</c>
      <c>Device ID</c>
      <c>26</c>
      <c>Minimum Battery</c>
      <c>27</c>
      <c>Update Priority</c>
      <c>28</c>
      <c>Version</c>
      <c>29</c>
      <c>Wait Info</c>
      <c>30</c>
      <c>URI List</c>
      <c>31</c>
      <c>Component Index</c>
      <c>nint</c>
      <c>Custom</c>
</texttable>

</section>
<section anchor="suit-text-values" title="SUIT Text Values">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>Manifest Description</c>
      <c>2</c>
      <c>Update Description</c>
      <c>3</c>
      <c>Vendor Name</c>
      <c>4</c>
      <c>Model Name</c>
      <c>5</c>
      <c>Vendor Domain</c>
      <c>6</c>
      <c>Model Info</c>
      <c>7</c>
      <c>Component Description</c>
      <c>8</c>
      <c>Manifest JSON Source</c>
      <c>9</c>
      <c>Manifest YAML Source</c>
      <c>10</c>
      <c>Component Version Dependencies</c>
</texttable>

</section>
<section anchor="suit-algorithm-identifiers" title="SUIT Algorithm Identifiers">

<section anchor="suit-digest-algorithm-identifiers" title="SUIT Digest Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>SHA224</c>
      <c>2</c>
      <c>SHA256</c>
      <c>3</c>
      <c>SHA384</c>
      <c>4</c>
      <c>SHA512</c>
      <c>5</c>
      <c>SHA3-224</c>
      <c>6</c>
      <c>SHA3-256</c>
      <c>7</c>
      <c>SHA3-384</c>
      <c>8</c>
      <c>SHA3-512</c>
</texttable>

</section>
<section anchor="suit-compression-algorithm-identifiers" title="SUIT Compression Algorithm Identifiers">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>zlib</c>
      <c>2</c>
      <c>Brotli</c>
      <c>3</c>
      <c>zstd</c>
</texttable>

</section>
<section anchor="unpack-algorithms" title="Unpack Algorithms">

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <c>1</c>
      <c>HEX</c>
      <c>2</c>
      <c>ELF</c>
      <c>3</c>
      <c>COFF</c>
      <c>4</c>
      <c>SREC</c>
</texttable>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document is about a manifest format describing and protecting firmware images and as such it is part of a larger solution for offering a standardized way of delivering firmware updates to IoT devices. A detailed security treatment can be found in the architecture <xref target="I-D.ietf-suit-architecture"/> and in the information model <xref target="I-D.ietf-suit-information-model"/> documents.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank the following persons for their support in designing this mechanism:</t>

<t><list style="symbols">
  <t>Milosch Meriac</t>
  <t>Geraint Luff</t>
  <t>Dan Ros</t>
  <t>John-Paul Stanford</t>
  <t>Hugo Vincent</t>
  <t>Carsten Bormann</t>
  <t>Øyvind Rønningstad</t>
  <t>Frank Audun Kvamtrø</t>
  <t>Krzysztof Chruściński</t>
  <t>Andrzej Puzdrowski</t>
  <t>Michael Richardson</t>
  <t>David Brown</t>
  <t>Emmanuel Baccelli</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4122" target='https://www.rfc-editor.org/info/rfc4122'>
<front>
<title>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='M.' surname='Mealling' fullname='M. Mealling'><organization /></author>
<author initials='R.' surname='Salz' fullname='R. Salz'><organization /></author>
<date year='2005' month='July' />
<abstract><t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t><t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4122'/>
<seriesInfo name='DOI' value='10.17487/RFC4122'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-suit-architecture">
<front>
<title>A Firmware Update Architecture for Internet of Things</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Brown' fullname='David Brown'>
    <organization />
</author>

<author initials='M' surname='Meriac' fullname='Milosch Meriac'>
    <organization />
</author>

<date month='May' day='27' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Incorporating such update mechanism to fix vulnerabilities, to update configuration settings as well as adding new functionality is recommended by security experts.  This document lists requirements and describes an architecture for a firmware update mechanism suitable for IoT devices.  The architecture is agnostic to the transport of the firmware images and associated meta-data.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-architecture-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-architecture-11.txt' />
</reference>



<reference anchor="I-D.ietf-suit-information-model">
<front>
<title>An Information Model for Firmware Updates in IoT Devices</title>

<author initials='B' surname='Moran' fullname='Brendan Moran'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='H' surname='Birkholz' fullname='Henk Birkholz'>
    <organization />
</author>

<date month='June' day='2' year='2020' />

<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a solid and secure firmware update mechanism that is also suitable for constrained devices.  Ensuring that devices function and remain secure over their service life requires such an update mechanism to fix vulnerabilities, to update configuration settings, as well as adding new functionality.  One component of such a firmware update is a concise and machine- processable meta-data document, or manifest, that describes the firmware image(s) and offers appropriate protection.  This document describes the information that must be present in the manifest.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-suit-information-model-07' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-suit-information-model-07.txt' />
</reference>



<reference anchor="I-D.ietf-teep-architecture">
<front>
<title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>

<author initials='M' surname='Pei' fullname='Mingliang Pei'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>

<author initials='D' surname='Wheeler' fullname='David Wheeler'>
    <organization />
</author>

<date month='July' day='2' year='2020' />

<abstract><t>A Trusted Execution Environment (TEE) is an environment that enforces that any code within that environment cannot be tampered with, and that any data used by such code cannot be read or tampered with by any code outside that environment.  This architecture document motivates the design and standardization of a protocol for managing the lifecycle of trusted applications running inside such a TEE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-teep-architecture-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-teep-architecture-11.txt' />
</reference>



<reference  anchor="RFC7932" target='https://www.rfc-editor.org/info/rfc7932'>
<front>
<title>Brotli Compressed Data Format</title>
<author initials='J.' surname='Alakuijala' fullname='J. Alakuijala'><organization /></author>
<author initials='Z.' surname='Szabadka' fullname='Z. Szabadka'><organization /></author>
<date year='2016' month='July' />
<abstract><t>This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods.</t></abstract>
</front>
<seriesInfo name='RFC' value='7932'/>
<seriesInfo name='DOI' value='10.17487/RFC7932'/>
</reference>



<reference  anchor="RFC1950" target='https://www.rfc-editor.org/info/rfc1950'>
<front>
<title>ZLIB Compressed Data Format Specification version 3.3</title>
<author initials='P.' surname='Deutsch' fullname='P. Deutsch'><organization /></author>
<author initials='J-L.' surname='Gailly' fullname='J-L. Gailly'><organization /></author>
<date year='1996' month='May' />
<abstract><t>This specification defines a lossless compressed data format.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='1950'/>
<seriesInfo name='DOI' value='10.17487/RFC1950'/>
</reference>



<reference  anchor="RFC8392" target='https://www.rfc-editor.org/info/rfc8392'>
<front>
<title>CBOR Web Token (CWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='E.' surname='Wahlstroem' fullname='E. Wahlstroem'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2018' month='May' />
<abstract><t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8392'/>
<seriesInfo name='DOI' value='10.17487/RFC8392'/>
</reference>



<reference  anchor="RFC7228" target='https://www.rfc-editor.org/info/rfc7228'>
<front>
<title>Terminology for Constrained-Node Networks</title>
<author initials='C.' surname='Bormann' fullname='C. Bormann'><organization /></author>
<author initials='M.' surname='Ersue' fullname='M. Ersue'><organization /></author>
<author initials='A.' surname='Keranen' fullname='A. Keranen'><organization /></author>
<date year='2014' month='May' />
<abstract><t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t></abstract>
</front>
<seriesInfo name='RFC' value='7228'/>
<seriesInfo name='DOI' value='10.17487/RFC7228'/>
</reference>



<reference  anchor="RFC8747" target='https://www.rfc-editor.org/info/rfc8747'>
<front>
<title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='L.' surname='Seitz' fullname='L. Seitz'><organization /></author>
<author initials='G.' surname='Selander' fullname='G. Selander'><organization /></author>
<author initials='S.' surname='Erdtman' fullname='S. Erdtman'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2020' month='March' />
<abstract><t>This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to &quot;Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)&quot; (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t></abstract>
</front>
<seriesInfo name='RFC' value='8747'/>
<seriesInfo name='DOI' value='10.17487/RFC8747'/>
</reference>



<reference anchor="I-D.kucherawy-rfc8478bis">
<front>
<title>Zstandard Compression and the application/zstd Media Type</title>

<author initials='Y' surname='Collet' fullname='Yann Collet'>
    <organization />
</author>

<author initials='M' surname='Kucherawy' fullname='Murray Kucherawy'>
    <organization />
</author>

<date month='April' day='23' year='2020' />

<abstract><t>Zstandard, or "zstd" (pronounced "zee standard"), is a data compression mechanism.  This document describes the mechanism and registers a media type and content encoding to be used when transporting zstd-compressed content via Multipurpose Internet Mail Extensions (MIME).  It also registers a corresponding media type, content encoding, and structured syntax suffix.  Despite use of the word "standard" as part of its name, readers are advised that this document is not an Internet Standards Track specification; it is being published for informational purposes only.  This document replaces and obsoletes RFC 8478.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-kucherawy-rfc8478bis-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-kucherawy-rfc8478bis-05.txt' />
</reference>


<reference anchor="HEX" target="https://en.wikipedia.org/wiki/Intel_HEX">
  <front>
    <title>Intel HEX</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="SREC" target="https://en.wikipedia.org/wiki/SREC_(file_format)">
  <front>
    <title>SREC (file format)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="ELF" target="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
  <front>
    <title>Executable and Linkable Format (ELF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>
<reference anchor="COFF" target="https://en.wikipedia.org/wiki/COFF">
  <front>
    <title>Common Object File Format (COFF)</title>
    <author initials="." surname="Wikipedia">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section numbered="no" anchor="full-cddl" title="A. Full CDDL">
<t>In order to create a valid SUIT Manifest document the structure of the corresponding CBOR message MUST adhere to the following CDDL data definition.</t>

<figure><artwork type="CDDL"><![CDATA[
SUIT_Envelope = {
  ? suit-delegation => bstr .cbor SUIT_Delegation,
  ? suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  * $$SUIT_Envelope_Extensions,
  (int => bstr)
}

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

SUIT_Authentication = [ + bstr .cbor SUIT_Authentication_Block ]

SUIT_Authentication_Block /= COSE_Mac_Tagged
SUIT_Authentication_Block /= COSE_Sign_Tagged
SUIT_Authentication_Block /= COSE_Mac0_Tagged
SUIT_Authentication_Block /= COSE_Sign1_Tagged

SUIT_Severable_Manifest_Members = (
  ? suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence,
  ? suit-payload-fetch => bstr .cbor SUIT_Command_Sequence,
  ? suit-install => bstr .cbor SUIT_Command_Sequence,
  ? suit-text => bstr .cbor SUIT_Text_Map,
  ? suit-coswid => bstr .cbor concise-software-identity,
  * $$SUIT_severable-members-extensions,
)

COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : suit-digest-algorithm-ids,
  suit-digest-bytes : bstr,
  * $$SUIT_Digest-extensions
]

; Named Information Hash Algorithm Identifiers
suit-digest-algorithm-ids /= algorithm-id-sha224
suit-digest-algorithm-ids /= algorithm-id-sha256
suit-digest-algorithm-ids /= algorithm-id-sha384
suit-digest-algorithm-ids /= algorithm-id-sha512
suit-digest-algorithm-ids /= algorithm-id-sha3-224
suit-digest-algorithm-ids /= algorithm-id-sha3-256
suit-digest-algorithm-ids /= algorithm-id-sha3-384
suit-digest-algorithm-ids /= algorithm-id-sha3-512

algorithm-id-sha224 = 1
algorithm-id-sha256 = 2
algorithm-id-sha384 = 3
algorithm-id-sha512 = 4
algorithm-id-sha3-224 = 5
algorithm-id-sha3-256 = 6
algorithm-id-sha3-384 = 7
algorithm-id-sha3-512 = 8

SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members,
    SUIT_Severable_Members_Digests,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Unseverable_Members = (
  ? suit-validate => bstr .cbor SUIT_Command_Sequence,
  ? suit-load => bstr .cbor SUIT_Command_Sequence,
  ? suit-run => bstr .cbor SUIT_Command_Sequence,
  * $$unserverble-manifest-member-extensions,
)

SUIT_Severable_Members_Digests = (
  ? suit-dependency-resolution-digest => SUIT_Digest,
  ? suit-payload-fetch-digest => SUIT_Digest,
  ? suit-install-digest => SUIT_Digest,
  ? suit-text-digest => SUIT_Digest,
  ? suit-coswid-digest => SUIT_Digest,
  * $$severable-manifest-members-digests-extensions
)

SUIT_Common = {
    ? suit-dependencies           => SUIT_Dependencies,
    ? suit-components             => SUIT_Components,
    ? suit-common-sequence        => bstr .cbor SUIT_Common_Sequence,
    * $$SUIT_Common-extensions,
}

SUIT_Dependencies         = [ + SUIT_Dependency ]
SUIT_Components           = [ + SUIT_Component_Identifier ]

concise-software-identity = any

SUIT_Dependency = {
    suit-dependency-digest => SUIT_Digest,
    ? suit-dependency-prefix => SUIT_Component_Identifier,
    * $$SUIT_Dependency-extensions,
}

SUIT_Component_Identifier =  [* bstr]


SUIT_Component_Reference = {
    suit-component-identifier => SUIT_Component_Identifier,
    suit-component-dependency-index => uint
}

SUIT_Common_Sequence = [
    + ( SUIT_Condition // SUIT_Common_Commands )
]

SUIT_Common_Commands //= (suit-directive-set-component-index,  uint/bool)
SUIT_Common_Commands //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Common_Commands //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Common_Commands //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Common_Commands //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Common_Commands //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})


SUIT_Command_Sequence = [ + (
    SUIT_Condition // SUIT_Directive // SUIT_Command_Custom
) ]

SUIT_Command_Custom = (suit-command-custom, bstr/tstr/int/nil)
SUIT_Condition //= (suit-condition-vendor-identifier, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-class-identifier,  SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-device-identifier, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-image-match,       SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-image-not-match,   SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-use-before,        SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-minimum-battery,   SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-update-authorized, SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-version,           SUIT_Reporting_Policy)
SUIT_Condition //= (suit-condition-component-offset,  SUIT_Reporting_Policy)

SUIT_Directive //= (suit-directive-set-component-index,  uint/bool)
SUIT_Directive //= (suit-directive-set-dependency-index, uint/bool)
SUIT_Directive //= (suit-directive-run-sequence,
    bstr .cbor SUIT_Command_Sequence)
SUIT_Directive //= (suit-directive-try-each,
    SUIT_Directive_Try_Each_Argument)
SUIT_Directive //= (suit-directive-process-dependency,   SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-override-parameters,
    {+ SUIT_Parameters})
SUIT_Directive //= (suit-directive-fetch,                SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-copy,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-swap,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-run,                  SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-wait,                 SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-abort,                SUIT_Reporting_Policy)
SUIT_Directive //= (suit-directive-fetch-uri-list,       SUIT_Reporting_Policy)

SUIT_Directive_Try_Each_Argument = [
    + bstr .cbor SUIT_Command_Sequence,
    nil / bstr .cbor SUIT_Command_Sequence
]

SUIT_Reporting_Policy = uint .bits suit-reporting-bits

suit-reporting-bits = &(
    suit-send-record-success : 0,
    suit-send-record-failure : 1,
    suit-send-sysinfo-success : 2,
    suit-send-sysinfo-failure : 3
)

SUIT_Command_ID /= suit-command-custom
SUIT_Command_ID /= suit-condition-vendor-identifier
SUIT_Command_ID /= suit-condition-class-identifier
SUIT_Command_ID /= suit-condition-image-match
SUIT_Command_ID /= suit-condition-use-before
SUIT_Command_ID /= suit-condition-component-offset
SUIT_Command_ID /= suit-condition-device-identifier
SUIT_Command_ID /= suit-condition-image-not-match
SUIT_Command_ID /= suit-condition-minimum-battery
SUIT_Command_ID /= suit-condition-update-authorized
SUIT_Command_ID /= suit-condition-version
SUIT_Command_ID /= suit-directive-set-component-index
SUIT_Command_ID /= suit-directive-set-dependency-index
SUIT_Command_ID /= suit-directive-abort
SUIT_Command_ID /= suit-directive-try-each
;SUIT_Command_ID /= suit-directive-do-each
;SUIT_Command_ID /= suit-directive-map-filter
SUIT_Command_ID /= suit-directive-process-dependency
SUIT_Command_ID /= suit-directive-set-parameters
SUIT_Command_ID /= suit-directive-override-parameters
SUIT_Command_ID /= suit-directive-fetch
SUIT_Command_ID /= suit-directive-copy
SUIT_Command_ID /= suit-directive-run
SUIT_Command_ID /= suit-directive-wait
SUIT_Command_ID /= suit-directive-run-sequence
SUIT_Command_ID /= suit-directive-swap
SUIT_Command_ID /= suit-directive-fetch-uri-list

suit-record = {
  suit-record-success             => bool/int,
  ? suit-record-component-id      => SUIT_Component_ID,
  ? suit-record-dependency-id     => SUIT_Digest,
  ? suit-record-command-sequence-id => (
      suit-common-sequence /
      suit-dependency-resolution /
      suit-payload-fetch /
      suit-install /
      suit-validate /
      suit-load /
      suit-run /
      * $$suit-command-sequence-list-extensions
  ),
  ? suit-record-interpeter-offset => uint,
  ? suit-record-command-id        => SUIT_Command_ID,
  ? suit-record-params            => SUIT_Parameters,
  ? suit-record-actual            => SUIT_Parameters,
  * $$suit-record-extensions
}

SUIT_Wait_Event = { + SUIT_Wait_Events }

SUIT_Wait_Events //= (suit-wait-event-authorization => int)
SUIT_Wait_Events //= (suit-wait-event-power => int)
SUIT_Wait_Events //= (suit-wait-event-network => int)
SUIT_Wait_Events //= (suit-wait-event-other-device-version
    => SUIT_Wait_Event_Argument_Other_Device_Version)
SUIT_Wait_Events //= (suit-wait-event-time => uint); Timestamp
SUIT_Wait_Events //= (suit-wait-event-time-of-day
    => uint); Time of Day (seconds since 00:00:00)
SUIT_Wait_Events //= (suit-wait-event-day-of-week
    => uint); Days since Sunday

SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [ + SUIT_Parameter_Version_Match ]
]

SUIT_Parameters //= (suit-parameter-vendor-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-class-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-image-digest
    => bstr .cbor SUIT_Digest)
SUIT_Parameters //= (suit-parameter-image-size => uint)
SUIT_Parameters //= (suit-parameter-use-before => uint)
SUIT_Parameters //= (suit-parameter-component-offset => uint)

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-compression-info
    => bstr .cbor SUIT_Compression_Info)
SUIT_Parameters //= (suit-parameter-unpack-info
    => bstr .cbor SUIT_Unpack_Info)

SUIT_Parameters //= (suit-parameter-uri => tstr)
SUIT_Parameters //= (suit-parameter-source-component => uint)
SUIT_Parameters //= (suit-parameter-run-args => bstr)

SUIT_Parameters //= (suit-parameter-device-identifier => RFC4122_UUID)
SUIT_Parameters //= (suit-parameter-minimum-battery => uint)
SUIT_Parameters //= (suit-parameter-update-priority => uint)
SUIT_Parameters //= (suit-parameter-version =>
    SUIT_Parameter_Version_Match)
SUIT_Parameters //= (suit-parameter-wait-info =>
    bstr .cbor SUIT_Wait_Event)

SUIT_Parameters //= (suit-parameter-custom => int/bool/tstr/bstr)

SUIT_Parameters //= (suit-parameter-strict-order => bool)
SUIT_Parameters //= (suit-parameter-soft-failure => bool)

SUIT_Parameters //= (suit-parameter-uri-list =>
    bstr .cbor SUIT_URI_List)

RFC4122_UUID = bstr .size 16

SUIT_Parameter_Version_Match = [
    suit-condition-version-comparison-type:
        SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison-value:
        SUIT_Condition_Version_Comparison_Value
]
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-greater-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser-equal
SUIT_Condition_Version_Comparison_Types /=
    suit-condition-version-comparison-lesser

suit-condition-version-comparison-greater = 1
suit-condition-version-comparison-greater-equal = 2
suit-condition-version-comparison-equal = 3
suit-condition-version-comparison-lesser-equal = 4
suit-condition-version-comparison-lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
    suit-compression-algorithm => SUIT_Compression_Algorithms,
    * $$SUIT_Compression_Info-extensions,
}

SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zlib
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_brotli
SUIT_Compression_Algorithms /= SUIT_Compression_Algorithm_zstd

SUIT_Compression_Algorithm_zlib = 1
SUIT_Compression_Algorithm_brotli = 2
SUIT_Compression_Algorithm_zstd = 3

SUIT_Unpack_Info = {
    suit-unpack-algorithm => SUIT_Unpack_Algorithms,
    * $$SUIT_Unpack_Info-extensions,

}

SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Hex
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Elf
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Coff
SUIT_Unpack_Algorithms /= SUIT_Unpack_Algorithm_Srec

SUIT_Unpack_Algorithm_Hex = 1
SUIT_Unpack_Algorithm_Elf = 2
SUIT_Unpack_Algorithm_Coff = 3
SUIT_Unpack_Algorithm_Srec = 4

SUIT_URI_List = [+ tstr ]

SUIT_Text_Map = {
    ? suit-text-components =>
    [
        + {
            1 => SUIT_Component_Identifier
            SUIT_Text_Component_Keys
        }
    ],
    SUIT_Text_Keys
}

SUIT_Text_Component_Keys = (
    ? suit-text-vendor-name           => tstr,
    ? suit-text-model-name            => tstr,
    ? suit-text-vendor-domain         => tstr,
    ? suit-text-model-info            => tstr,
    ? suit-text-component-description => tstr,
    ? suit-text-component-version     => tstr,
    ? suit-text-version-required      => tstr,
    * $$suit-text-component-key-extensions
)

SUIT_Text_Keys = (
    ? suit-text-manifest-description => tstr,
    ? suit-text-update-description   => tstr,
    ? suit-text-manifest-json-source => tstr,
    ? suit-text-manifest-yaml-source => tstr,
    * $$suit-text-key-extensions
)

suit-delegation = 1
suit-authentication-wrapper = 2
suit-manifest = 3

suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-common = 3
suit-reference-uri = 4
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text = 13
suit-coswid = 14

suit-dependencies = 1
suit-components = 2
suit-dependency-components = 3
suit-common-sequence = 4

suit-dependency-digest = 1
suit-dependency-prefix = 2

suit-component-identifier = 1
suit-component-dependency-index = 2

suit-command-custom = nint

suit-condition-vendor-identifier = 1
suit-condition-class-identifier  = 2
suit-condition-image-match       = 3
suit-condition-use-before        = 4
suit-condition-component-offset  = 5

suit-condition-device-identifier        = 24
suit-condition-image-not-match          = 25
suit-condition-minimum-battery          = 26
suit-condition-update-authorized        = 27
suit-condition-version                  = 28

suit-directive-set-component-index      = 12
suit-directive-set-dependency-index     = 13
suit-directive-abort                    = 14
suit-directive-try-each                 = 15
;suit-directive-do-each                  = 16 ; TBD
;suit-directive-map-filter               = 17 ; TBD
suit-directive-process-dependency       = 18
suit-directive-set-parameters           = 19
suit-directive-override-parameters      = 20
suit-directive-fetch                    = 21
suit-directive-copy                     = 22
suit-directive-run                      = 23

suit-directive-wait                     = 29
suit-directive-fetch-uri-list           = 30
suit-directive-swap                     = 31
suit-directive-run-sequence             = 32

suit-wait-event-authorization = 1
suit-wait-event-power = 2
suit-wait-event-network = 3
suit-wait-event-other-device-version = 4
suit-wait-event-time = 5
suit-wait-event-time-of-day = 6
suit-wait-event-day-of-week = 7

suit-parameter-vendor-identifier = 1
suit-parameter-class-identifier  = 2
suit-parameter-image-digest      = 3
suit-parameter-use-before        = 4
suit-parameter-component-offset  = 5

suit-parameter-strict-order      = 12
suit-parameter-soft-failure      = 13
suit-parameter-image-size        = 14

suit-parameter-encryption-info   = 18
suit-parameter-compression-info  = 19
suit-parameter-unpack-info       = 20
suit-parameter-uri               = 21
suit-parameter-source-component  = 22
suit-parameter-run-args          = 23

suit-parameter-device-identifier = 24
suit-parameter-minimum-battery   = 26
suit-parameter-update-priority   = 27
suit-parameter-version           = 28
suit-parameter-wait-info         = 29
suit-parameter-uri-list          = 30

suit-parameter-custom = nint

suit-compression-algorithm = 1
suit-compression-parameters = 2

suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

suit-text-manifest-description  = 1
suit-text-update-description    = 2
suit-text-manifest-json-source  = 3
suit-text-manifest-yaml-source  = 4

suit-text-vendor-name           = 1
suit-text-model-name            = 2
suit-text-vendor-domain         = 3
suit-text-model-info            = 4
suit-text-component-description = 5
suit-text-component-version     = 6
suit-text-version-required      = 7
]]></artwork></figure>

</section>
<section numbered="no" anchor="examples" title="B. Examples">

<t>The following examples demonstrate a small subset of the functionality of the manifest. However, despite this, even a simple manifest processor can execute most of these manifests.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-0-secure-boot" title="Example 0: Secure Boot">

<t>Secure boot and compatibility check.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820655
f1230fd3833ca828c18200498fd1cd90656a9a2620c6989921c06623703515840a0416
20607b7765a51fe0566e5d8fed95491ee6df622132524fdbe67607bf7f2794d7a71dad
7230d3cab86c5091a226d00061b0a74a01b3d371e07d5b3eca3d4' / [
        h'd28443a10126a0582482025820655f1230fd3833ca828c18200498fd1cd9
0656a9a2620c6989921c06623703515840a041620607b7765a51fe0566e5d8fed95491
ee6df622132524fdbe67607bf7f2794d7a71dad7230d3cab86c5091a226d00061b0a74
a01b3d371e07d5b3eca3d4' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820655f1230fd3833ca828c18200498fd1c
d90656a9a2620c6989921c0662370351' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"655f1230fd3833ca828c18200498fd1cd90656a9a2620c6989921c0662370351"'
                ] /,
                / signature / h'"a041620607b7765a51fe0566e5d8fed95491e
e6df622132524fdbe67607bf7f2794d7a71dad7230d3cab86c5091a226d00061b0a74a
01b3d371e07d5b3eca3d4"'
            ]) /
    ] /,
    / manifest / 3:h'a501010201035860a20244818141000458568614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d001f602f60a438203f60c438217f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:1,
        / common / 3:h'a20244818141000458568614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112
233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f
602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'8217f6' / [
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  118</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035872a501010201035860a20244818141000458568614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450358248202582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100e1987d001f602f60a438203f60c438217f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  235</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a0582482025820655f1230fd3833ca828c
18200498fd1cd90656a9a2620c6989921c06623703515840a041620607b7
765a51fe0566e5d8fed95491ee6df622132524fdbe67607bf7f2794d7a71
dad7230d3cab86c5091a226d00061b0a74a01b3d371e07d5b3eca3d40358
72a501010201035860a20244818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d001f602f60a438203f60c438217f6
]]></artwork></figure>

</section>
<section anchor="example-1-simultaneous-download-and-installation-of-payload" title="Example 1: Simultaneous Download and Installation of Payload">

<t>Simultaneous download and installation of payload.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820815
32771898e4ebcccf12c607420eba62b5086192cac4c99692835b58ee62f7b584081592
1e5148e9b81e79d8be570de6bb42ba2e903c8549f0e13dee4d0ee420d90dd9f8537ebe
ad3f92b37df703539879129183b0beaf3ba75cacd8a91e075a24e' / [
        h'd28443a10126a058248202582081532771898e4ebcccf12c607420eba62b
5086192cac4c99692835b58ee62f7b5840815921e5148e9b81e79d8be570de6bb42ba2
e903c8549f0e13dee4d0ee420d90dd9f8537ebead3f92b37df703539879129183b0bea
f3ba75cacd8a91e075a24e' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582081532771898e4ebcccf12c607420eba6
2b5086192cac4c99692835b58ee62f7b' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"81532771898e4ebcccf12c607420eba62b5086192cac4c99692835b58ee62f7b"'
                ] /,
                / signature / h'"815921e5148e9b81e79d8be570de6bb42ba2e
903c8549f0e13dee4d0ee420d90dd9f8537ebead3f92b37df703539879129183b0beaf
3ba75cacd8a91e075a24e"'
            ]) /
    ] /,
    / manifest / 3:h'a501010202035860a20244818141000458568614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d001f602f60958258613a115781b687474703a2f2f6578616d706c652e636
f6d2f66696c652e62696e15f603f60a438203f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:2,
        / common / 3:h'a20244818141000458568614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112
233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f
602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  153</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a1035895a501010202035860a20244818141000458568614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450358248202582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100e1987d001f602f60958258613a115781b687474
703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a43
8203f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  270</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582081532771898e4ebcccf1
2c607420eba62b5086192cac4c99692835b58ee62f7b5840815921e5148e
9b81e79d8be570de6bb42ba2e903c8549f0e13dee4d0ee420d90dd9f8537
ebead3f92b37df703539879129183b0beaf3ba75cacd8a91e075a24e0358
95a501010202035860a20244818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d001f602f60958258613a115781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a438203f6
]]></artwork></figure>

</section>
<section anchor="example-2-simultaneous-download-installation-and-secure-boot" title="Example 2: Simultaneous Download, Installation, and Secure Boot">

<t>Compatibility test, simultaneous download and installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820883
90f8988639d8a2cfb6da969fce488333ac5ba77aaf0d66b5623009bbf341158401929f
fd488c455ab40eaf1aa96a7df4a9c16c658221055c3a113232fb81c5751a23a74b5efc
06c459eb47a07028ef3c6a0d9051185dd78899c654249f9070dea' / [
        h'd28443a10126a058248202582088390f8988639d8a2cfb6da969fce48833
3ac5ba77aaf0d66b5623009bbf341158401929ffd488c455ab40eaf1aa96a7df4a9c16
c658221055c3a113232fb81c5751a23a74b5efc06c459eb47a07028ef3c6a0d9051185
dd78899c654249f9070dea' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582088390f8988639d8a2cfb6da969fce488
333ac5ba77aaf0d66b5623009bbf3411' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"88390f8988639d8a2cfb6da969fce488333ac5ba77aaf0d66b5623009bbf3411"'
                ] /,
                / signature / h'"1929ffd488c455ab40eaf1aa96a7df4a9c16c
658221055c3a113232fb81c5751a23a74b5efc06c459eb47a07028ef3c6a0d9051185d
d78899c654249f9070dea"'
            ]) /
    ] /,
    / manifest / 3:h'a601010203035860a20244818141000458568614a40150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582
48202582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543
2100e1987d001f602f60958258613a115781b687474703a2f2f6578616d706c652e636
f6d2f66696c652e62696e15f603f60a438203f60c438217f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a20244818141000458568614a40150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112
233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f
602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8614a40150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab4503582482025820001122334455
66778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602f6'
/ [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'8613a115781b687474703a2f2f6578616d706c652e636f
6d2f66696c652e62696e15f603f6' / [
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'8217f6' / [
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  158</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a103589aa601010203035860a20244818141000458568614a40150fa6b4a
53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab
450358248202582000112233445566778899aabbccddeeff0123456789ab
cdeffedcba98765432100e1987d001f602f60958258613a115781b687474
703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a43
8203f60c438217f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  275</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582088390f8988639d8a2cfb
6da969fce488333ac5ba77aaf0d66b5623009bbf341158401929ffd488c4
55ab40eaf1aa96a7df4a9c16c658221055c3a113232fb81c5751a23a74b5
efc06c459eb47a07028ef3c6a0d9051185dd78899c654249f9070dea0358
9aa601010203035860a20244818141000458568614a40150fa6b4a53d5ad
5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358
248202582000112233445566778899aabbccddeeff0123456789abcdeffe
dcba98765432100e1987d001f602f60958258613a115781b687474703a2f
2f6578616d706c652e636f6d2f66696c652e62696e15f603f60a438203f6
0c438217f6
]]></artwork></figure>

</section>
<section anchor="example-3-load-from-external-storage" title="Example 3: Load from External Storage">

<t>Compatibility test, simultaneous download and installation, load from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820568
56a72f9ac0ee73b4ea3a866cf2e5c990e8ed8c6056608bc221efd42172b2758402a9d7
573ef6dcf5653b39027fdf87b81adeb0f03122bef0ecf5af9c7d77323c32827230f660
8342b7bf5c125f17148bd67880420ab0d03e235e6ca1d15127499' / [
        h'd28443a10126a058248202582056856a72f9ac0ee73b4ea3a866cf2e5c99
0e8ed8c6056608bc221efd42172b2758402a9d7573ef6dcf5653b39027fdf87b81adeb
0f03122bef0ecf5af9c7d77323c32827230f6608342b7bf5c125f17148bd67880420ab
0d03e235e6ca1d15127499' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582056856a72f9ac0ee73b4ea3a866cf2e5c
990e8ed8c6056608bc221efd42172b27' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"56856a72f9ac0ee73b4ea3a866cf2e5c990e8ed8c6056608bc221efd42172b27"'
                ] /,
                / signature / h'"2a9d7573ef6dcf5653b39027fdf87b81adeb0
f03122bef0ecf5af9c7d77323c32827230f6608342b7bf5c125f17148bd67880420ab0
d03e235e6ca1d15127499"'
            ]) /
    ] /,
    / manifest / 3:h'a701010204035865a2024782814100814101045858880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab450358248202582000112233445566778899aabbccddeeff0123456789abcdeffed
cba98765432100e1987d001f602f6095827880c0013a115781b687474703a2f2f65786
16d706c652e636f6d2f66696c652e62696e15f603f60a45840c0003f60b4b880c0113a
1160016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:4,
        / common / 3:h'a2024782814100814101045858880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'"00"'] ,
                [h'"01"']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602
f6' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'880c0013a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0113a1160016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / source-component / 22:0 / [h'"00"'] /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  182</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358b2a701010204035865a2024782814100814101045858880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d001f602f6095827880c0013
a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e15f603f60a45840c0003f60b4b880c0113a1160016f603f60c45840c01
17f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  299</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582056856a72f9ac0ee73b4e
a3a866cf2e5c990e8ed8c6056608bc221efd42172b2758402a9d7573ef6d
cf5653b39027fdf87b81adeb0f03122bef0ecf5af9c7d77323c32827230f
6608342b7bf5c125f17148bd67880420ab0d03e235e6ca1d151274990358
b2a701010204035865a2024782814100814101045858880c0014a40150fa
6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51
f2ab450358248202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100e1987d001f602f6095827880c0013a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f6
03f60a45840c0003f60b4b880c0113a1160016f603f60c45840c0117f6
]]></artwork></figure>

</section>
<section anchor="example-4-load-and-decompress-from-external-storage" title="Example 4: Load and Decompress from External Storage">

<t>Compatibility test, simultaneous download and installation, load and decompress from external storage, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a058248202582057b
edc0076919ba83908365faf6d205e95c71268d29a94dc5e82698edd3a48225840e0a4d
c500266518742802f2364b65f983175f060c1555d3d0b186f447500ba60c66e3231674
1c3b642c68fed73d47542c3375c0ab72e0f4b94ec392ab398599d' / [
        h'd28443a10126a058248202582057bedc0076919ba83908365faf6d205e95
c71268d29a94dc5e82698edd3a48225840e0a4dc500266518742802f2364b65f983175
f060c1555d3d0b186f447500ba60c66e32316741c3b642c68fed73d47542c3375c0ab7
2e0f4b94ec392ab398599d' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'8202582057bedc0076919ba83908365faf6d205e
95c71268d29a94dc5e82698edd3a4822' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"57bedc0076919ba83908365faf6d205e95c71268d29a94dc5e82698edd3a4822"'
                ] /,
                / signature / h'"e0a4dc500266518742802f2364b65f983175f
060c1555d3d0b186f447500ba60c66e32316741c3b642c68fed73d47542c3375c0ab72
e0f4b94ec392ab398599d"'
            ]) /
    ] /,
    / manifest / 3:h'a701010205035865a2024782814100814101045858880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab450358248202582000112233445566778899aabbccddeeff0123456789abcdeffed
cba98765432100e1987d001f602f6095827880c0013a115781b687474703a2f2f65786
16d706c652e636f6d2f66696c652e62696e15f603f60a45840c0003f60b4d880c0113a
21301160016f603f60c45840c0117f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814100814101045858880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'"00"'] ,
                [h'"01"']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602
f6' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'880c0013a115781b687474703a2f2f6578616d706c652e
636f6d2f66696c652e62696e15f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            } ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / load / 11:h'880c0113a21301160016f603f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / source-component / 22:0 / [h'"00"'] /,
                / compression-info / 19:1 / "gzip" /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0117f6' / [
            / directive-set-component-index / 12,1 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  184</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358b4a701010205035865a2024782814100814101045858880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d001f602f6095827880c0013
a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e15f603f60a45840c0003f60b4d880c0113a21301160016f603f60c4584
0c0117f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  301</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a058248202582057bedc0076919ba83908
365faf6d205e95c71268d29a94dc5e82698edd3a48225840e0a4dc500266
518742802f2364b65f983175f060c1555d3d0b186f447500ba60c66e3231
6741c3b642c68fed73d47542c3375c0ab72e0f4b94ec392ab398599d0358
b4a701010205035865a2024782814100814101045858880c0014a40150fa
6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51
f2ab450358248202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100e1987d001f602f6095827880c0013a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e15f6
03f60a45840c0003f60b4d880c0113a21301160016f603f60c45840c0117
f6
]]></artwork></figure>

</section>
<section anchor="example-5-compatibility-test-download-installation-and-secure-boot" title="Example 5: Compatibility Test, Download, Installation, and Secure Boot">

<t>Compatibility test, download, installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820ecc
95235f2ab00b9912f8189b213b3e4ade42b792f491644e76004cd2ba87dc8584093952
6b77d63dac2e138bf074aac757c5f010e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc973c
c0565410a1cb6bf10d2b3d0a2865392255cc4288d0337af3de837' / [
        h'd28443a10126a0582482025820ecc95235f2ab00b9912f8189b213b3e4ad
e42b792f491644e76004cd2ba87dc85840939526b77d63dac2e138bf074aac757c5f01
0e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc973cc0565410a1cb6bf10d2b3d0a2865392
255cc4288d0337af3de837' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'82025820ecc95235f2ab00b9912f8189b213b3e4
ade42b792f491644e76004cd2ba87dc8' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"ecc95235f2ab00b9912f8189b213b3e4ade42b792f491644e76004cd2ba87dc8"'
                ] /,
                / signature / h'"939526b77d63dac2e138bf074aac757c5f010
e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc973cc0565410a1cb6bf10d2b3d0a28653922
55cc4288d0337af3de837"'
            ]) /
    ] /,
    / manifest / 3:h'a701010205035865a2024782814100814101045858880c001
4a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f
2ab450358248202582000112233445566778899aabbccddeeff0123456789abcdeffed
cba98765432100e1987d001f602f6085823840c0113a115781b687474703a2f2f65786
16d706c652e636f6d2f66696c652e62696e094b880c0013a1160116f603f60a45840c0
003f60c45840c0017f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:5,
        / common / 3:h'a2024782814100814101045858880c0014a40150fa6b4a5
3d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab45035824820
2582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100
e1987d001f602f6' / {
            / components / 2:h'82814100814101' / [
                [h'"00"'] ,
                [h'"01"']
            ] /,
            / common-sequence / 4:h'880c0014a40150fa6b4a53d5ad5fdfbe9d
e663e4d41ffe02501492af1425695e48bf429b2d51f2ab450358248202582000112233
445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d001f602
f6' / [
                / directive-set-component-index / 12,0 ,
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                    / image-digest / 3:h'8202582000112233445566778899a
abbccddeeff0123456789abcdeffedcba9876543210' / [
                        / algorithm-id / 2 / "sha256" /,
                        / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                    ] /,
                    / image-size / 14:34768,
                } ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / payload-fetch / 8:h'840c0113a115781b687474703a2f2f6578616d70
6c652e636f6d2f66696c652e62696e' / [
            / directive-set-component-index / 12,1 ,
            / directive-set-parameters / 19,{
                / uri / 21:'http://example.com/file.bin',
            }
        ] /,
        / install / 9:h'880c0013a1160116f603f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-set-parameters / 19,{
                / source-component / 22:1 / [h'"01"'] /,
            } ,
            / directive-copy / 22,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'840c0003f6' / [
            / directive-set-component-index / 12,0 ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / run / 12:h'840c0017f6' / [
            / directive-set-component-index / 12,0 ,
            / directive-run / 23,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  178</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a10358aea701010205035865a2024782814100814101045858880c0014a4
0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42
9b2d51f2ab450358248202582000112233445566778899aabbccddeeff01
23456789abcdeffedcba98765432100e1987d001f602f6085823840c0113
a115781b687474703a2f2f6578616d706c652e636f6d2f66696c652e6269
6e094b880c0013a1160116f603f60a45840c0003f60c45840c0017f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  295</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a0582482025820ecc95235f2ab00b9912f
8189b213b3e4ade42b792f491644e76004cd2ba87dc85840939526b77d63
dac2e138bf074aac757c5f010e8b2cf3ae9fcbba4cafc2d0f81c9ae46bc9
73cc0565410a1cb6bf10d2b3d0a2865392255cc4288d0337af3de8370358
aea701010205035865a2024782814100814101045858880c0014a40150fa
6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51
f2ab450358248202582000112233445566778899aabbccddeeff01234567
89abcdeffedcba98765432100e1987d001f602f6085823840c0113a11578
1b687474703a2f2f6578616d706c652e636f6d2f66696c652e62696e094b
880c0013a1160116f603f60a45840c0003f60c45840c0017f6
]]></artwork></figure>

</section>
<section anchor="example-6-two-images" title="Example 6: Two Images">

<t>Compatibility test, 2 images, simultaneous download and installation, and secure boot.</t>

<figure><artwork><![CDATA[
{
    / authentication-wrapper / 2:h'81586fd28443a10126a0582482025820732
5a7d3acf130d161810c4874f275f658970b7bc5a63cda56e9920a4aaba3a3584088cb9
6211bcc4cdb59cb0022cb213017b2d117bac1a5460ae92903acc196282f7888368bf0a
065756e43f53cdbeee367e9523312063e8eaad0889a7cee371859' / [
        h'd28443a10126a05824820258207325a7d3acf130d161810c4874f275f658
970b7bc5a63cda56e9920a4aaba3a3584088cb96211bcc4cdb59cb0022cb213017b2d1
17bac1a5460ae92903acc196282f7888368bf0a065756e43f53cdbeee367e952331206
3e8eaad0889a7cee371859' / 18([
                / protected / h'a10126' / {
                    / alg / 1:-7 / "ES256" /,
                } /,
                / unprotected / {
                },
                / payload / h'820258207325a7d3acf130d161810c4874f275f6
58970b7bc5a63cda56e9920a4aaba3a3' / [
                    / algorithm-id / 2 / "sha256" /,
                    / digest-bytes /
h'"7325a7d3acf130d161810c4874f275f658970b7bc5a63cda56e9920a4aaba3a3"'
                ] /,
                / signature / h'"88cb96211bcc4cdb59cb0022cb213017b2d11
7bac1a5460ae92903acc196282f7888368bf0a065756e43f53cdbeee367e9523312063
e8eaad0889a7cee371859"'
            ]) /
    ] /,
    / manifest / 3:h'a50101020303589da20244818141000458938814a20150fa6
b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f825
8308405f614a20358248202582000112233445566778899aabbccddeeff0123456789a
bcdeffedcba98765432100e1987d058328405f614a2035824820258200123456789abc
deffedcba987654321000112233445566778899aabbccddeeff0e1a00012c2201f602f
6095853860f8258248405f613a115781c687474703a2f2f6578616d706c652e636f6d2
f66696c65312e62696e58248405f613a115781c687474703a2f2f6578616d706c652e6
36f6d2f66696c65322e62696e15f603f60a438203f6' / {
        / manifest-version / 1:1,
        / manifest-sequence-number / 2:3,
        / common / 3:h'a20244818141000458938814a20150fa6b4a53d5ad5fdfb
e9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258308405f614a20
358248202582000112233445566778899aabbccddeeff0123456789abcdeffedcba987
65432100e1987d058328405f614a2035824820258200123456789abcdeffedcba98765
4321000112233445566778899aabbccddeeff0e1a00012c2201f602f6' / {
            / components / 2:h'81814100' / [
                [h'"00"']
            ] /,
            / common-sequence / 4:h'8814a20150fa6b4a53d5ad5fdfbe9de663
e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258308405f614a203582482
02582000112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210
0e1987d058328405f614a2035824820258200123456789abcdeffedcba987654321000
112233445566778899aabbccddeeff0e1a00012c2201f602f6' / [
                / directive-override-parameters / 20,{
                    / vendor-id /
1:h'"fa6b4a53d5ad5fdfbe9de663e4d41ffe"' / fa6b4a53-d5ad-5fdf-
be9d-e663e4d41ffe /,
                    / class-id /
2:h'"1492af1425695e48bf429b2d51f2ab45"' /
1492af14-2569-5e48-bf42-9b2d51f2ab45 /,
                } ,
                / directive-try-each / 15,[
                    h'8405f614a20358248202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100e1987d0' / [
                        / condition-component-offset / 5,F6 / nil / ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200011223344556
6778899aabbccddeeff0123456789abcdeffedcba9876543210' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'"00112233445566778899aabbccddeeff0123456789abcdeffedcba9876543210"'
                            ] /,
                            / image-size / 14:34768,
                        }
                    ] / ,
                    h'8405f614a2035824820258200123456789abcdeffedcba98
7654321000112233445566778899aabbccddeeff0e1a00012c22' / [
                        / condition-component-offset / 5,F6 / nil / ,
                        / directive-override-parameters / 20,{
                            / image-digest / 3:h'820258200123456789abc
deffedcba987654321000112233445566778899aabbccddeeff' / [
                                / algorithm-id / 2 / "sha256" /,
                                / digest-bytes /
h'"0123456789abcdeffedcba987654321000112233445566778899aabbccddeeff"'
                            ] /,
                            / image-size / 14:76834,
                        }
                    ] /
                ] ,
                / condition-vendor-identifier / 1,F6 / nil / ,
                / condition-class-identifier / 2,F6 / nil /
            ] /,
        } /,
        / install / 9:h'860f8258248405f613a115781c687474703a2f2f657861
6d706c652e636f6d2f66696c65312e62696e58248405f613a115781c687474703a2f2f
6578616d706c652e636f6d2f66696c65322e62696e15f603f6' / [
            / directive-try-each / 15,[
                h'8405f613a115781c687474703a2f2f6578616d706c652e636f6d
2f66696c65312e62696e' / [
                    / condition-component-offset / 5,F6 / nil / ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file1.bin',
                    }
                ] / ,
                h'8405f613a115781c687474703a2f2f6578616d706c652e636f6d
2f66696c65322e62696e' / [
                    / condition-component-offset / 5,F6 / nil / ,
                    / directive-set-parameters / 19,{
                        / uri / 21:'http://example.com/file2.bin',
                    }
                ] /
            ] ,
            / directive-fetch / 21,F6 / nil / ,
            / condition-image-match / 3,F6 / nil /
        ] /,
        / validate / 10:h'8203f6' / [
            / condition-image-match / 3,F6 / nil /
        ] /,
    } /,
}
]]></artwork></figure>

<t>Total size of manifest without COSE authentication object:  261</t>

<t>Manifest:</t>

<figure><artwork><![CDATA[
a103590100a50101020303589da20244818141000458938814a20150fa6b
4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2
ab450f8258308405f614a20358248202582000112233445566778899aabb
ccddeeff0123456789abcdeffedcba98765432100e1987d058328405f614
a2035824820258200123456789abcdeffedcba9876543210001122334455
66778899aabbccddeeff0e1a00012c2201f602f6095853860f8258248405
f613a115781c687474703a2f2f6578616d706c652e636f6d2f66696c6531
2e62696e58248405f613a115781c687474703a2f2f6578616d706c652e63
6f6d2f66696c65322e62696e15f603f60a438203f6
]]></artwork></figure>

<t>Total size of manifest with COSE authentication object:  378</t>

<t>Manifest with COSE authentication object:</t>

<figure><artwork><![CDATA[
a202587281586fd28443a10126a05824820258207325a7d3acf130d16181
0c4874f275f658970b7bc5a63cda56e9920a4aaba3a3584088cb96211bcc
4cdb59cb0022cb213017b2d117bac1a5460ae92903acc196282f7888368b
f0a065756e43f53cdbeee367e9523312063e8eaad0889a7cee3718590359
0100a50101020303589da20244818141000458938814a20150fa6b4a53d5
ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f
8258308405f614a20358248202582000112233445566778899aabbccddee
ff0123456789abcdeffedcba98765432100e1987d058328405f614a20358
24820258200123456789abcdeffedcba9876543210001122334455667788
99aabbccddeeff0e1a00012c2201f602f6095853860f8258248405f613a1
15781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e6269
6e58248405f613a115781c687474703a2f2f6578616d706c652e636f6d2f
66696c65322e62696e15f603f60a438203f6
]]></artwork></figure>

</section>
</section>
<section numbered="no" anchor="design-rationale" title="C. Design Rational">

<t>In order to provide flexible behavior to constrained devices, while still allowing more powerful devices to use their full capabilities, the SUIT manifest encodes the required behavior of a Recipient device. Behavior is encoded as a specialized byte code, contained in a CBOR list. This promotes a flat encoding, which simplifies the parser. The information encoded by this byte code closely matches the operations that a device will perform, which promotes ease of processing. The core operations used by most update and trusted execution operations are represented in the byte code. The byte code can be extended by registering new operations.</t>

<t>The specialized byte code approach gives benefits equivalent to those provided by a scripting language or conventional byte code, with two substantial differences. First, the language is extremely high level, consisting of only the operations that a device may perform during update and trusted execution of a firmware image. Second, the language specifies linear behavior, without reverse branches. Conditional processing is supported, and parallel and out-of-order processing may be performed by sufficiently capable devices.</t>

<t>By structuring the data in this way, the manifest processor becomes a very simple engine that uses a pull parser to interpret the manifest. This pull parser invokes a series of command handlers that evaluate a Condition or execute a Directive. Most data is structured in a highly regular pattern, which simplifies the parser.</t>

<t>The results of this allow a Recipient to implement a very small parser for constrained applications. If needed, such a parser also allows the Recipient to perform complex updates with reduced overhead. Conditional execution of commands allows a simple device to perform important decisions at validation-time.</t>

<t>Dependency handling is vastly simplified as well. Dependencies function like subroutines of the language. When a manifest has a dependency, it can invoke that dependency’s commands and modify their behavior by setting parameters. Because some parameters come with security implications, the dependencies also have a mechanism to reject modifications to parameters on a fine-grained level.</t>

<t>Developing a robust permissions system works in this model too. The Recipient can use a simple ACL that is a table of Identities and Component Identifier permissions to ensure that operations on components fail unless they are permitted by the ACL. This table can be further refined with individual parameters and commands.</t>

<t>Capability reporting is similarly simplified. A Recipient can report the Commands, Parameters, Algorithms, and Component Identifiers that it supports. This is sufficiently precise for a manifest author to create a manifest that the Recipient can accept.</t>

<t>The simplicity of design in the Recipient due to all of these benefits allows even a highly constrained platform to use advanced update capabilities.</t>

<section anchor="design-rationale-envelope" title="C.1 Design Rationale: Envelope">

<t>The Envelope is used instead of a COSE structure for several reasons:</t>

<t><list style="numbers">
  <t>This enables the use of <xref target="severable-fields">Severable Elements</xref></t>
  <t>This enables modular processing of manifests, particularly with large signatures.</t>
  <t>This enables multiple authentication schemes.</t>
  <t>This allows integrity verification by a dependent to be unaffected by adding or removing authentication structures.</t>
</list></t>

<t>Modular processing is important because it allows a Manifest Processor to iterate forward over an Envelope, processing Delegation Chains and Authentication Blocks, retaining only intermediate values, without any need to seek forward and backwards in a stream until it gets to the Manifest itself. This allows the use of large, Post-Quantum signatures without requiring retention of the signature itself, or seeking forward and back.</t>

<t>Four authentication objects are supported by the Envelope:</t>

<t><list style="symbols">
  <t>COSE_Sign_Tagged</t>
  <t>COSE_Sign1_Tagged</t>
  <t>COSE_Mac_Tagged</t>
  <t>COSE_Mac0_Tagged</t>
</list></t>

<t>The SUIT Envelope allows an Update Authority or intermediary to mix and match any number of different authentication blocks it wants without any concern for modifying the integrity of another authentication block. This also allows the addition or removal of an authentication blocks without changing the integrity check of the Manifest, which is important for dependency handling. See <xref target="required-checks"/></t>

</section>
<section anchor="c2-byte-string-wrappers" title="C.2 Byte String Wrappers">

<t>Byte string wrappers are used in several places in the suit manifest. The primary reason for wrappers it to limit the parser extent when invoked at different times, with a possible loss of context.</t>

<t>The elements of the suit envelope are wrapped both to set the extents used by the parser and to simplify integrity checks by clearly defining the length of each element.</t>

<t>The common block is re-parsed in order to find components identifiers from their indices, to find dependency prefixes and digests from their identifiers, and to find the common sequence. The common sequence is wrapped so that it matches other sequences, simplifying the code path.</t>

<t>A severed SUIT command sequence will appear in the envelope, so it must be wrapped as with all envelope elements. For consistency, command sequences are also wrapped in the manifest. This also allows the parser to discern the difference between a command sequence and a SUIT_Digest.</t>

<t>Parameters that are structured types (arrays and maps) are also wrapped in a bstr. This is so that parser extents can be set correctly using only a reference to the beginning of the parameter. This enables a parser to store a simple list of references to parameters that can be retrieved when needed.</t>

</section>
</section>
<section numbered="no" anchor="implementation-matrix" title="D. Implementation Conformance Matrix">

<t>This section summarizes the functionality a minimal implementation needs
to offer to claim conformance to this specification, in the absence of
an application profile standard specifying otherwise.</t>

<t>The subsequent table shows the conditions.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Class Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>REQUIRED</c>
      <c>Device Identifier</c>
      <c><xref target="identifiers"/></c>
      <c>OPTIONAL</c>
      <c>Image Match</c>
      <c><xref target="suit-condition-image-match"/></c>
      <c>REQUIRED</c>
      <c>Image Not Match</c>
      <c><xref target="suit-condition-image-not-match"/></c>
      <c>OPTIONAL</c>
      <c>Use Before</c>
      <c><xref target="suit-condition-use-before"/></c>
      <c>OPTIONAL</c>
      <c>Component Offset</c>
      <c><xref target="suit-condition-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-condition-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Authorized</c>
      <c><xref target="suit-condition-update-authorized"/></c>
      <c>OPTIONAL</c>
      <c>Version</c>
      <c><xref target="suit-condition-version"/></c>
      <c>OPTIONAL</c>
      <c>Custom Condition</c>
      <c><xref target="SUIT_Condition_Custom"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the directives.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Set Component Index</c>
      <c><xref target="suit-directive-set-component-index"/></c>
      <c>REQUIRED if more than one component</c>
      <c>Set Dependency Index</c>
      <c><xref target="suit-directive-set-dependency-index"/></c>
      <c>REQUIRED if dependencies used</c>
      <c>Abort</c>
      <c><xref target="suit-directive-abort"/></c>
      <c>OPTIONAL</c>
      <c>Try Each</c>
      <c><xref target="suit-directive-try-each"/></c>
      <c>OPTIONAL</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>OPTIONAL</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>OPTIONAL</c>
      <c>Override Parameters</c>
      <c><xref target="suit-directive-override-parameters"/></c>
      <c>REQUIRED</c>
      <c>Fetch</c>
      <c><xref target="suit-directive-fetch"/></c>
      <c>REQUIRED for Updater</c>
      <c>Copy</c>
      <c><xref target="suit-directive-copy"/></c>
      <c>OPTIONAL</c>
      <c>Run</c>
      <c><xref target="suit-directive-run"/></c>
      <c>REQUIRED for Bootloader</c>
      <c>Wait For Event</c>
      <c><xref target="suit-directive-wait"/></c>
      <c>OPTIONAL</c>
      <c>Run Sequence</c>
      <c><xref target="suit-directive-run-sequence"/></c>
      <c>OPTIONAL</c>
      <c>Swap</c>
      <c><xref target="suit-directive-swap"/></c>
      <c>OPTIONAL</c>
      <c>Fetch URI List</c>
      <c><xref target="suit-directive-fetch-uri-list"/></c>
      <c>OPTIONAL</c>
</texttable>

<t>The subsequent table shows the parameters.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <ttcol align='left'>Implementation</ttcol>
      <c>Vendor ID</c>
      <c><xref target="suit-parameter-vendor-identifier"/></c>
      <c>REQUIRED</c>
      <c>Class ID</c>
      <c><xref target="suit-parameter-class-identifier"/></c>
      <c>REQUIRED</c>
      <c>Image Digest</c>
      <c><xref target="suit-parameter-image-digest"/></c>
      <c>REQUIRED</c>
      <c>Image Size</c>
      <c><xref target="suit-parameter-image-size"/></c>
      <c>REQUIRED</c>
      <c>Use Before</c>
      <c><xref target="suit-parameter-use-before"/></c>
      <c>RECOMMENDED</c>
      <c>Component Offset</c>
      <c><xref target="suit-parameter-component-offset"/></c>
      <c>OPTIONAL</c>
      <c>Encryption Info</c>
      <c><xref target="suit-parameter-encryption-info"/></c>
      <c>RECOMMENDED</c>
      <c>Compression Info</c>
      <c><xref target="suit-parameter-compression-info"/></c>
      <c>RECOMMENDED</c>
      <c>Unpack Info</c>
      <c><xref target="suit-parameter-unpack-info"/></c>
      <c>RECOMMENDED</c>
      <c>URI</c>
      <c><xref target="suit-parameter-uri"/></c>
      <c>REQUIRED for Updater</c>
      <c>Source Component</c>
      <c><xref target="suit-parameter-source-component"/></c>
      <c>OPTIONAL</c>
      <c>Run Args</c>
      <c><xref target="suit-parameter-run-args"/></c>
      <c>OPTIONAL</c>
      <c>Device ID</c>
      <c><xref target="suit-parameter-device-identifier"/></c>
      <c>OPTIONAL</c>
      <c>Minimum Battery</c>
      <c><xref target="suit-parameter-minimum-battery"/></c>
      <c>OPTIONAL</c>
      <c>Update Priority</c>
      <c><xref target="suit-parameter-update-priority"/></c>
      <c>OPTIONAL</c>
      <c>Version Match</c>
      <c><xref target="suit-parameter-version"/></c>
      <c>OPTIONAL</c>
      <c>Wait Info</c>
      <c><xref target="suit-parameter-wait-info"/></c>
      <c>OPTIONAL</c>
      <c>URI List</c>
      <c><xref target="suit-parameter-uri-list"/></c>
      <c>OPTIONAL</c>
      <c>Strict Order</c>
      <c><xref target="suit-parameter-strict-order"/></c>
      <c>OPTIONAL</c>
      <c>Soft Failure</c>
      <c><xref target="suit-parameter-soft-failure"/></c>
      <c>OPTIONAL</c>
      <c>Custom</c>
      <c><xref target="suit-parameter-custom"/></c>
      <c>OPTIONAL</c>
</texttable>

</section>


  </back>

<!-- ##markdown-source:
H4sIAMDVCF8AA+y963Ic2XUm+r+eIg87wk1IVdUkyL7RlsMgSLphk00OwVbL
binaiaoEkGJVZikzC2CJTf86D3Eizp95jPk9jnmvs+577Z2ZBVBqa8Y+Vigk
ojJzX9dee12/NZvNJl3ZrYpH2VF2XFeLsi2yx2WVN7vs5dnvi0WXvS42TdEW
VZd3ZV1ld48fv3x9MDvL22KZnRZNma/KP/KjZ3WzzrvsvG6y7rLITuvz7jpv
iuy7zTLvipYenFRd0VRFl9Xn2ZvLsrpos7un3528Oche5FV5XrTdJD87a4qr
Rxl2pP3AG+GFZb2o8jUMednk592sLLrzWbstu9la3pjd+2qygC4v6mb3KGu7
5WRSbppHWdds2+7w3r2v7x1OYGD5I5jAYtuU3W5yXTdvL5p6u3lEnU3eFjv4
afnIBjx7gp1NJm2XV8sf81VdwQB2RTvZlI8mWdacL4pl2+1W8muWdfXC/bOs
lrCE+kNbN11TnLf2924d/dk15cJeXtTrNXxrT8tqVVahm+JdN1uVMGlo5Kxe
wWuz+he/hCewTOt8s4E1duP4cVVcFfjSw8kk33aXdQOjn8Ez/E9ZwYPH8+xF
3eSV/MYr/bgpqmVeRU/q5gLWm/ceyKdZZ8/LddkVS3lerPNyZZ/O6dO/y5v1
HCY0STr9Zp69aReX9XlRlRdRz9/kVQW003t6y94v6fN5Z5/vGcHjsnl7Wa/+
GPdfVG/TJ3Hfz5p8W2HrTXYKlBN3D1/Pz+Trv2vLbn5ub8+XRTqIf5xn/wzk
dVY08SL8Y11U6ZN4ECcVnMS477fw0fyP8tHflfgC9D6ZVHRMy6sC6fb1s+OH
9w8P5Z9f3f9c//ng66++eDSBg1Od+/dPZk/m4cDlzeIS1nzRbZuBp/ZpXc3W
9bJYRa90RbHpNQAdf/n1Ax3D/a8/v6cje/C1/vrl4eFX+uuXD7/URt9uF5dF
k1/vZnAWv3r45VdnZYvPvnn6m0e0MMLn7uCJXuHPd+hnOwXwn2gz7nxfvi03
xbLM+UVkYo+yw3uH97i5vLko4JBedt2mffTZZ7DY1/rBHDbnM/zrM+rsR+gM
vjl9/fQ4Hgr+kt09L1dFxkt18JcYE/b6I/X6o/QKHz99/iwe29N3wBu7/AzG
BjQEp6t6S38Il78LH/xFRhvG8SNyXh3HjzwOaOj45bNk6MfAMeE+kgvsWelG
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
lA32ONk3mjKQt1UHCdaj2VnexjGHtXAci8iwpYiA1igqe/hF0ILwMunFlthj
Qp3Vppwly6NFOuQwdlCZJafebFdKJmHZNEJh3+EaC6V3iC44cI7jt5hHD3uF
veTZntXGHmQYKQmo/ct2gW8WoQxdAwO1x9uZY8OGKipHweqo7HE/icm4iqq1
3PntD5+++3Safbr79Le/uzN1edTauSzxGXsdru7P32W41KI/wN+H88/Z4oC3
9NXh/B5ZYs7qK0lzklLWHO2useUOpMWXsYv3z+TOb+vOEDYpFZrPBBZBOkNu
VOYX2LuKvf/yL/8y+eHy0y+/+nQK//v1p7/LHmXvKWTpS/jXnb/9FQ/6bw7v
TD7Qy0FQZovXgKgspjA5VvKar8w5bnhTR5OYKoKMTXkqQcxO6oqzoLTImyHz
DVvdvDtxh5DHpUHMG/X1DD/xFPaylk8isfR9KryG1aDnpkuJZHoLQ6+PsOgZ
faeSSwBU8kj9QFFZeenbSlbT12FADjbbD3OPotnrhPUc9Xr+wKYyO0wgzie/
HKjnj7GiSO7befmXgOTElaOMV5x6tAaiiqe6plXJm/cXYt8WJks0NJ0hpggT
i7+chTSa4Slq6I9cpk5ZYoGqZCSGpC6vedGUBJLpz9M9Ht28v46rfMcGGY8g
jOKA+FNZT817fWhRziFS4hW0asBAcT+awZtYLldftYKjhauNqSlVKaEDf2D1
KcsFVVQl/F7nklujOaIWD+SgTWnpJQqKs9CZgwWsUo55szsY+h0O1QSdmarQ
2N0dZQk4s6Y/6HxdWcsBhnA+MqV2nyW9izZcasPVIMOtxbLZEz+iytMfjPC2
dHYQ8ZECAj3qI26UzJSv4sA4YwT51MMxHZ4RlwqVlEOKdSwac6czW/0kxTZP
2AiWzI5/iSqWxzY+p+AnvuHhI/XGRwcZ/gcXnb/k+ivD/jKmNo/qajiq+UIK
tCRCiVnHzsTZ0CWd035WSEIUHFl1Y4FpKppIVqJayzAbhtM+uUgno6KWFxWX
zVhyBOtA0V0GYKXLl05SiMF10WeWPiSBbWETEmnRdmRblUAGqx2ORl0HDHrr
CrTaAgzEzEZoLNQLd81sVEUxk9m1PMZOoaC48HI/kIHzB3pwqJ+2EVardcd1
4AkhEqVNpYn+yBV4U/eL8CZPy4sfI8ccxssMTLYq8FZD2SUBUm+KdX0lRX+t
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
claex1pk6mFlbNblXPGYEnEM77I8s7rC6fjw6JQd93hle/7cwvMi99gBD3hk
xWh0cPztyRPj2fOTn/ZfHBs/HP/CnpLHJ99+t39+vP/44PG3Bzdvvj197Ebw
97eHh+L36+PvDr41r+n1ycH+jz+e71/9+5ff/n348ttHjz3zp4NDcvjbL6eL
f31lRr99ezm9+f7Z/Oro0Yv3uxfjfz29eL7/5HB///R4MjvGywLevIm+v/jp
3TgLnswu37558yh8vnhLnn0Vjxc//5xcpG/35y+K/IfXi+Lwl+N31z88Wcyf
fPevcfT0wHny1fV0/+WieH/53HYeu4sfxj9ztI6fHLWRYuLxonVaxtUynowT
dpCmerJ07YKSoiK4hnovDx6dHCrE++b19fH1L9/9MPv3yfvfzMP9H385Eb8f
7f+YHAG5ji++pwffvnEfvXnz9vSXn5Jfpsv39Pu5/2a8exyT+P3upTv/aTI9
+Vd8/YMZfHdz9Sjevzx4nBz+FtP3zy337Yvz9H1efH/9zaP4sfc6Xbx/+uh0
Njl/+FDBvzEthj4/lpyjwi9F44cWGeIYVOH8pXjzU96ENhnmHj/fJzMOZjOw
ueIPvO2mvDgS4it+p4nBjofnh4kQXkDbNTpqBruGvXdxL7S80M9TO3Rdh1qm
ZfvU9ELbDW3Thv+bvueR3LIdM0+d0HESGtphYsEL043CPLWSNII2Po2o7dtm
4kdhFNlWYvq+7QSm4wF416Sma/kEgJlBHAS+Rz0rz0zP9zMvDfMsjTw3srLM
T3Pfti3H9mw3T+PMD7BDHuR2ELlpQAMrpSkJYDIpTCQO/cQzI4vatp+apulb
sUkDl5pW7KROYGVmkHqxkyXUSd17gG5VXLy4txLhHnzJQIR78CUDEe7Bl3Qj
bIVf/lqrjHJ5EKc7gbrtAiU4DbD57622Qn4m5whsbxTA/744PgXJ/cLY3Wm1
/qB7uGuAE1cGbA/yQddJlIzYDIdyhvSJYl0IWkhWh2CAaiCq/DQDLa68U+0g
jF1yce+LfulZPcUv7rWGeqUna3kIK6PRF0MkLiO3InGUaCWuMfVX98U2ynL+
u5Xz3TUcsD3UM0H4TBv+dcAKmRQY7bqhFVquBcO5Xuj5oW+51DUtz8ypT2KX
ek7q0dTL0zzOojTzfSdzU9fKAV0b4LmRTXPLBb5FXuaGce7aUWynQA6bxq6H
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
Y+SgHaUCAA==

-->

</rfc>

